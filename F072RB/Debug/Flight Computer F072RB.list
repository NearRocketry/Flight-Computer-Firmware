
Flight Computer F072RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  0800a168  0800a168  0000b168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b8  0800a5b8  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a5b8  0800a5b8  0000c07c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a5b8  0800a5b8  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5bc  0800a5bc  0000b5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a5c0  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000300  2000007c  0800a63c  0000c07c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800a63c  0000c37c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093c0  00000000  00000000  0000c0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7c  00000000  00000000  00015464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  000170e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b6  00000000  00000000  000179b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a31d  00000000  00000000  00018066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba68  00000000  00000000  00032383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f3b  00000000  00000000  0003ddeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0d26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030ec  00000000  00000000  000d0d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000d3e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a14c 	.word	0x0800a14c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	0800a14c 	.word	0x0800a14c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f001 fe85 	bl	8002128 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f001 fdc5 	bl	8001fb8 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 fe77 	bl	8002128 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 fe6d 	bl	8002128 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 fdef 	bl	8002040 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f001 fde5 	bl	8002040 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)

08000484 <__aeabi_cfrcmple>:
 8000484:	4684      	mov	ip, r0
 8000486:	0008      	movs	r0, r1
 8000488:	4661      	mov	r1, ip
 800048a:	e7ff      	b.n	800048c <__aeabi_cfcmpeq>

0800048c <__aeabi_cfcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f000 fb83 	bl	8000b98 <__lesf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cfcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_fcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f000 fb03 	bl	8000aa8 <__eqsf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_fcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 fb75 	bl	8000b98 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_fcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 fb6b 	bl	8000b98 <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_fcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 fb11 	bl	8000af8 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_fcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_fcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f000 fb07 	bl	8000af8 <__gesf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_fcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_lmul>:
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	46ce      	mov	lr, r9
 80004fc:	4699      	mov	r9, r3
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	469c      	mov	ip, r3
 8000502:	0413      	lsls	r3, r2, #16
 8000504:	4647      	mov	r7, r8
 8000506:	0c1b      	lsrs	r3, r3, #16
 8000508:	001d      	movs	r5, r3
 800050a:	000e      	movs	r6, r1
 800050c:	4661      	mov	r1, ip
 800050e:	0404      	lsls	r4, r0, #16
 8000510:	0c24      	lsrs	r4, r4, #16
 8000512:	b580      	push	{r7, lr}
 8000514:	0007      	movs	r7, r0
 8000516:	0c10      	lsrs	r0, r2, #16
 8000518:	434b      	muls	r3, r1
 800051a:	4365      	muls	r5, r4
 800051c:	4341      	muls	r1, r0
 800051e:	4360      	muls	r0, r4
 8000520:	0c2c      	lsrs	r4, r5, #16
 8000522:	18c0      	adds	r0, r0, r3
 8000524:	1824      	adds	r4, r4, r0
 8000526:	468c      	mov	ip, r1
 8000528:	42a3      	cmp	r3, r4
 800052a:	d903      	bls.n	8000534 <__aeabi_lmul+0x3c>
 800052c:	2380      	movs	r3, #128	@ 0x80
 800052e:	025b      	lsls	r3, r3, #9
 8000530:	4698      	mov	r8, r3
 8000532:	44c4      	add	ip, r8
 8000534:	4649      	mov	r1, r9
 8000536:	4379      	muls	r1, r7
 8000538:	4356      	muls	r6, r2
 800053a:	0c23      	lsrs	r3, r4, #16
 800053c:	042d      	lsls	r5, r5, #16
 800053e:	0c2d      	lsrs	r5, r5, #16
 8000540:	1989      	adds	r1, r1, r6
 8000542:	4463      	add	r3, ip
 8000544:	0424      	lsls	r4, r4, #16
 8000546:	1960      	adds	r0, r4, r5
 8000548:	18c9      	adds	r1, r1, r3
 800054a:	bcc0      	pop	{r6, r7}
 800054c:	46b9      	mov	r9, r7
 800054e:	46b0      	mov	r8, r6
 8000550:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000552:	46c0      	nop			@ (mov r8, r8)

08000554 <__aeabi_fadd>:
 8000554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000556:	46ce      	mov	lr, r9
 8000558:	4647      	mov	r7, r8
 800055a:	0243      	lsls	r3, r0, #9
 800055c:	0a5a      	lsrs	r2, r3, #9
 800055e:	024e      	lsls	r6, r1, #9
 8000560:	0045      	lsls	r5, r0, #1
 8000562:	0fc4      	lsrs	r4, r0, #31
 8000564:	0048      	lsls	r0, r1, #1
 8000566:	4691      	mov	r9, r2
 8000568:	0e2d      	lsrs	r5, r5, #24
 800056a:	0a72      	lsrs	r2, r6, #9
 800056c:	0e00      	lsrs	r0, r0, #24
 800056e:	4694      	mov	ip, r2
 8000570:	b580      	push	{r7, lr}
 8000572:	099b      	lsrs	r3, r3, #6
 8000574:	0fc9      	lsrs	r1, r1, #31
 8000576:	09b6      	lsrs	r6, r6, #6
 8000578:	1a2a      	subs	r2, r5, r0
 800057a:	428c      	cmp	r4, r1
 800057c:	d021      	beq.n	80005c2 <__aeabi_fadd+0x6e>
 800057e:	2a00      	cmp	r2, #0
 8000580:	dd0d      	ble.n	800059e <__aeabi_fadd+0x4a>
 8000582:	2800      	cmp	r0, #0
 8000584:	d12d      	bne.n	80005e2 <__aeabi_fadd+0x8e>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x38>
 800058a:	e08d      	b.n	80006a8 <__aeabi_fadd+0x154>
 800058c:	1e51      	subs	r1, r2, #1
 800058e:	2a01      	cmp	r2, #1
 8000590:	d100      	bne.n	8000594 <__aeabi_fadd+0x40>
 8000592:	e11d      	b.n	80007d0 <__aeabi_fadd+0x27c>
 8000594:	2aff      	cmp	r2, #255	@ 0xff
 8000596:	d100      	bne.n	800059a <__aeabi_fadd+0x46>
 8000598:	e0ab      	b.n	80006f2 <__aeabi_fadd+0x19e>
 800059a:	000a      	movs	r2, r1
 800059c:	e027      	b.n	80005ee <__aeabi_fadd+0x9a>
 800059e:	2a00      	cmp	r2, #0
 80005a0:	d04d      	beq.n	800063e <__aeabi_fadd+0xea>
 80005a2:	1b42      	subs	r2, r0, r5
 80005a4:	2d00      	cmp	r5, #0
 80005a6:	d000      	beq.n	80005aa <__aeabi_fadd+0x56>
 80005a8:	e0cc      	b.n	8000744 <__aeabi_fadd+0x1f0>
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d100      	bne.n	80005b0 <__aeabi_fadd+0x5c>
 80005ae:	e079      	b.n	80006a4 <__aeabi_fadd+0x150>
 80005b0:	1e54      	subs	r4, r2, #1
 80005b2:	2a01      	cmp	r2, #1
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fadd+0x64>
 80005b6:	e128      	b.n	800080a <__aeabi_fadd+0x2b6>
 80005b8:	2aff      	cmp	r2, #255	@ 0xff
 80005ba:	d100      	bne.n	80005be <__aeabi_fadd+0x6a>
 80005bc:	e097      	b.n	80006ee <__aeabi_fadd+0x19a>
 80005be:	0022      	movs	r2, r4
 80005c0:	e0c5      	b.n	800074e <__aeabi_fadd+0x1fa>
 80005c2:	2a00      	cmp	r2, #0
 80005c4:	dc00      	bgt.n	80005c8 <__aeabi_fadd+0x74>
 80005c6:	e096      	b.n	80006f6 <__aeabi_fadd+0x1a2>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d04f      	beq.n	800066c <__aeabi_fadd+0x118>
 80005cc:	2dff      	cmp	r5, #255	@ 0xff
 80005ce:	d100      	bne.n	80005d2 <__aeabi_fadd+0x7e>
 80005d0:	e08f      	b.n	80006f2 <__aeabi_fadd+0x19e>
 80005d2:	2180      	movs	r1, #128	@ 0x80
 80005d4:	04c9      	lsls	r1, r1, #19
 80005d6:	430e      	orrs	r6, r1
 80005d8:	2a1b      	cmp	r2, #27
 80005da:	dd51      	ble.n	8000680 <__aeabi_fadd+0x12c>
 80005dc:	002a      	movs	r2, r5
 80005de:	3301      	adds	r3, #1
 80005e0:	e018      	b.n	8000614 <__aeabi_fadd+0xc0>
 80005e2:	2dff      	cmp	r5, #255	@ 0xff
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x94>
 80005e6:	e084      	b.n	80006f2 <__aeabi_fadd+0x19e>
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	04c9      	lsls	r1, r1, #19
 80005ec:	430e      	orrs	r6, r1
 80005ee:	2101      	movs	r1, #1
 80005f0:	2a1b      	cmp	r2, #27
 80005f2:	dc08      	bgt.n	8000606 <__aeabi_fadd+0xb2>
 80005f4:	0031      	movs	r1, r6
 80005f6:	2020      	movs	r0, #32
 80005f8:	40d1      	lsrs	r1, r2
 80005fa:	1a82      	subs	r2, r0, r2
 80005fc:	4096      	lsls	r6, r2
 80005fe:	0032      	movs	r2, r6
 8000600:	1e50      	subs	r0, r2, #1
 8000602:	4182      	sbcs	r2, r0
 8000604:	4311      	orrs	r1, r2
 8000606:	1a5b      	subs	r3, r3, r1
 8000608:	015a      	lsls	r2, r3, #5
 800060a:	d459      	bmi.n	80006c0 <__aeabi_fadd+0x16c>
 800060c:	2107      	movs	r1, #7
 800060e:	002a      	movs	r2, r5
 8000610:	4019      	ands	r1, r3
 8000612:	d049      	beq.n	80006a8 <__aeabi_fadd+0x154>
 8000614:	210f      	movs	r1, #15
 8000616:	4019      	ands	r1, r3
 8000618:	2904      	cmp	r1, #4
 800061a:	d000      	beq.n	800061e <__aeabi_fadd+0xca>
 800061c:	3304      	adds	r3, #4
 800061e:	0159      	lsls	r1, r3, #5
 8000620:	d542      	bpl.n	80006a8 <__aeabi_fadd+0x154>
 8000622:	1c50      	adds	r0, r2, #1
 8000624:	2afe      	cmp	r2, #254	@ 0xfe
 8000626:	d03a      	beq.n	800069e <__aeabi_fadd+0x14a>
 8000628:	019b      	lsls	r3, r3, #6
 800062a:	b2c0      	uxtb	r0, r0
 800062c:	0a5b      	lsrs	r3, r3, #9
 800062e:	05c0      	lsls	r0, r0, #23
 8000630:	4318      	orrs	r0, r3
 8000632:	07e4      	lsls	r4, r4, #31
 8000634:	4320      	orrs	r0, r4
 8000636:	bcc0      	pop	{r6, r7}
 8000638:	46b9      	mov	r9, r7
 800063a:	46b0      	mov	r8, r6
 800063c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800063e:	20fe      	movs	r0, #254	@ 0xfe
 8000640:	4680      	mov	r8, r0
 8000642:	1c6f      	adds	r7, r5, #1
 8000644:	0038      	movs	r0, r7
 8000646:	4647      	mov	r7, r8
 8000648:	4207      	tst	r7, r0
 800064a:	d000      	beq.n	800064e <__aeabi_fadd+0xfa>
 800064c:	e08e      	b.n	800076c <__aeabi_fadd+0x218>
 800064e:	2d00      	cmp	r5, #0
 8000650:	d000      	beq.n	8000654 <__aeabi_fadd+0x100>
 8000652:	e0b4      	b.n	80007be <__aeabi_fadd+0x26a>
 8000654:	2b00      	cmp	r3, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fadd+0x106>
 8000658:	e0db      	b.n	8000812 <__aeabi_fadd+0x2be>
 800065a:	2e00      	cmp	r6, #0
 800065c:	d06c      	beq.n	8000738 <__aeabi_fadd+0x1e4>
 800065e:	1b98      	subs	r0, r3, r6
 8000660:	0145      	lsls	r5, r0, #5
 8000662:	d400      	bmi.n	8000666 <__aeabi_fadd+0x112>
 8000664:	e0f7      	b.n	8000856 <__aeabi_fadd+0x302>
 8000666:	000c      	movs	r4, r1
 8000668:	1af3      	subs	r3, r6, r3
 800066a:	e03d      	b.n	80006e8 <__aeabi_fadd+0x194>
 800066c:	2e00      	cmp	r6, #0
 800066e:	d01b      	beq.n	80006a8 <__aeabi_fadd+0x154>
 8000670:	1e51      	subs	r1, r2, #1
 8000672:	2a01      	cmp	r2, #1
 8000674:	d100      	bne.n	8000678 <__aeabi_fadd+0x124>
 8000676:	e082      	b.n	800077e <__aeabi_fadd+0x22a>
 8000678:	2aff      	cmp	r2, #255	@ 0xff
 800067a:	d03a      	beq.n	80006f2 <__aeabi_fadd+0x19e>
 800067c:	000a      	movs	r2, r1
 800067e:	e7ab      	b.n	80005d8 <__aeabi_fadd+0x84>
 8000680:	0031      	movs	r1, r6
 8000682:	2020      	movs	r0, #32
 8000684:	40d1      	lsrs	r1, r2
 8000686:	1a82      	subs	r2, r0, r2
 8000688:	4096      	lsls	r6, r2
 800068a:	0032      	movs	r2, r6
 800068c:	1e50      	subs	r0, r2, #1
 800068e:	4182      	sbcs	r2, r0
 8000690:	430a      	orrs	r2, r1
 8000692:	189b      	adds	r3, r3, r2
 8000694:	015a      	lsls	r2, r3, #5
 8000696:	d5b9      	bpl.n	800060c <__aeabi_fadd+0xb8>
 8000698:	1c6a      	adds	r2, r5, #1
 800069a:	2dfe      	cmp	r5, #254	@ 0xfe
 800069c:	d175      	bne.n	800078a <__aeabi_fadd+0x236>
 800069e:	20ff      	movs	r0, #255	@ 0xff
 80006a0:	2300      	movs	r3, #0
 80006a2:	e7c4      	b.n	800062e <__aeabi_fadd+0xda>
 80006a4:	000c      	movs	r4, r1
 80006a6:	0033      	movs	r3, r6
 80006a8:	08db      	lsrs	r3, r3, #3
 80006aa:	2aff      	cmp	r2, #255	@ 0xff
 80006ac:	d146      	bne.n	800073c <__aeabi_fadd+0x1e8>
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d0f5      	beq.n	800069e <__aeabi_fadd+0x14a>
 80006b2:	2280      	movs	r2, #128	@ 0x80
 80006b4:	03d2      	lsls	r2, r2, #15
 80006b6:	4313      	orrs	r3, r2
 80006b8:	025b      	lsls	r3, r3, #9
 80006ba:	20ff      	movs	r0, #255	@ 0xff
 80006bc:	0a5b      	lsrs	r3, r3, #9
 80006be:	e7b6      	b.n	800062e <__aeabi_fadd+0xda>
 80006c0:	019f      	lsls	r7, r3, #6
 80006c2:	09bf      	lsrs	r7, r7, #6
 80006c4:	0038      	movs	r0, r7
 80006c6:	f002 fd5d 	bl	8003184 <__clzsi2>
 80006ca:	3805      	subs	r0, #5
 80006cc:	4087      	lsls	r7, r0
 80006ce:	4285      	cmp	r5, r0
 80006d0:	dc24      	bgt.n	800071c <__aeabi_fadd+0x1c8>
 80006d2:	003b      	movs	r3, r7
 80006d4:	2120      	movs	r1, #32
 80006d6:	1b42      	subs	r2, r0, r5
 80006d8:	3201      	adds	r2, #1
 80006da:	40d3      	lsrs	r3, r2
 80006dc:	1a8a      	subs	r2, r1, r2
 80006de:	4097      	lsls	r7, r2
 80006e0:	1e7a      	subs	r2, r7, #1
 80006e2:	4197      	sbcs	r7, r2
 80006e4:	2200      	movs	r2, #0
 80006e6:	433b      	orrs	r3, r7
 80006e8:	0759      	lsls	r1, r3, #29
 80006ea:	d193      	bne.n	8000614 <__aeabi_fadd+0xc0>
 80006ec:	e797      	b.n	800061e <__aeabi_fadd+0xca>
 80006ee:	000c      	movs	r4, r1
 80006f0:	0033      	movs	r3, r6
 80006f2:	08db      	lsrs	r3, r3, #3
 80006f4:	e7db      	b.n	80006ae <__aeabi_fadd+0x15a>
 80006f6:	2a00      	cmp	r2, #0
 80006f8:	d014      	beq.n	8000724 <__aeabi_fadd+0x1d0>
 80006fa:	1b42      	subs	r2, r0, r5
 80006fc:	2d00      	cmp	r5, #0
 80006fe:	d14b      	bne.n	8000798 <__aeabi_fadd+0x244>
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0d0      	beq.n	80006a6 <__aeabi_fadd+0x152>
 8000704:	1e51      	subs	r1, r2, #1
 8000706:	2a01      	cmp	r2, #1
 8000708:	d100      	bne.n	800070c <__aeabi_fadd+0x1b8>
 800070a:	e09e      	b.n	800084a <__aeabi_fadd+0x2f6>
 800070c:	2aff      	cmp	r2, #255	@ 0xff
 800070e:	d0ef      	beq.n	80006f0 <__aeabi_fadd+0x19c>
 8000710:	000a      	movs	r2, r1
 8000712:	2a1b      	cmp	r2, #27
 8000714:	dd5f      	ble.n	80007d6 <__aeabi_fadd+0x282>
 8000716:	0002      	movs	r2, r0
 8000718:	1c73      	adds	r3, r6, #1
 800071a:	e77b      	b.n	8000614 <__aeabi_fadd+0xc0>
 800071c:	4b50      	ldr	r3, [pc, #320]	@ (8000860 <__aeabi_fadd+0x30c>)
 800071e:	1a2a      	subs	r2, r5, r0
 8000720:	403b      	ands	r3, r7
 8000722:	e7e1      	b.n	80006e8 <__aeabi_fadd+0x194>
 8000724:	21fe      	movs	r1, #254	@ 0xfe
 8000726:	1c6a      	adds	r2, r5, #1
 8000728:	4211      	tst	r1, r2
 800072a:	d13b      	bne.n	80007a4 <__aeabi_fadd+0x250>
 800072c:	2d00      	cmp	r5, #0
 800072e:	d15d      	bne.n	80007ec <__aeabi_fadd+0x298>
 8000730:	2b00      	cmp	r3, #0
 8000732:	d07f      	beq.n	8000834 <__aeabi_fadd+0x2e0>
 8000734:	2e00      	cmp	r6, #0
 8000736:	d17f      	bne.n	8000838 <__aeabi_fadd+0x2e4>
 8000738:	2200      	movs	r2, #0
 800073a:	08db      	lsrs	r3, r3, #3
 800073c:	025b      	lsls	r3, r3, #9
 800073e:	0a5b      	lsrs	r3, r3, #9
 8000740:	b2d0      	uxtb	r0, r2
 8000742:	e774      	b.n	800062e <__aeabi_fadd+0xda>
 8000744:	28ff      	cmp	r0, #255	@ 0xff
 8000746:	d0d2      	beq.n	80006ee <__aeabi_fadd+0x19a>
 8000748:	2480      	movs	r4, #128	@ 0x80
 800074a:	04e4      	lsls	r4, r4, #19
 800074c:	4323      	orrs	r3, r4
 800074e:	2401      	movs	r4, #1
 8000750:	2a1b      	cmp	r2, #27
 8000752:	dc07      	bgt.n	8000764 <__aeabi_fadd+0x210>
 8000754:	001c      	movs	r4, r3
 8000756:	2520      	movs	r5, #32
 8000758:	40d4      	lsrs	r4, r2
 800075a:	1aaa      	subs	r2, r5, r2
 800075c:	4093      	lsls	r3, r2
 800075e:	1e5a      	subs	r2, r3, #1
 8000760:	4193      	sbcs	r3, r2
 8000762:	431c      	orrs	r4, r3
 8000764:	1b33      	subs	r3, r6, r4
 8000766:	0005      	movs	r5, r0
 8000768:	000c      	movs	r4, r1
 800076a:	e74d      	b.n	8000608 <__aeabi_fadd+0xb4>
 800076c:	1b9f      	subs	r7, r3, r6
 800076e:	017a      	lsls	r2, r7, #5
 8000770:	d422      	bmi.n	80007b8 <__aeabi_fadd+0x264>
 8000772:	2f00      	cmp	r7, #0
 8000774:	d1a6      	bne.n	80006c4 <__aeabi_fadd+0x170>
 8000776:	2400      	movs	r4, #0
 8000778:	2000      	movs	r0, #0
 800077a:	2300      	movs	r3, #0
 800077c:	e757      	b.n	800062e <__aeabi_fadd+0xda>
 800077e:	199b      	adds	r3, r3, r6
 8000780:	2501      	movs	r5, #1
 8000782:	3201      	adds	r2, #1
 8000784:	0159      	lsls	r1, r3, #5
 8000786:	d400      	bmi.n	800078a <__aeabi_fadd+0x236>
 8000788:	e740      	b.n	800060c <__aeabi_fadd+0xb8>
 800078a:	2101      	movs	r1, #1
 800078c:	4835      	ldr	r0, [pc, #212]	@ (8000864 <__aeabi_fadd+0x310>)
 800078e:	4019      	ands	r1, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	4003      	ands	r3, r0
 8000794:	430b      	orrs	r3, r1
 8000796:	e7a7      	b.n	80006e8 <__aeabi_fadd+0x194>
 8000798:	28ff      	cmp	r0, #255	@ 0xff
 800079a:	d0a9      	beq.n	80006f0 <__aeabi_fadd+0x19c>
 800079c:	2180      	movs	r1, #128	@ 0x80
 800079e:	04c9      	lsls	r1, r1, #19
 80007a0:	430b      	orrs	r3, r1
 80007a2:	e7b6      	b.n	8000712 <__aeabi_fadd+0x1be>
 80007a4:	2aff      	cmp	r2, #255	@ 0xff
 80007a6:	d100      	bne.n	80007aa <__aeabi_fadd+0x256>
 80007a8:	e779      	b.n	800069e <__aeabi_fadd+0x14a>
 80007aa:	199b      	adds	r3, r3, r6
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	0759      	lsls	r1, r3, #29
 80007b0:	d000      	beq.n	80007b4 <__aeabi_fadd+0x260>
 80007b2:	e72f      	b.n	8000614 <__aeabi_fadd+0xc0>
 80007b4:	08db      	lsrs	r3, r3, #3
 80007b6:	e7c1      	b.n	800073c <__aeabi_fadd+0x1e8>
 80007b8:	000c      	movs	r4, r1
 80007ba:	1af7      	subs	r7, r6, r3
 80007bc:	e782      	b.n	80006c4 <__aeabi_fadd+0x170>
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d12c      	bne.n	800081c <__aeabi_fadd+0x2c8>
 80007c2:	2e00      	cmp	r6, #0
 80007c4:	d193      	bne.n	80006ee <__aeabi_fadd+0x19a>
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	2400      	movs	r4, #0
 80007ca:	20ff      	movs	r0, #255	@ 0xff
 80007cc:	03db      	lsls	r3, r3, #15
 80007ce:	e72e      	b.n	800062e <__aeabi_fadd+0xda>
 80007d0:	2501      	movs	r5, #1
 80007d2:	1b9b      	subs	r3, r3, r6
 80007d4:	e718      	b.n	8000608 <__aeabi_fadd+0xb4>
 80007d6:	0019      	movs	r1, r3
 80007d8:	2520      	movs	r5, #32
 80007da:	40d1      	lsrs	r1, r2
 80007dc:	1aaa      	subs	r2, r5, r2
 80007de:	4093      	lsls	r3, r2
 80007e0:	1e5a      	subs	r2, r3, #1
 80007e2:	4193      	sbcs	r3, r2
 80007e4:	430b      	orrs	r3, r1
 80007e6:	0005      	movs	r5, r0
 80007e8:	199b      	adds	r3, r3, r6
 80007ea:	e753      	b.n	8000694 <__aeabi_fadd+0x140>
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fadd+0x29e>
 80007f0:	e77e      	b.n	80006f0 <__aeabi_fadd+0x19c>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d100      	bne.n	80007f8 <__aeabi_fadd+0x2a4>
 80007f6:	e77c      	b.n	80006f2 <__aeabi_fadd+0x19e>
 80007f8:	2280      	movs	r2, #128	@ 0x80
 80007fa:	03d2      	lsls	r2, r2, #15
 80007fc:	4591      	cmp	r9, r2
 80007fe:	d302      	bcc.n	8000806 <__aeabi_fadd+0x2b2>
 8000800:	4594      	cmp	ip, r2
 8000802:	d200      	bcs.n	8000806 <__aeabi_fadd+0x2b2>
 8000804:	0033      	movs	r3, r6
 8000806:	08db      	lsrs	r3, r3, #3
 8000808:	e753      	b.n	80006b2 <__aeabi_fadd+0x15e>
 800080a:	000c      	movs	r4, r1
 800080c:	1af3      	subs	r3, r6, r3
 800080e:	3501      	adds	r5, #1
 8000810:	e6fa      	b.n	8000608 <__aeabi_fadd+0xb4>
 8000812:	2e00      	cmp	r6, #0
 8000814:	d0af      	beq.n	8000776 <__aeabi_fadd+0x222>
 8000816:	000c      	movs	r4, r1
 8000818:	0033      	movs	r3, r6
 800081a:	e78d      	b.n	8000738 <__aeabi_fadd+0x1e4>
 800081c:	2e00      	cmp	r6, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x2ce>
 8000820:	e767      	b.n	80006f2 <__aeabi_fadd+0x19e>
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	03d2      	lsls	r2, r2, #15
 8000826:	4591      	cmp	r9, r2
 8000828:	d3ed      	bcc.n	8000806 <__aeabi_fadd+0x2b2>
 800082a:	4594      	cmp	ip, r2
 800082c:	d2eb      	bcs.n	8000806 <__aeabi_fadd+0x2b2>
 800082e:	000c      	movs	r4, r1
 8000830:	0033      	movs	r3, r6
 8000832:	e7e8      	b.n	8000806 <__aeabi_fadd+0x2b2>
 8000834:	0033      	movs	r3, r6
 8000836:	e77f      	b.n	8000738 <__aeabi_fadd+0x1e4>
 8000838:	199b      	adds	r3, r3, r6
 800083a:	2200      	movs	r2, #0
 800083c:	0159      	lsls	r1, r3, #5
 800083e:	d5b9      	bpl.n	80007b4 <__aeabi_fadd+0x260>
 8000840:	4a07      	ldr	r2, [pc, #28]	@ (8000860 <__aeabi_fadd+0x30c>)
 8000842:	4013      	ands	r3, r2
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	2201      	movs	r2, #1
 8000848:	e778      	b.n	800073c <__aeabi_fadd+0x1e8>
 800084a:	199b      	adds	r3, r3, r6
 800084c:	3201      	adds	r2, #1
 800084e:	3501      	adds	r5, #1
 8000850:	0159      	lsls	r1, r3, #5
 8000852:	d49a      	bmi.n	800078a <__aeabi_fadd+0x236>
 8000854:	e6da      	b.n	800060c <__aeabi_fadd+0xb8>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d08d      	beq.n	8000776 <__aeabi_fadd+0x222>
 800085a:	08db      	lsrs	r3, r3, #3
 800085c:	e76e      	b.n	800073c <__aeabi_fadd+0x1e8>
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	fbffffff 	.word	0xfbffffff
 8000864:	7dffffff 	.word	0x7dffffff

08000868 <__aeabi_fdiv>:
 8000868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800086a:	464f      	mov	r7, r9
 800086c:	4646      	mov	r6, r8
 800086e:	46d6      	mov	lr, sl
 8000870:	0244      	lsls	r4, r0, #9
 8000872:	b5c0      	push	{r6, r7, lr}
 8000874:	0047      	lsls	r7, r0, #1
 8000876:	1c0e      	adds	r6, r1, #0
 8000878:	0a64      	lsrs	r4, r4, #9
 800087a:	0e3f      	lsrs	r7, r7, #24
 800087c:	0fc5      	lsrs	r5, r0, #31
 800087e:	2f00      	cmp	r7, #0
 8000880:	d03c      	beq.n	80008fc <__aeabi_fdiv+0x94>
 8000882:	2fff      	cmp	r7, #255	@ 0xff
 8000884:	d042      	beq.n	800090c <__aeabi_fdiv+0xa4>
 8000886:	2300      	movs	r3, #0
 8000888:	2280      	movs	r2, #128	@ 0x80
 800088a:	4699      	mov	r9, r3
 800088c:	469a      	mov	sl, r3
 800088e:	00e4      	lsls	r4, r4, #3
 8000890:	04d2      	lsls	r2, r2, #19
 8000892:	4314      	orrs	r4, r2
 8000894:	3f7f      	subs	r7, #127	@ 0x7f
 8000896:	0273      	lsls	r3, r6, #9
 8000898:	0a5b      	lsrs	r3, r3, #9
 800089a:	4698      	mov	r8, r3
 800089c:	0073      	lsls	r3, r6, #1
 800089e:	0e1b      	lsrs	r3, r3, #24
 80008a0:	0ff6      	lsrs	r6, r6, #31
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d01b      	beq.n	80008de <__aeabi_fdiv+0x76>
 80008a6:	2bff      	cmp	r3, #255	@ 0xff
 80008a8:	d013      	beq.n	80008d2 <__aeabi_fdiv+0x6a>
 80008aa:	4642      	mov	r2, r8
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	00d2      	lsls	r2, r2, #3
 80008b0:	04c9      	lsls	r1, r1, #19
 80008b2:	4311      	orrs	r1, r2
 80008b4:	4688      	mov	r8, r1
 80008b6:	2000      	movs	r0, #0
 80008b8:	3b7f      	subs	r3, #127	@ 0x7f
 80008ba:	0029      	movs	r1, r5
 80008bc:	1aff      	subs	r7, r7, r3
 80008be:	464b      	mov	r3, r9
 80008c0:	4071      	eors	r1, r6
 80008c2:	b2c9      	uxtb	r1, r1
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d900      	bls.n	80008ca <__aeabi_fdiv+0x62>
 80008c8:	e0b5      	b.n	8000a36 <__aeabi_fdiv+0x1ce>
 80008ca:	4a74      	ldr	r2, [pc, #464]	@ (8000a9c <__aeabi_fdiv+0x234>)
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	58d3      	ldr	r3, [r2, r3]
 80008d0:	469f      	mov	pc, r3
 80008d2:	4643      	mov	r3, r8
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d13f      	bne.n	8000958 <__aeabi_fdiv+0xf0>
 80008d8:	3fff      	subs	r7, #255	@ 0xff
 80008da:	3302      	adds	r3, #2
 80008dc:	e003      	b.n	80008e6 <__aeabi_fdiv+0x7e>
 80008de:	4643      	mov	r3, r8
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d12d      	bne.n	8000940 <__aeabi_fdiv+0xd8>
 80008e4:	2301      	movs	r3, #1
 80008e6:	0029      	movs	r1, r5
 80008e8:	464a      	mov	r2, r9
 80008ea:	4071      	eors	r1, r6
 80008ec:	b2c9      	uxtb	r1, r1
 80008ee:	431a      	orrs	r2, r3
 80008f0:	2a0e      	cmp	r2, #14
 80008f2:	d838      	bhi.n	8000966 <__aeabi_fdiv+0xfe>
 80008f4:	486a      	ldr	r0, [pc, #424]	@ (8000aa0 <__aeabi_fdiv+0x238>)
 80008f6:	0092      	lsls	r2, r2, #2
 80008f8:	5882      	ldr	r2, [r0, r2]
 80008fa:	4697      	mov	pc, r2
 80008fc:	2c00      	cmp	r4, #0
 80008fe:	d113      	bne.n	8000928 <__aeabi_fdiv+0xc0>
 8000900:	2304      	movs	r3, #4
 8000902:	4699      	mov	r9, r3
 8000904:	3b03      	subs	r3, #3
 8000906:	2700      	movs	r7, #0
 8000908:	469a      	mov	sl, r3
 800090a:	e7c4      	b.n	8000896 <__aeabi_fdiv+0x2e>
 800090c:	2c00      	cmp	r4, #0
 800090e:	d105      	bne.n	800091c <__aeabi_fdiv+0xb4>
 8000910:	2308      	movs	r3, #8
 8000912:	4699      	mov	r9, r3
 8000914:	3b06      	subs	r3, #6
 8000916:	27ff      	movs	r7, #255	@ 0xff
 8000918:	469a      	mov	sl, r3
 800091a:	e7bc      	b.n	8000896 <__aeabi_fdiv+0x2e>
 800091c:	230c      	movs	r3, #12
 800091e:	4699      	mov	r9, r3
 8000920:	3b09      	subs	r3, #9
 8000922:	27ff      	movs	r7, #255	@ 0xff
 8000924:	469a      	mov	sl, r3
 8000926:	e7b6      	b.n	8000896 <__aeabi_fdiv+0x2e>
 8000928:	0020      	movs	r0, r4
 800092a:	f002 fc2b 	bl	8003184 <__clzsi2>
 800092e:	2776      	movs	r7, #118	@ 0x76
 8000930:	1f43      	subs	r3, r0, #5
 8000932:	409c      	lsls	r4, r3
 8000934:	2300      	movs	r3, #0
 8000936:	427f      	negs	r7, r7
 8000938:	4699      	mov	r9, r3
 800093a:	469a      	mov	sl, r3
 800093c:	1a3f      	subs	r7, r7, r0
 800093e:	e7aa      	b.n	8000896 <__aeabi_fdiv+0x2e>
 8000940:	4640      	mov	r0, r8
 8000942:	f002 fc1f 	bl	8003184 <__clzsi2>
 8000946:	4642      	mov	r2, r8
 8000948:	1f43      	subs	r3, r0, #5
 800094a:	409a      	lsls	r2, r3
 800094c:	2376      	movs	r3, #118	@ 0x76
 800094e:	425b      	negs	r3, r3
 8000950:	1a1b      	subs	r3, r3, r0
 8000952:	4690      	mov	r8, r2
 8000954:	2000      	movs	r0, #0
 8000956:	e7b0      	b.n	80008ba <__aeabi_fdiv+0x52>
 8000958:	2303      	movs	r3, #3
 800095a:	464a      	mov	r2, r9
 800095c:	431a      	orrs	r2, r3
 800095e:	4691      	mov	r9, r2
 8000960:	2003      	movs	r0, #3
 8000962:	33fc      	adds	r3, #252	@ 0xfc
 8000964:	e7a9      	b.n	80008ba <__aeabi_fdiv+0x52>
 8000966:	000d      	movs	r5, r1
 8000968:	20ff      	movs	r0, #255	@ 0xff
 800096a:	2200      	movs	r2, #0
 800096c:	05c0      	lsls	r0, r0, #23
 800096e:	07ed      	lsls	r5, r5, #31
 8000970:	4310      	orrs	r0, r2
 8000972:	4328      	orrs	r0, r5
 8000974:	bce0      	pop	{r5, r6, r7}
 8000976:	46ba      	mov	sl, r7
 8000978:	46b1      	mov	r9, r6
 800097a:	46a8      	mov	r8, r5
 800097c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097e:	000d      	movs	r5, r1
 8000980:	2000      	movs	r0, #0
 8000982:	2200      	movs	r2, #0
 8000984:	e7f2      	b.n	800096c <__aeabi_fdiv+0x104>
 8000986:	4653      	mov	r3, sl
 8000988:	2b02      	cmp	r3, #2
 800098a:	d0ed      	beq.n	8000968 <__aeabi_fdiv+0x100>
 800098c:	2b03      	cmp	r3, #3
 800098e:	d033      	beq.n	80009f8 <__aeabi_fdiv+0x190>
 8000990:	46a0      	mov	r8, r4
 8000992:	2b01      	cmp	r3, #1
 8000994:	d105      	bne.n	80009a2 <__aeabi_fdiv+0x13a>
 8000996:	2000      	movs	r0, #0
 8000998:	2200      	movs	r2, #0
 800099a:	e7e7      	b.n	800096c <__aeabi_fdiv+0x104>
 800099c:	0035      	movs	r5, r6
 800099e:	2803      	cmp	r0, #3
 80009a0:	d07a      	beq.n	8000a98 <__aeabi_fdiv+0x230>
 80009a2:	003b      	movs	r3, r7
 80009a4:	337f      	adds	r3, #127	@ 0x7f
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	dd2d      	ble.n	8000a06 <__aeabi_fdiv+0x19e>
 80009aa:	4642      	mov	r2, r8
 80009ac:	0752      	lsls	r2, r2, #29
 80009ae:	d007      	beq.n	80009c0 <__aeabi_fdiv+0x158>
 80009b0:	220f      	movs	r2, #15
 80009b2:	4641      	mov	r1, r8
 80009b4:	400a      	ands	r2, r1
 80009b6:	2a04      	cmp	r2, #4
 80009b8:	d002      	beq.n	80009c0 <__aeabi_fdiv+0x158>
 80009ba:	2204      	movs	r2, #4
 80009bc:	4694      	mov	ip, r2
 80009be:	44e0      	add	r8, ip
 80009c0:	4642      	mov	r2, r8
 80009c2:	0112      	lsls	r2, r2, #4
 80009c4:	d505      	bpl.n	80009d2 <__aeabi_fdiv+0x16a>
 80009c6:	4642      	mov	r2, r8
 80009c8:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <__aeabi_fdiv+0x23c>)
 80009ca:	401a      	ands	r2, r3
 80009cc:	003b      	movs	r3, r7
 80009ce:	4690      	mov	r8, r2
 80009d0:	3380      	adds	r3, #128	@ 0x80
 80009d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80009d4:	dcc8      	bgt.n	8000968 <__aeabi_fdiv+0x100>
 80009d6:	4642      	mov	r2, r8
 80009d8:	0192      	lsls	r2, r2, #6
 80009da:	0a52      	lsrs	r2, r2, #9
 80009dc:	b2d8      	uxtb	r0, r3
 80009de:	e7c5      	b.n	800096c <__aeabi_fdiv+0x104>
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	2500      	movs	r5, #0
 80009e4:	20ff      	movs	r0, #255	@ 0xff
 80009e6:	03d2      	lsls	r2, r2, #15
 80009e8:	e7c0      	b.n	800096c <__aeabi_fdiv+0x104>
 80009ea:	2280      	movs	r2, #128	@ 0x80
 80009ec:	03d2      	lsls	r2, r2, #15
 80009ee:	4214      	tst	r4, r2
 80009f0:	d002      	beq.n	80009f8 <__aeabi_fdiv+0x190>
 80009f2:	4643      	mov	r3, r8
 80009f4:	4213      	tst	r3, r2
 80009f6:	d049      	beq.n	8000a8c <__aeabi_fdiv+0x224>
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	03d2      	lsls	r2, r2, #15
 80009fc:	4322      	orrs	r2, r4
 80009fe:	0252      	lsls	r2, r2, #9
 8000a00:	20ff      	movs	r0, #255	@ 0xff
 8000a02:	0a52      	lsrs	r2, r2, #9
 8000a04:	e7b2      	b.n	800096c <__aeabi_fdiv+0x104>
 8000a06:	2201      	movs	r2, #1
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	2b1b      	cmp	r3, #27
 8000a0c:	dcc3      	bgt.n	8000996 <__aeabi_fdiv+0x12e>
 8000a0e:	4642      	mov	r2, r8
 8000a10:	40da      	lsrs	r2, r3
 8000a12:	4643      	mov	r3, r8
 8000a14:	379e      	adds	r7, #158	@ 0x9e
 8000a16:	40bb      	lsls	r3, r7
 8000a18:	1e59      	subs	r1, r3, #1
 8000a1a:	418b      	sbcs	r3, r1
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	0753      	lsls	r3, r2, #29
 8000a20:	d004      	beq.n	8000a2c <__aeabi_fdiv+0x1c4>
 8000a22:	230f      	movs	r3, #15
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b04      	cmp	r3, #4
 8000a28:	d000      	beq.n	8000a2c <__aeabi_fdiv+0x1c4>
 8000a2a:	3204      	adds	r2, #4
 8000a2c:	0153      	lsls	r3, r2, #5
 8000a2e:	d529      	bpl.n	8000a84 <__aeabi_fdiv+0x21c>
 8000a30:	2001      	movs	r0, #1
 8000a32:	2200      	movs	r2, #0
 8000a34:	e79a      	b.n	800096c <__aeabi_fdiv+0x104>
 8000a36:	4642      	mov	r2, r8
 8000a38:	0163      	lsls	r3, r4, #5
 8000a3a:	0155      	lsls	r5, r2, #5
 8000a3c:	42ab      	cmp	r3, r5
 8000a3e:	d215      	bcs.n	8000a6c <__aeabi_fdiv+0x204>
 8000a40:	201b      	movs	r0, #27
 8000a42:	2200      	movs	r2, #0
 8000a44:	3f01      	subs	r7, #1
 8000a46:	2601      	movs	r6, #1
 8000a48:	001c      	movs	r4, r3
 8000a4a:	0052      	lsls	r2, r2, #1
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	2c00      	cmp	r4, #0
 8000a50:	db01      	blt.n	8000a56 <__aeabi_fdiv+0x1ee>
 8000a52:	429d      	cmp	r5, r3
 8000a54:	d801      	bhi.n	8000a5a <__aeabi_fdiv+0x1f2>
 8000a56:	1b5b      	subs	r3, r3, r5
 8000a58:	4332      	orrs	r2, r6
 8000a5a:	3801      	subs	r0, #1
 8000a5c:	2800      	cmp	r0, #0
 8000a5e:	d1f3      	bne.n	8000a48 <__aeabi_fdiv+0x1e0>
 8000a60:	1e58      	subs	r0, r3, #1
 8000a62:	4183      	sbcs	r3, r0
 8000a64:	4313      	orrs	r3, r2
 8000a66:	4698      	mov	r8, r3
 8000a68:	000d      	movs	r5, r1
 8000a6a:	e79a      	b.n	80009a2 <__aeabi_fdiv+0x13a>
 8000a6c:	201a      	movs	r0, #26
 8000a6e:	2201      	movs	r2, #1
 8000a70:	1b5b      	subs	r3, r3, r5
 8000a72:	e7e8      	b.n	8000a46 <__aeabi_fdiv+0x1de>
 8000a74:	3b02      	subs	r3, #2
 8000a76:	425a      	negs	r2, r3
 8000a78:	4153      	adcs	r3, r2
 8000a7a:	425b      	negs	r3, r3
 8000a7c:	0035      	movs	r5, r6
 8000a7e:	2200      	movs	r2, #0
 8000a80:	b2d8      	uxtb	r0, r3
 8000a82:	e773      	b.n	800096c <__aeabi_fdiv+0x104>
 8000a84:	0192      	lsls	r2, r2, #6
 8000a86:	2000      	movs	r0, #0
 8000a88:	0a52      	lsrs	r2, r2, #9
 8000a8a:	e76f      	b.n	800096c <__aeabi_fdiv+0x104>
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	0252      	lsls	r2, r2, #9
 8000a90:	0035      	movs	r5, r6
 8000a92:	20ff      	movs	r0, #255	@ 0xff
 8000a94:	0a52      	lsrs	r2, r2, #9
 8000a96:	e769      	b.n	800096c <__aeabi_fdiv+0x104>
 8000a98:	4644      	mov	r4, r8
 8000a9a:	e7ad      	b.n	80009f8 <__aeabi_fdiv+0x190>
 8000a9c:	0800a1d8 	.word	0x0800a1d8
 8000aa0:	0800a218 	.word	0x0800a218
 8000aa4:	f7ffffff 	.word	0xf7ffffff

08000aa8 <__eqsf2>:
 8000aa8:	b570      	push	{r4, r5, r6, lr}
 8000aaa:	0042      	lsls	r2, r0, #1
 8000aac:	024e      	lsls	r6, r1, #9
 8000aae:	004c      	lsls	r4, r1, #1
 8000ab0:	0245      	lsls	r5, r0, #9
 8000ab2:	0a6d      	lsrs	r5, r5, #9
 8000ab4:	0e12      	lsrs	r2, r2, #24
 8000ab6:	0fc3      	lsrs	r3, r0, #31
 8000ab8:	0a76      	lsrs	r6, r6, #9
 8000aba:	0e24      	lsrs	r4, r4, #24
 8000abc:	0fc9      	lsrs	r1, r1, #31
 8000abe:	2aff      	cmp	r2, #255	@ 0xff
 8000ac0:	d010      	beq.n	8000ae4 <__eqsf2+0x3c>
 8000ac2:	2cff      	cmp	r4, #255	@ 0xff
 8000ac4:	d00c      	beq.n	8000ae0 <__eqsf2+0x38>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	42a2      	cmp	r2, r4
 8000aca:	d10a      	bne.n	8000ae2 <__eqsf2+0x3a>
 8000acc:	42b5      	cmp	r5, r6
 8000ace:	d108      	bne.n	8000ae2 <__eqsf2+0x3a>
 8000ad0:	428b      	cmp	r3, r1
 8000ad2:	d00f      	beq.n	8000af4 <__eqsf2+0x4c>
 8000ad4:	2a00      	cmp	r2, #0
 8000ad6:	d104      	bne.n	8000ae2 <__eqsf2+0x3a>
 8000ad8:	0028      	movs	r0, r5
 8000ada:	1e43      	subs	r3, r0, #1
 8000adc:	4198      	sbcs	r0, r3
 8000ade:	e000      	b.n	8000ae2 <__eqsf2+0x3a>
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	bd70      	pop	{r4, r5, r6, pc}
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	2cff      	cmp	r4, #255	@ 0xff
 8000ae8:	d1fb      	bne.n	8000ae2 <__eqsf2+0x3a>
 8000aea:	4335      	orrs	r5, r6
 8000aec:	d1f9      	bne.n	8000ae2 <__eqsf2+0x3a>
 8000aee:	404b      	eors	r3, r1
 8000af0:	0018      	movs	r0, r3
 8000af2:	e7f6      	b.n	8000ae2 <__eqsf2+0x3a>
 8000af4:	2000      	movs	r0, #0
 8000af6:	e7f4      	b.n	8000ae2 <__eqsf2+0x3a>

08000af8 <__gesf2>:
 8000af8:	b530      	push	{r4, r5, lr}
 8000afa:	0042      	lsls	r2, r0, #1
 8000afc:	0244      	lsls	r4, r0, #9
 8000afe:	024d      	lsls	r5, r1, #9
 8000b00:	0fc3      	lsrs	r3, r0, #31
 8000b02:	0048      	lsls	r0, r1, #1
 8000b04:	0a64      	lsrs	r4, r4, #9
 8000b06:	0e12      	lsrs	r2, r2, #24
 8000b08:	0a6d      	lsrs	r5, r5, #9
 8000b0a:	0e00      	lsrs	r0, r0, #24
 8000b0c:	0fc9      	lsrs	r1, r1, #31
 8000b0e:	2aff      	cmp	r2, #255	@ 0xff
 8000b10:	d019      	beq.n	8000b46 <__gesf2+0x4e>
 8000b12:	28ff      	cmp	r0, #255	@ 0xff
 8000b14:	d00b      	beq.n	8000b2e <__gesf2+0x36>
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d11e      	bne.n	8000b58 <__gesf2+0x60>
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d10b      	bne.n	8000b36 <__gesf2+0x3e>
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d027      	beq.n	8000b72 <__gesf2+0x7a>
 8000b22:	2c00      	cmp	r4, #0
 8000b24:	d134      	bne.n	8000b90 <__gesf2+0x98>
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d02f      	beq.n	8000b8a <__gesf2+0x92>
 8000b2a:	0008      	movs	r0, r1
 8000b2c:	bd30      	pop	{r4, r5, pc}
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d128      	bne.n	8000b84 <__gesf2+0x8c>
 8000b32:	2a00      	cmp	r2, #0
 8000b34:	d101      	bne.n	8000b3a <__gesf2+0x42>
 8000b36:	2c00      	cmp	r4, #0
 8000b38:	d0f5      	beq.n	8000b26 <__gesf2+0x2e>
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d107      	bne.n	8000b4e <__gesf2+0x56>
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d023      	beq.n	8000b8a <__gesf2+0x92>
 8000b42:	0018      	movs	r0, r3
 8000b44:	e7f2      	b.n	8000b2c <__gesf2+0x34>
 8000b46:	2c00      	cmp	r4, #0
 8000b48:	d11c      	bne.n	8000b84 <__gesf2+0x8c>
 8000b4a:	28ff      	cmp	r0, #255	@ 0xff
 8000b4c:	d014      	beq.n	8000b78 <__gesf2+0x80>
 8000b4e:	1e58      	subs	r0, r3, #1
 8000b50:	2302      	movs	r3, #2
 8000b52:	4018      	ands	r0, r3
 8000b54:	3801      	subs	r0, #1
 8000b56:	e7e9      	b.n	8000b2c <__gesf2+0x34>
 8000b58:	2800      	cmp	r0, #0
 8000b5a:	d0f8      	beq.n	8000b4e <__gesf2+0x56>
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d1f6      	bne.n	8000b4e <__gesf2+0x56>
 8000b60:	4282      	cmp	r2, r0
 8000b62:	dcf4      	bgt.n	8000b4e <__gesf2+0x56>
 8000b64:	dbeb      	blt.n	8000b3e <__gesf2+0x46>
 8000b66:	42ac      	cmp	r4, r5
 8000b68:	d8f1      	bhi.n	8000b4e <__gesf2+0x56>
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	42ac      	cmp	r4, r5
 8000b6e:	d2dd      	bcs.n	8000b2c <__gesf2+0x34>
 8000b70:	e7e5      	b.n	8000b3e <__gesf2+0x46>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d0da      	beq.n	8000b2c <__gesf2+0x34>
 8000b76:	e7ea      	b.n	8000b4e <__gesf2+0x56>
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d103      	bne.n	8000b84 <__gesf2+0x8c>
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d1e6      	bne.n	8000b4e <__gesf2+0x56>
 8000b80:	2000      	movs	r0, #0
 8000b82:	e7d3      	b.n	8000b2c <__gesf2+0x34>
 8000b84:	2002      	movs	r0, #2
 8000b86:	4240      	negs	r0, r0
 8000b88:	e7d0      	b.n	8000b2c <__gesf2+0x34>
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	4240      	negs	r0, r0
 8000b8e:	e7cd      	b.n	8000b2c <__gesf2+0x34>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d0e8      	beq.n	8000b66 <__gesf2+0x6e>
 8000b94:	e7db      	b.n	8000b4e <__gesf2+0x56>
 8000b96:	46c0      	nop			@ (mov r8, r8)

08000b98 <__lesf2>:
 8000b98:	b530      	push	{r4, r5, lr}
 8000b9a:	0042      	lsls	r2, r0, #1
 8000b9c:	0244      	lsls	r4, r0, #9
 8000b9e:	024d      	lsls	r5, r1, #9
 8000ba0:	0fc3      	lsrs	r3, r0, #31
 8000ba2:	0048      	lsls	r0, r1, #1
 8000ba4:	0a64      	lsrs	r4, r4, #9
 8000ba6:	0e12      	lsrs	r2, r2, #24
 8000ba8:	0a6d      	lsrs	r5, r5, #9
 8000baa:	0e00      	lsrs	r0, r0, #24
 8000bac:	0fc9      	lsrs	r1, r1, #31
 8000bae:	2aff      	cmp	r2, #255	@ 0xff
 8000bb0:	d01a      	beq.n	8000be8 <__lesf2+0x50>
 8000bb2:	28ff      	cmp	r0, #255	@ 0xff
 8000bb4:	d00e      	beq.n	8000bd4 <__lesf2+0x3c>
 8000bb6:	2a00      	cmp	r2, #0
 8000bb8:	d11e      	bne.n	8000bf8 <__lesf2+0x60>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d10e      	bne.n	8000bdc <__lesf2+0x44>
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d02a      	beq.n	8000c18 <__lesf2+0x80>
 8000bc2:	2c00      	cmp	r4, #0
 8000bc4:	d00c      	beq.n	8000be0 <__lesf2+0x48>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d01d      	beq.n	8000c06 <__lesf2+0x6e>
 8000bca:	1e58      	subs	r0, r3, #1
 8000bcc:	2302      	movs	r3, #2
 8000bce:	4018      	ands	r0, r3
 8000bd0:	3801      	subs	r0, #1
 8000bd2:	e010      	b.n	8000bf6 <__lesf2+0x5e>
 8000bd4:	2d00      	cmp	r5, #0
 8000bd6:	d10d      	bne.n	8000bf4 <__lesf2+0x5c>
 8000bd8:	2a00      	cmp	r2, #0
 8000bda:	d120      	bne.n	8000c1e <__lesf2+0x86>
 8000bdc:	2c00      	cmp	r4, #0
 8000bde:	d11e      	bne.n	8000c1e <__lesf2+0x86>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	d023      	beq.n	8000c2c <__lesf2+0x94>
 8000be4:	0008      	movs	r0, r1
 8000be6:	e006      	b.n	8000bf6 <__lesf2+0x5e>
 8000be8:	2c00      	cmp	r4, #0
 8000bea:	d103      	bne.n	8000bf4 <__lesf2+0x5c>
 8000bec:	28ff      	cmp	r0, #255	@ 0xff
 8000bee:	d1ec      	bne.n	8000bca <__lesf2+0x32>
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d017      	beq.n	8000c24 <__lesf2+0x8c>
 8000bf4:	2002      	movs	r0, #2
 8000bf6:	bd30      	pop	{r4, r5, pc}
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d0e6      	beq.n	8000bca <__lesf2+0x32>
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	d1e4      	bne.n	8000bca <__lesf2+0x32>
 8000c00:	4282      	cmp	r2, r0
 8000c02:	dce2      	bgt.n	8000bca <__lesf2+0x32>
 8000c04:	db04      	blt.n	8000c10 <__lesf2+0x78>
 8000c06:	42ac      	cmp	r4, r5
 8000c08:	d8df      	bhi.n	8000bca <__lesf2+0x32>
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	42ac      	cmp	r4, r5
 8000c0e:	d2f2      	bcs.n	8000bf6 <__lesf2+0x5e>
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d00b      	beq.n	8000c2c <__lesf2+0x94>
 8000c14:	0018      	movs	r0, r3
 8000c16:	e7ee      	b.n	8000bf6 <__lesf2+0x5e>
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d0ec      	beq.n	8000bf6 <__lesf2+0x5e>
 8000c1c:	e7d5      	b.n	8000bca <__lesf2+0x32>
 8000c1e:	428b      	cmp	r3, r1
 8000c20:	d1d3      	bne.n	8000bca <__lesf2+0x32>
 8000c22:	e7f5      	b.n	8000c10 <__lesf2+0x78>
 8000c24:	2000      	movs	r0, #0
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d0e5      	beq.n	8000bf6 <__lesf2+0x5e>
 8000c2a:	e7ce      	b.n	8000bca <__lesf2+0x32>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	4240      	negs	r0, r0
 8000c30:	e7e1      	b.n	8000bf6 <__lesf2+0x5e>
 8000c32:	46c0      	nop			@ (mov r8, r8)

08000c34 <__aeabi_fmul>:
 8000c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c36:	464f      	mov	r7, r9
 8000c38:	4646      	mov	r6, r8
 8000c3a:	46d6      	mov	lr, sl
 8000c3c:	0243      	lsls	r3, r0, #9
 8000c3e:	0a5b      	lsrs	r3, r3, #9
 8000c40:	0045      	lsls	r5, r0, #1
 8000c42:	b5c0      	push	{r6, r7, lr}
 8000c44:	4699      	mov	r9, r3
 8000c46:	1c0f      	adds	r7, r1, #0
 8000c48:	0e2d      	lsrs	r5, r5, #24
 8000c4a:	0fc6      	lsrs	r6, r0, #31
 8000c4c:	2d00      	cmp	r5, #0
 8000c4e:	d100      	bne.n	8000c52 <__aeabi_fmul+0x1e>
 8000c50:	e088      	b.n	8000d64 <__aeabi_fmul+0x130>
 8000c52:	2dff      	cmp	r5, #255	@ 0xff
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fmul+0x24>
 8000c56:	e08d      	b.n	8000d74 <__aeabi_fmul+0x140>
 8000c58:	2280      	movs	r2, #128	@ 0x80
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	04d2      	lsls	r2, r2, #19
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	2300      	movs	r3, #0
 8000c62:	4691      	mov	r9, r2
 8000c64:	4698      	mov	r8, r3
 8000c66:	469a      	mov	sl, r3
 8000c68:	3d7f      	subs	r5, #127	@ 0x7f
 8000c6a:	027c      	lsls	r4, r7, #9
 8000c6c:	007b      	lsls	r3, r7, #1
 8000c6e:	0a64      	lsrs	r4, r4, #9
 8000c70:	0e1b      	lsrs	r3, r3, #24
 8000c72:	0fff      	lsrs	r7, r7, #31
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d068      	beq.n	8000d4a <__aeabi_fmul+0x116>
 8000c78:	2bff      	cmp	r3, #255	@ 0xff
 8000c7a:	d021      	beq.n	8000cc0 <__aeabi_fmul+0x8c>
 8000c7c:	2280      	movs	r2, #128	@ 0x80
 8000c7e:	00e4      	lsls	r4, r4, #3
 8000c80:	04d2      	lsls	r2, r2, #19
 8000c82:	4314      	orrs	r4, r2
 8000c84:	4642      	mov	r2, r8
 8000c86:	3b7f      	subs	r3, #127	@ 0x7f
 8000c88:	195b      	adds	r3, r3, r5
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	1c5d      	adds	r5, r3, #1
 8000c8e:	2a0a      	cmp	r2, #10
 8000c90:	dc2e      	bgt.n	8000cf0 <__aeabi_fmul+0xbc>
 8000c92:	407e      	eors	r6, r7
 8000c94:	4642      	mov	r2, r8
 8000c96:	2a02      	cmp	r2, #2
 8000c98:	dc23      	bgt.n	8000ce2 <__aeabi_fmul+0xae>
 8000c9a:	3a01      	subs	r2, #1
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	d900      	bls.n	8000ca2 <__aeabi_fmul+0x6e>
 8000ca0:	e0bd      	b.n	8000e1e <__aeabi_fmul+0x1ea>
 8000ca2:	2902      	cmp	r1, #2
 8000ca4:	d06e      	beq.n	8000d84 <__aeabi_fmul+0x150>
 8000ca6:	2901      	cmp	r1, #1
 8000ca8:	d12c      	bne.n	8000d04 <__aeabi_fmul+0xd0>
 8000caa:	2000      	movs	r0, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	05c0      	lsls	r0, r0, #23
 8000cb0:	07f6      	lsls	r6, r6, #31
 8000cb2:	4310      	orrs	r0, r2
 8000cb4:	4330      	orrs	r0, r6
 8000cb6:	bce0      	pop	{r5, r6, r7}
 8000cb8:	46ba      	mov	sl, r7
 8000cba:	46b1      	mov	r9, r6
 8000cbc:	46a8      	mov	r8, r5
 8000cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cc0:	002b      	movs	r3, r5
 8000cc2:	33ff      	adds	r3, #255	@ 0xff
 8000cc4:	2c00      	cmp	r4, #0
 8000cc6:	d065      	beq.n	8000d94 <__aeabi_fmul+0x160>
 8000cc8:	2203      	movs	r2, #3
 8000cca:	4641      	mov	r1, r8
 8000ccc:	4311      	orrs	r1, r2
 8000cce:	0032      	movs	r2, r6
 8000cd0:	3501      	adds	r5, #1
 8000cd2:	4688      	mov	r8, r1
 8000cd4:	407a      	eors	r2, r7
 8000cd6:	35ff      	adds	r5, #255	@ 0xff
 8000cd8:	290a      	cmp	r1, #10
 8000cda:	dd00      	ble.n	8000cde <__aeabi_fmul+0xaa>
 8000cdc:	e0d8      	b.n	8000e90 <__aeabi_fmul+0x25c>
 8000cde:	0016      	movs	r6, r2
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	4640      	mov	r0, r8
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4082      	lsls	r2, r0
 8000ce8:	20a6      	movs	r0, #166	@ 0xa6
 8000cea:	00c0      	lsls	r0, r0, #3
 8000cec:	4202      	tst	r2, r0
 8000cee:	d020      	beq.n	8000d32 <__aeabi_fmul+0xfe>
 8000cf0:	4653      	mov	r3, sl
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d046      	beq.n	8000d84 <__aeabi_fmul+0x150>
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d100      	bne.n	8000cfc <__aeabi_fmul+0xc8>
 8000cfa:	e0bb      	b.n	8000e74 <__aeabi_fmul+0x240>
 8000cfc:	4651      	mov	r1, sl
 8000cfe:	464c      	mov	r4, r9
 8000d00:	2901      	cmp	r1, #1
 8000d02:	d0d2      	beq.n	8000caa <__aeabi_fmul+0x76>
 8000d04:	002b      	movs	r3, r5
 8000d06:	337f      	adds	r3, #127	@ 0x7f
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	dd70      	ble.n	8000dee <__aeabi_fmul+0x1ba>
 8000d0c:	0762      	lsls	r2, r4, #29
 8000d0e:	d004      	beq.n	8000d1a <__aeabi_fmul+0xe6>
 8000d10:	220f      	movs	r2, #15
 8000d12:	4022      	ands	r2, r4
 8000d14:	2a04      	cmp	r2, #4
 8000d16:	d000      	beq.n	8000d1a <__aeabi_fmul+0xe6>
 8000d18:	3404      	adds	r4, #4
 8000d1a:	0122      	lsls	r2, r4, #4
 8000d1c:	d503      	bpl.n	8000d26 <__aeabi_fmul+0xf2>
 8000d1e:	4b63      	ldr	r3, [pc, #396]	@ (8000eac <__aeabi_fmul+0x278>)
 8000d20:	401c      	ands	r4, r3
 8000d22:	002b      	movs	r3, r5
 8000d24:	3380      	adds	r3, #128	@ 0x80
 8000d26:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d28:	dc2c      	bgt.n	8000d84 <__aeabi_fmul+0x150>
 8000d2a:	01a2      	lsls	r2, r4, #6
 8000d2c:	0a52      	lsrs	r2, r2, #9
 8000d2e:	b2d8      	uxtb	r0, r3
 8000d30:	e7bd      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000d32:	2090      	movs	r0, #144	@ 0x90
 8000d34:	0080      	lsls	r0, r0, #2
 8000d36:	4202      	tst	r2, r0
 8000d38:	d127      	bne.n	8000d8a <__aeabi_fmul+0x156>
 8000d3a:	38b9      	subs	r0, #185	@ 0xb9
 8000d3c:	38ff      	subs	r0, #255	@ 0xff
 8000d3e:	4210      	tst	r0, r2
 8000d40:	d06d      	beq.n	8000e1e <__aeabi_fmul+0x1ea>
 8000d42:	003e      	movs	r6, r7
 8000d44:	46a1      	mov	r9, r4
 8000d46:	468a      	mov	sl, r1
 8000d48:	e7d2      	b.n	8000cf0 <__aeabi_fmul+0xbc>
 8000d4a:	2c00      	cmp	r4, #0
 8000d4c:	d141      	bne.n	8000dd2 <__aeabi_fmul+0x19e>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	4642      	mov	r2, r8
 8000d52:	431a      	orrs	r2, r3
 8000d54:	4690      	mov	r8, r2
 8000d56:	002b      	movs	r3, r5
 8000d58:	4642      	mov	r2, r8
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	1c5d      	adds	r5, r3, #1
 8000d5e:	2a0a      	cmp	r2, #10
 8000d60:	dd97      	ble.n	8000c92 <__aeabi_fmul+0x5e>
 8000d62:	e7c5      	b.n	8000cf0 <__aeabi_fmul+0xbc>
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d126      	bne.n	8000db6 <__aeabi_fmul+0x182>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	4698      	mov	r8, r3
 8000d6c:	3b03      	subs	r3, #3
 8000d6e:	2500      	movs	r5, #0
 8000d70:	469a      	mov	sl, r3
 8000d72:	e77a      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d118      	bne.n	8000daa <__aeabi_fmul+0x176>
 8000d78:	2308      	movs	r3, #8
 8000d7a:	4698      	mov	r8, r3
 8000d7c:	3b06      	subs	r3, #6
 8000d7e:	25ff      	movs	r5, #255	@ 0xff
 8000d80:	469a      	mov	sl, r3
 8000d82:	e772      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000d84:	20ff      	movs	r0, #255	@ 0xff
 8000d86:	2200      	movs	r2, #0
 8000d88:	e791      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000d8a:	2280      	movs	r2, #128	@ 0x80
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	20ff      	movs	r0, #255	@ 0xff
 8000d90:	03d2      	lsls	r2, r2, #15
 8000d92:	e78c      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000d94:	4641      	mov	r1, r8
 8000d96:	2202      	movs	r2, #2
 8000d98:	3501      	adds	r5, #1
 8000d9a:	4311      	orrs	r1, r2
 8000d9c:	4688      	mov	r8, r1
 8000d9e:	35ff      	adds	r5, #255	@ 0xff
 8000da0:	290a      	cmp	r1, #10
 8000da2:	dca5      	bgt.n	8000cf0 <__aeabi_fmul+0xbc>
 8000da4:	2102      	movs	r1, #2
 8000da6:	407e      	eors	r6, r7
 8000da8:	e774      	b.n	8000c94 <__aeabi_fmul+0x60>
 8000daa:	230c      	movs	r3, #12
 8000dac:	4698      	mov	r8, r3
 8000dae:	3b09      	subs	r3, #9
 8000db0:	25ff      	movs	r5, #255	@ 0xff
 8000db2:	469a      	mov	sl, r3
 8000db4:	e759      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 f9e4 	bl	8003184 <__clzsi2>
 8000dbc:	464a      	mov	r2, r9
 8000dbe:	1f43      	subs	r3, r0, #5
 8000dc0:	2576      	movs	r5, #118	@ 0x76
 8000dc2:	409a      	lsls	r2, r3
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	426d      	negs	r5, r5
 8000dc8:	4691      	mov	r9, r2
 8000dca:	4698      	mov	r8, r3
 8000dcc:	469a      	mov	sl, r3
 8000dce:	1a2d      	subs	r5, r5, r0
 8000dd0:	e74b      	b.n	8000c6a <__aeabi_fmul+0x36>
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f002 f9d6 	bl	8003184 <__clzsi2>
 8000dd8:	4642      	mov	r2, r8
 8000dda:	1f43      	subs	r3, r0, #5
 8000ddc:	409c      	lsls	r4, r3
 8000dde:	1a2b      	subs	r3, r5, r0
 8000de0:	3b76      	subs	r3, #118	@ 0x76
 8000de2:	2100      	movs	r1, #0
 8000de4:	1c5d      	adds	r5, r3, #1
 8000de6:	2a0a      	cmp	r2, #10
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_fmul+0x1b8>
 8000dea:	e752      	b.n	8000c92 <__aeabi_fmul+0x5e>
 8000dec:	e780      	b.n	8000cf0 <__aeabi_fmul+0xbc>
 8000dee:	2201      	movs	r2, #1
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b1b      	cmp	r3, #27
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_fmul+0x1c4>
 8000df6:	e758      	b.n	8000caa <__aeabi_fmul+0x76>
 8000df8:	359e      	adds	r5, #158	@ 0x9e
 8000dfa:	0022      	movs	r2, r4
 8000dfc:	40ac      	lsls	r4, r5
 8000dfe:	40da      	lsrs	r2, r3
 8000e00:	1e63      	subs	r3, r4, #1
 8000e02:	419c      	sbcs	r4, r3
 8000e04:	4322      	orrs	r2, r4
 8000e06:	0753      	lsls	r3, r2, #29
 8000e08:	d004      	beq.n	8000e14 <__aeabi_fmul+0x1e0>
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d000      	beq.n	8000e14 <__aeabi_fmul+0x1e0>
 8000e12:	3204      	adds	r2, #4
 8000e14:	0153      	lsls	r3, r2, #5
 8000e16:	d537      	bpl.n	8000e88 <__aeabi_fmul+0x254>
 8000e18:	2001      	movs	r0, #1
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	e747      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000e1e:	0c21      	lsrs	r1, r4, #16
 8000e20:	464a      	mov	r2, r9
 8000e22:	0424      	lsls	r4, r4, #16
 8000e24:	0c24      	lsrs	r4, r4, #16
 8000e26:	0027      	movs	r7, r4
 8000e28:	0c10      	lsrs	r0, r2, #16
 8000e2a:	0412      	lsls	r2, r2, #16
 8000e2c:	0c12      	lsrs	r2, r2, #16
 8000e2e:	4344      	muls	r4, r0
 8000e30:	4357      	muls	r7, r2
 8000e32:	4348      	muls	r0, r1
 8000e34:	4351      	muls	r1, r2
 8000e36:	0c3a      	lsrs	r2, r7, #16
 8000e38:	1909      	adds	r1, r1, r4
 8000e3a:	1852      	adds	r2, r2, r1
 8000e3c:	4294      	cmp	r4, r2
 8000e3e:	d903      	bls.n	8000e48 <__aeabi_fmul+0x214>
 8000e40:	2180      	movs	r1, #128	@ 0x80
 8000e42:	0249      	lsls	r1, r1, #9
 8000e44:	468c      	mov	ip, r1
 8000e46:	4460      	add	r0, ip
 8000e48:	043f      	lsls	r7, r7, #16
 8000e4a:	0411      	lsls	r1, r2, #16
 8000e4c:	0c3f      	lsrs	r7, r7, #16
 8000e4e:	19c9      	adds	r1, r1, r7
 8000e50:	018c      	lsls	r4, r1, #6
 8000e52:	1e67      	subs	r7, r4, #1
 8000e54:	41bc      	sbcs	r4, r7
 8000e56:	0c12      	lsrs	r2, r2, #16
 8000e58:	0e89      	lsrs	r1, r1, #26
 8000e5a:	1812      	adds	r2, r2, r0
 8000e5c:	430c      	orrs	r4, r1
 8000e5e:	0192      	lsls	r2, r2, #6
 8000e60:	4314      	orrs	r4, r2
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	d50e      	bpl.n	8000e84 <__aeabi_fmul+0x250>
 8000e66:	2301      	movs	r3, #1
 8000e68:	0862      	lsrs	r2, r4, #1
 8000e6a:	401c      	ands	r4, r3
 8000e6c:	4314      	orrs	r4, r2
 8000e6e:	e749      	b.n	8000d04 <__aeabi_fmul+0xd0>
 8000e70:	003e      	movs	r6, r7
 8000e72:	46a1      	mov	r9, r4
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	464b      	mov	r3, r9
 8000e78:	03d2      	lsls	r2, r2, #15
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	0252      	lsls	r2, r2, #9
 8000e7e:	20ff      	movs	r0, #255	@ 0xff
 8000e80:	0a52      	lsrs	r2, r2, #9
 8000e82:	e714      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000e84:	001d      	movs	r5, r3
 8000e86:	e73d      	b.n	8000d04 <__aeabi_fmul+0xd0>
 8000e88:	0192      	lsls	r2, r2, #6
 8000e8a:	2000      	movs	r0, #0
 8000e8c:	0a52      	lsrs	r2, r2, #9
 8000e8e:	e70e      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000e90:	290f      	cmp	r1, #15
 8000e92:	d1ed      	bne.n	8000e70 <__aeabi_fmul+0x23c>
 8000e94:	2280      	movs	r2, #128	@ 0x80
 8000e96:	464b      	mov	r3, r9
 8000e98:	03d2      	lsls	r2, r2, #15
 8000e9a:	4213      	tst	r3, r2
 8000e9c:	d0ea      	beq.n	8000e74 <__aeabi_fmul+0x240>
 8000e9e:	4214      	tst	r4, r2
 8000ea0:	d1e8      	bne.n	8000e74 <__aeabi_fmul+0x240>
 8000ea2:	003e      	movs	r6, r7
 8000ea4:	20ff      	movs	r0, #255	@ 0xff
 8000ea6:	4322      	orrs	r2, r4
 8000ea8:	e701      	b.n	8000cae <__aeabi_fmul+0x7a>
 8000eaa:	46c0      	nop			@ (mov r8, r8)
 8000eac:	f7ffffff 	.word	0xf7ffffff

08000eb0 <__aeabi_fsub>:
 8000eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eb2:	4647      	mov	r7, r8
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	0243      	lsls	r3, r0, #9
 8000eba:	0045      	lsls	r5, r0, #1
 8000ebc:	0a72      	lsrs	r2, r6, #9
 8000ebe:	0fc4      	lsrs	r4, r0, #31
 8000ec0:	0048      	lsls	r0, r1, #1
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	4694      	mov	ip, r2
 8000ec6:	0a5f      	lsrs	r7, r3, #9
 8000ec8:	0e2d      	lsrs	r5, r5, #24
 8000eca:	099b      	lsrs	r3, r3, #6
 8000ecc:	0e00      	lsrs	r0, r0, #24
 8000ece:	0fc9      	lsrs	r1, r1, #31
 8000ed0:	09b6      	lsrs	r6, r6, #6
 8000ed2:	28ff      	cmp	r0, #255	@ 0xff
 8000ed4:	d024      	beq.n	8000f20 <__aeabi_fsub+0x70>
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4051      	eors	r1, r2
 8000eda:	1a2a      	subs	r2, r5, r0
 8000edc:	428c      	cmp	r4, r1
 8000ede:	d00f      	beq.n	8000f00 <__aeabi_fsub+0x50>
 8000ee0:	2a00      	cmp	r2, #0
 8000ee2:	dc00      	bgt.n	8000ee6 <__aeabi_fsub+0x36>
 8000ee4:	e16a      	b.n	80011bc <__aeabi_fsub+0x30c>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	d135      	bne.n	8000f56 <__aeabi_fsub+0xa6>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x40>
 8000eee:	e0a2      	b.n	8001036 <__aeabi_fsub+0x186>
 8000ef0:	1e51      	subs	r1, r2, #1
 8000ef2:	2a01      	cmp	r2, #1
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fsub+0x48>
 8000ef6:	e124      	b.n	8001142 <__aeabi_fsub+0x292>
 8000ef8:	2aff      	cmp	r2, #255	@ 0xff
 8000efa:	d021      	beq.n	8000f40 <__aeabi_fsub+0x90>
 8000efc:	000a      	movs	r2, r1
 8000efe:	e02f      	b.n	8000f60 <__aeabi_fsub+0xb0>
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	dc00      	bgt.n	8000f06 <__aeabi_fsub+0x56>
 8000f04:	e167      	b.n	80011d6 <__aeabi_fsub+0x326>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	d05e      	beq.n	8000fc8 <__aeabi_fsub+0x118>
 8000f0a:	2dff      	cmp	r5, #255	@ 0xff
 8000f0c:	d018      	beq.n	8000f40 <__aeabi_fsub+0x90>
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	04c9      	lsls	r1, r1, #19
 8000f12:	430e      	orrs	r6, r1
 8000f14:	2a1b      	cmp	r2, #27
 8000f16:	dc00      	bgt.n	8000f1a <__aeabi_fsub+0x6a>
 8000f18:	e076      	b.n	8001008 <__aeabi_fsub+0x158>
 8000f1a:	002a      	movs	r2, r5
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	e032      	b.n	8000f86 <__aeabi_fsub+0xd6>
 8000f20:	002a      	movs	r2, r5
 8000f22:	3aff      	subs	r2, #255	@ 0xff
 8000f24:	4691      	mov	r9, r2
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d042      	beq.n	8000fb0 <__aeabi_fsub+0x100>
 8000f2a:	428c      	cmp	r4, r1
 8000f2c:	d055      	beq.n	8000fda <__aeabi_fsub+0x12a>
 8000f2e:	464a      	mov	r2, r9
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x86>
 8000f34:	e09c      	b.n	8001070 <__aeabi_fsub+0x1c0>
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x8c>
 8000f3a:	e077      	b.n	800102c <__aeabi_fsub+0x17c>
 8000f3c:	000c      	movs	r4, r1
 8000f3e:	0033      	movs	r3, r6
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x98>
 8000f46:	e06e      	b.n	8001026 <__aeabi_fsub+0x176>
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	03d2      	lsls	r2, r2, #15
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	025b      	lsls	r3, r3, #9
 8000f50:	20ff      	movs	r0, #255	@ 0xff
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	e024      	b.n	8000fa0 <__aeabi_fsub+0xf0>
 8000f56:	2dff      	cmp	r5, #255	@ 0xff
 8000f58:	d0f2      	beq.n	8000f40 <__aeabi_fsub+0x90>
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	04c9      	lsls	r1, r1, #19
 8000f5e:	430e      	orrs	r6, r1
 8000f60:	2101      	movs	r1, #1
 8000f62:	2a1b      	cmp	r2, #27
 8000f64:	dc08      	bgt.n	8000f78 <__aeabi_fsub+0xc8>
 8000f66:	0031      	movs	r1, r6
 8000f68:	2020      	movs	r0, #32
 8000f6a:	40d1      	lsrs	r1, r2
 8000f6c:	1a82      	subs	r2, r0, r2
 8000f6e:	4096      	lsls	r6, r2
 8000f70:	0032      	movs	r2, r6
 8000f72:	1e50      	subs	r0, r2, #1
 8000f74:	4182      	sbcs	r2, r0
 8000f76:	4311      	orrs	r1, r2
 8000f78:	1a5b      	subs	r3, r3, r1
 8000f7a:	015a      	lsls	r2, r3, #5
 8000f7c:	d460      	bmi.n	8001040 <__aeabi_fsub+0x190>
 8000f7e:	2107      	movs	r1, #7
 8000f80:	002a      	movs	r2, r5
 8000f82:	4019      	ands	r1, r3
 8000f84:	d057      	beq.n	8001036 <__aeabi_fsub+0x186>
 8000f86:	210f      	movs	r1, #15
 8000f88:	4019      	ands	r1, r3
 8000f8a:	2904      	cmp	r1, #4
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fsub+0xe0>
 8000f8e:	3304      	adds	r3, #4
 8000f90:	0159      	lsls	r1, r3, #5
 8000f92:	d550      	bpl.n	8001036 <__aeabi_fsub+0x186>
 8000f94:	1c50      	adds	r0, r2, #1
 8000f96:	2afe      	cmp	r2, #254	@ 0xfe
 8000f98:	d045      	beq.n	8001026 <__aeabi_fsub+0x176>
 8000f9a:	019b      	lsls	r3, r3, #6
 8000f9c:	b2c0      	uxtb	r0, r0
 8000f9e:	0a5b      	lsrs	r3, r3, #9
 8000fa0:	05c0      	lsls	r0, r0, #23
 8000fa2:	4318      	orrs	r0, r3
 8000fa4:	07e4      	lsls	r4, r4, #31
 8000fa6:	4320      	orrs	r0, r4
 8000fa8:	bcc0      	pop	{r6, r7}
 8000faa:	46b9      	mov	r9, r7
 8000fac:	46b0      	mov	r8, r6
 8000fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4051      	eors	r1, r2
 8000fb4:	428c      	cmp	r4, r1
 8000fb6:	d1ba      	bne.n	8000f2e <__aeabi_fsub+0x7e>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	2a00      	cmp	r2, #0
 8000fbc:	d010      	beq.n	8000fe0 <__aeabi_fsub+0x130>
 8000fbe:	2d00      	cmp	r5, #0
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fsub+0x114>
 8000fc2:	e098      	b.n	80010f6 <__aeabi_fsub+0x246>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	e7bb      	b.n	8000f40 <__aeabi_fsub+0x90>
 8000fc8:	2e00      	cmp	r6, #0
 8000fca:	d034      	beq.n	8001036 <__aeabi_fsub+0x186>
 8000fcc:	1e51      	subs	r1, r2, #1
 8000fce:	2a01      	cmp	r2, #1
 8000fd0:	d06e      	beq.n	80010b0 <__aeabi_fsub+0x200>
 8000fd2:	2aff      	cmp	r2, #255	@ 0xff
 8000fd4:	d0b4      	beq.n	8000f40 <__aeabi_fsub+0x90>
 8000fd6:	000a      	movs	r2, r1
 8000fd8:	e79c      	b.n	8000f14 <__aeabi_fsub+0x64>
 8000fda:	2a00      	cmp	r2, #0
 8000fdc:	d000      	beq.n	8000fe0 <__aeabi_fsub+0x130>
 8000fde:	e088      	b.n	80010f2 <__aeabi_fsub+0x242>
 8000fe0:	20fe      	movs	r0, #254	@ 0xfe
 8000fe2:	1c6a      	adds	r2, r5, #1
 8000fe4:	4210      	tst	r0, r2
 8000fe6:	d000      	beq.n	8000fea <__aeabi_fsub+0x13a>
 8000fe8:	e092      	b.n	8001110 <__aeabi_fsub+0x260>
 8000fea:	2d00      	cmp	r5, #0
 8000fec:	d000      	beq.n	8000ff0 <__aeabi_fsub+0x140>
 8000fee:	e0a4      	b.n	800113a <__aeabi_fsub+0x28a>
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_fsub+0x146>
 8000ff4:	e0cb      	b.n	800118e <__aeabi_fsub+0x2de>
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	d000      	beq.n	8000ffc <__aeabi_fsub+0x14c>
 8000ffa:	e0ca      	b.n	8001192 <__aeabi_fsub+0x2e2>
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	025b      	lsls	r3, r3, #9
 8001002:	0a5b      	lsrs	r3, r3, #9
 8001004:	b2d0      	uxtb	r0, r2
 8001006:	e7cb      	b.n	8000fa0 <__aeabi_fsub+0xf0>
 8001008:	0031      	movs	r1, r6
 800100a:	2020      	movs	r0, #32
 800100c:	40d1      	lsrs	r1, r2
 800100e:	1a82      	subs	r2, r0, r2
 8001010:	4096      	lsls	r6, r2
 8001012:	0032      	movs	r2, r6
 8001014:	1e50      	subs	r0, r2, #1
 8001016:	4182      	sbcs	r2, r0
 8001018:	430a      	orrs	r2, r1
 800101a:	189b      	adds	r3, r3, r2
 800101c:	015a      	lsls	r2, r3, #5
 800101e:	d5ae      	bpl.n	8000f7e <__aeabi_fsub+0xce>
 8001020:	1c6a      	adds	r2, r5, #1
 8001022:	2dfe      	cmp	r5, #254	@ 0xfe
 8001024:	d14a      	bne.n	80010bc <__aeabi_fsub+0x20c>
 8001026:	20ff      	movs	r0, #255	@ 0xff
 8001028:	2300      	movs	r3, #0
 800102a:	e7b9      	b.n	8000fa0 <__aeabi_fsub+0xf0>
 800102c:	22ff      	movs	r2, #255	@ 0xff
 800102e:	2b00      	cmp	r3, #0
 8001030:	d14b      	bne.n	80010ca <__aeabi_fsub+0x21a>
 8001032:	000c      	movs	r4, r1
 8001034:	0033      	movs	r3, r6
 8001036:	08db      	lsrs	r3, r3, #3
 8001038:	2aff      	cmp	r2, #255	@ 0xff
 800103a:	d100      	bne.n	800103e <__aeabi_fsub+0x18e>
 800103c:	e781      	b.n	8000f42 <__aeabi_fsub+0x92>
 800103e:	e7df      	b.n	8001000 <__aeabi_fsub+0x150>
 8001040:	019f      	lsls	r7, r3, #6
 8001042:	09bf      	lsrs	r7, r7, #6
 8001044:	0038      	movs	r0, r7
 8001046:	f002 f89d 	bl	8003184 <__clzsi2>
 800104a:	3805      	subs	r0, #5
 800104c:	4087      	lsls	r7, r0
 800104e:	4285      	cmp	r5, r0
 8001050:	dc21      	bgt.n	8001096 <__aeabi_fsub+0x1e6>
 8001052:	003b      	movs	r3, r7
 8001054:	2120      	movs	r1, #32
 8001056:	1b42      	subs	r2, r0, r5
 8001058:	3201      	adds	r2, #1
 800105a:	40d3      	lsrs	r3, r2
 800105c:	1a8a      	subs	r2, r1, r2
 800105e:	4097      	lsls	r7, r2
 8001060:	1e7a      	subs	r2, r7, #1
 8001062:	4197      	sbcs	r7, r2
 8001064:	2200      	movs	r2, #0
 8001066:	433b      	orrs	r3, r7
 8001068:	0759      	lsls	r1, r3, #29
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x1be>
 800106c:	e78b      	b.n	8000f86 <__aeabi_fsub+0xd6>
 800106e:	e78f      	b.n	8000f90 <__aeabi_fsub+0xe0>
 8001070:	20fe      	movs	r0, #254	@ 0xfe
 8001072:	1c6a      	adds	r2, r5, #1
 8001074:	4210      	tst	r0, r2
 8001076:	d112      	bne.n	800109e <__aeabi_fsub+0x1ee>
 8001078:	2d00      	cmp	r5, #0
 800107a:	d152      	bne.n	8001122 <__aeabi_fsub+0x272>
 800107c:	2b00      	cmp	r3, #0
 800107e:	d07c      	beq.n	800117a <__aeabi_fsub+0x2ca>
 8001080:	2e00      	cmp	r6, #0
 8001082:	d0bb      	beq.n	8000ffc <__aeabi_fsub+0x14c>
 8001084:	1b9a      	subs	r2, r3, r6
 8001086:	0150      	lsls	r0, r2, #5
 8001088:	d400      	bmi.n	800108c <__aeabi_fsub+0x1dc>
 800108a:	e08b      	b.n	80011a4 <__aeabi_fsub+0x2f4>
 800108c:	2401      	movs	r4, #1
 800108e:	2200      	movs	r2, #0
 8001090:	1af3      	subs	r3, r6, r3
 8001092:	400c      	ands	r4, r1
 8001094:	e7e8      	b.n	8001068 <__aeabi_fsub+0x1b8>
 8001096:	4b56      	ldr	r3, [pc, #344]	@ (80011f0 <__aeabi_fsub+0x340>)
 8001098:	1a2a      	subs	r2, r5, r0
 800109a:	403b      	ands	r3, r7
 800109c:	e7e4      	b.n	8001068 <__aeabi_fsub+0x1b8>
 800109e:	1b9f      	subs	r7, r3, r6
 80010a0:	017a      	lsls	r2, r7, #5
 80010a2:	d446      	bmi.n	8001132 <__aeabi_fsub+0x282>
 80010a4:	2f00      	cmp	r7, #0
 80010a6:	d1cd      	bne.n	8001044 <__aeabi_fsub+0x194>
 80010a8:	2400      	movs	r4, #0
 80010aa:	2000      	movs	r0, #0
 80010ac:	2300      	movs	r3, #0
 80010ae:	e777      	b.n	8000fa0 <__aeabi_fsub+0xf0>
 80010b0:	199b      	adds	r3, r3, r6
 80010b2:	2501      	movs	r5, #1
 80010b4:	3201      	adds	r2, #1
 80010b6:	0159      	lsls	r1, r3, #5
 80010b8:	d400      	bmi.n	80010bc <__aeabi_fsub+0x20c>
 80010ba:	e760      	b.n	8000f7e <__aeabi_fsub+0xce>
 80010bc:	2101      	movs	r1, #1
 80010be:	484d      	ldr	r0, [pc, #308]	@ (80011f4 <__aeabi_fsub+0x344>)
 80010c0:	4019      	ands	r1, r3
 80010c2:	085b      	lsrs	r3, r3, #1
 80010c4:	4003      	ands	r3, r0
 80010c6:	430b      	orrs	r3, r1
 80010c8:	e7ce      	b.n	8001068 <__aeabi_fsub+0x1b8>
 80010ca:	1e57      	subs	r7, r2, #1
 80010cc:	2a01      	cmp	r2, #1
 80010ce:	d05a      	beq.n	8001186 <__aeabi_fsub+0x2d6>
 80010d0:	000c      	movs	r4, r1
 80010d2:	2aff      	cmp	r2, #255	@ 0xff
 80010d4:	d033      	beq.n	800113e <__aeabi_fsub+0x28e>
 80010d6:	2201      	movs	r2, #1
 80010d8:	2f1b      	cmp	r7, #27
 80010da:	dc07      	bgt.n	80010ec <__aeabi_fsub+0x23c>
 80010dc:	2120      	movs	r1, #32
 80010de:	1bc9      	subs	r1, r1, r7
 80010e0:	001a      	movs	r2, r3
 80010e2:	408b      	lsls	r3, r1
 80010e4:	40fa      	lsrs	r2, r7
 80010e6:	1e59      	subs	r1, r3, #1
 80010e8:	418b      	sbcs	r3, r1
 80010ea:	431a      	orrs	r2, r3
 80010ec:	0005      	movs	r5, r0
 80010ee:	1ab3      	subs	r3, r6, r2
 80010f0:	e743      	b.n	8000f7a <__aeabi_fsub+0xca>
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	d123      	bne.n	800113e <__aeabi_fsub+0x28e>
 80010f6:	22ff      	movs	r2, #255	@ 0xff
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d09b      	beq.n	8001034 <__aeabi_fsub+0x184>
 80010fc:	1e51      	subs	r1, r2, #1
 80010fe:	2a01      	cmp	r2, #1
 8001100:	d0d6      	beq.n	80010b0 <__aeabi_fsub+0x200>
 8001102:	2aff      	cmp	r2, #255	@ 0xff
 8001104:	d01b      	beq.n	800113e <__aeabi_fsub+0x28e>
 8001106:	291b      	cmp	r1, #27
 8001108:	dd2c      	ble.n	8001164 <__aeabi_fsub+0x2b4>
 800110a:	0002      	movs	r2, r0
 800110c:	1c73      	adds	r3, r6, #1
 800110e:	e73a      	b.n	8000f86 <__aeabi_fsub+0xd6>
 8001110:	2aff      	cmp	r2, #255	@ 0xff
 8001112:	d088      	beq.n	8001026 <__aeabi_fsub+0x176>
 8001114:	199b      	adds	r3, r3, r6
 8001116:	085b      	lsrs	r3, r3, #1
 8001118:	0759      	lsls	r1, r3, #29
 800111a:	d000      	beq.n	800111e <__aeabi_fsub+0x26e>
 800111c:	e733      	b.n	8000f86 <__aeabi_fsub+0xd6>
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	e76e      	b.n	8001000 <__aeabi_fsub+0x150>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d110      	bne.n	8001148 <__aeabi_fsub+0x298>
 8001126:	2e00      	cmp	r6, #0
 8001128:	d043      	beq.n	80011b2 <__aeabi_fsub+0x302>
 800112a:	2401      	movs	r4, #1
 800112c:	0033      	movs	r3, r6
 800112e:	400c      	ands	r4, r1
 8001130:	e706      	b.n	8000f40 <__aeabi_fsub+0x90>
 8001132:	2401      	movs	r4, #1
 8001134:	1af7      	subs	r7, r6, r3
 8001136:	400c      	ands	r4, r1
 8001138:	e784      	b.n	8001044 <__aeabi_fsub+0x194>
 800113a:	2b00      	cmp	r3, #0
 800113c:	d104      	bne.n	8001148 <__aeabi_fsub+0x298>
 800113e:	0033      	movs	r3, r6
 8001140:	e6fe      	b.n	8000f40 <__aeabi_fsub+0x90>
 8001142:	2501      	movs	r5, #1
 8001144:	1b9b      	subs	r3, r3, r6
 8001146:	e718      	b.n	8000f7a <__aeabi_fsub+0xca>
 8001148:	2e00      	cmp	r6, #0
 800114a:	d100      	bne.n	800114e <__aeabi_fsub+0x29e>
 800114c:	e6f8      	b.n	8000f40 <__aeabi_fsub+0x90>
 800114e:	2280      	movs	r2, #128	@ 0x80
 8001150:	03d2      	lsls	r2, r2, #15
 8001152:	4297      	cmp	r7, r2
 8001154:	d304      	bcc.n	8001160 <__aeabi_fsub+0x2b0>
 8001156:	4594      	cmp	ip, r2
 8001158:	d202      	bcs.n	8001160 <__aeabi_fsub+0x2b0>
 800115a:	2401      	movs	r4, #1
 800115c:	0033      	movs	r3, r6
 800115e:	400c      	ands	r4, r1
 8001160:	08db      	lsrs	r3, r3, #3
 8001162:	e6f1      	b.n	8000f48 <__aeabi_fsub+0x98>
 8001164:	001a      	movs	r2, r3
 8001166:	2520      	movs	r5, #32
 8001168:	40ca      	lsrs	r2, r1
 800116a:	1a69      	subs	r1, r5, r1
 800116c:	408b      	lsls	r3, r1
 800116e:	1e59      	subs	r1, r3, #1
 8001170:	418b      	sbcs	r3, r1
 8001172:	4313      	orrs	r3, r2
 8001174:	0005      	movs	r5, r0
 8001176:	199b      	adds	r3, r3, r6
 8001178:	e750      	b.n	800101c <__aeabi_fsub+0x16c>
 800117a:	2e00      	cmp	r6, #0
 800117c:	d094      	beq.n	80010a8 <__aeabi_fsub+0x1f8>
 800117e:	2401      	movs	r4, #1
 8001180:	0033      	movs	r3, r6
 8001182:	400c      	ands	r4, r1
 8001184:	e73a      	b.n	8000ffc <__aeabi_fsub+0x14c>
 8001186:	000c      	movs	r4, r1
 8001188:	2501      	movs	r5, #1
 800118a:	1af3      	subs	r3, r6, r3
 800118c:	e6f5      	b.n	8000f7a <__aeabi_fsub+0xca>
 800118e:	0033      	movs	r3, r6
 8001190:	e734      	b.n	8000ffc <__aeabi_fsub+0x14c>
 8001192:	199b      	adds	r3, r3, r6
 8001194:	2200      	movs	r2, #0
 8001196:	0159      	lsls	r1, r3, #5
 8001198:	d5c1      	bpl.n	800111e <__aeabi_fsub+0x26e>
 800119a:	4a15      	ldr	r2, [pc, #84]	@ (80011f0 <__aeabi_fsub+0x340>)
 800119c:	4013      	ands	r3, r2
 800119e:	08db      	lsrs	r3, r3, #3
 80011a0:	2201      	movs	r2, #1
 80011a2:	e72d      	b.n	8001000 <__aeabi_fsub+0x150>
 80011a4:	2a00      	cmp	r2, #0
 80011a6:	d100      	bne.n	80011aa <__aeabi_fsub+0x2fa>
 80011a8:	e77e      	b.n	80010a8 <__aeabi_fsub+0x1f8>
 80011aa:	0013      	movs	r3, r2
 80011ac:	2200      	movs	r2, #0
 80011ae:	08db      	lsrs	r3, r3, #3
 80011b0:	e726      	b.n	8001000 <__aeabi_fsub+0x150>
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	2400      	movs	r4, #0
 80011b6:	20ff      	movs	r0, #255	@ 0xff
 80011b8:	03db      	lsls	r3, r3, #15
 80011ba:	e6f1      	b.n	8000fa0 <__aeabi_fsub+0xf0>
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_fsub+0x312>
 80011c0:	e756      	b.n	8001070 <__aeabi_fsub+0x1c0>
 80011c2:	1b47      	subs	r7, r0, r5
 80011c4:	003a      	movs	r2, r7
 80011c6:	2d00      	cmp	r5, #0
 80011c8:	d100      	bne.n	80011cc <__aeabi_fsub+0x31c>
 80011ca:	e730      	b.n	800102e <__aeabi_fsub+0x17e>
 80011cc:	2280      	movs	r2, #128	@ 0x80
 80011ce:	04d2      	lsls	r2, r2, #19
 80011d0:	000c      	movs	r4, r1
 80011d2:	4313      	orrs	r3, r2
 80011d4:	e77f      	b.n	80010d6 <__aeabi_fsub+0x226>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d100      	bne.n	80011dc <__aeabi_fsub+0x32c>
 80011da:	e701      	b.n	8000fe0 <__aeabi_fsub+0x130>
 80011dc:	1b41      	subs	r1, r0, r5
 80011de:	2d00      	cmp	r5, #0
 80011e0:	d101      	bne.n	80011e6 <__aeabi_fsub+0x336>
 80011e2:	000a      	movs	r2, r1
 80011e4:	e788      	b.n	80010f8 <__aeabi_fsub+0x248>
 80011e6:	2280      	movs	r2, #128	@ 0x80
 80011e8:	04d2      	lsls	r2, r2, #19
 80011ea:	4313      	orrs	r3, r2
 80011ec:	e78b      	b.n	8001106 <__aeabi_fsub+0x256>
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	fbffffff 	.word	0xfbffffff
 80011f4:	7dffffff 	.word	0x7dffffff

080011f8 <__aeabi_fcmpun>:
 80011f8:	0243      	lsls	r3, r0, #9
 80011fa:	024a      	lsls	r2, r1, #9
 80011fc:	0040      	lsls	r0, r0, #1
 80011fe:	0049      	lsls	r1, r1, #1
 8001200:	0a5b      	lsrs	r3, r3, #9
 8001202:	0a52      	lsrs	r2, r2, #9
 8001204:	0e09      	lsrs	r1, r1, #24
 8001206:	0e00      	lsrs	r0, r0, #24
 8001208:	28ff      	cmp	r0, #255	@ 0xff
 800120a:	d006      	beq.n	800121a <__aeabi_fcmpun+0x22>
 800120c:	2000      	movs	r0, #0
 800120e:	29ff      	cmp	r1, #255	@ 0xff
 8001210:	d102      	bne.n	8001218 <__aeabi_fcmpun+0x20>
 8001212:	1e53      	subs	r3, r2, #1
 8001214:	419a      	sbcs	r2, r3
 8001216:	0010      	movs	r0, r2
 8001218:	4770      	bx	lr
 800121a:	38fe      	subs	r0, #254	@ 0xfe
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1fb      	bne.n	8001218 <__aeabi_fcmpun+0x20>
 8001220:	e7f4      	b.n	800120c <__aeabi_fcmpun+0x14>
 8001222:	46c0      	nop			@ (mov r8, r8)

08001224 <__aeabi_i2f>:
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	2800      	cmp	r0, #0
 8001228:	d013      	beq.n	8001252 <__aeabi_i2f+0x2e>
 800122a:	17c3      	asrs	r3, r0, #31
 800122c:	18c5      	adds	r5, r0, r3
 800122e:	405d      	eors	r5, r3
 8001230:	0fc4      	lsrs	r4, r0, #31
 8001232:	0028      	movs	r0, r5
 8001234:	f001 ffa6 	bl	8003184 <__clzsi2>
 8001238:	239e      	movs	r3, #158	@ 0x9e
 800123a:	0001      	movs	r1, r0
 800123c:	1a1b      	subs	r3, r3, r0
 800123e:	2b96      	cmp	r3, #150	@ 0x96
 8001240:	dc0f      	bgt.n	8001262 <__aeabi_i2f+0x3e>
 8001242:	2808      	cmp	r0, #8
 8001244:	d034      	beq.n	80012b0 <__aeabi_i2f+0x8c>
 8001246:	3908      	subs	r1, #8
 8001248:	408d      	lsls	r5, r1
 800124a:	026d      	lsls	r5, r5, #9
 800124c:	0a6d      	lsrs	r5, r5, #9
 800124e:	b2d8      	uxtb	r0, r3
 8001250:	e002      	b.n	8001258 <__aeabi_i2f+0x34>
 8001252:	2400      	movs	r4, #0
 8001254:	2000      	movs	r0, #0
 8001256:	2500      	movs	r5, #0
 8001258:	05c0      	lsls	r0, r0, #23
 800125a:	4328      	orrs	r0, r5
 800125c:	07e4      	lsls	r4, r4, #31
 800125e:	4320      	orrs	r0, r4
 8001260:	bd70      	pop	{r4, r5, r6, pc}
 8001262:	2b99      	cmp	r3, #153	@ 0x99
 8001264:	dc16      	bgt.n	8001294 <__aeabi_i2f+0x70>
 8001266:	1f42      	subs	r2, r0, #5
 8001268:	2805      	cmp	r0, #5
 800126a:	d000      	beq.n	800126e <__aeabi_i2f+0x4a>
 800126c:	4095      	lsls	r5, r2
 800126e:	002a      	movs	r2, r5
 8001270:	4811      	ldr	r0, [pc, #68]	@ (80012b8 <__aeabi_i2f+0x94>)
 8001272:	4002      	ands	r2, r0
 8001274:	076e      	lsls	r6, r5, #29
 8001276:	d009      	beq.n	800128c <__aeabi_i2f+0x68>
 8001278:	260f      	movs	r6, #15
 800127a:	4035      	ands	r5, r6
 800127c:	2d04      	cmp	r5, #4
 800127e:	d005      	beq.n	800128c <__aeabi_i2f+0x68>
 8001280:	3204      	adds	r2, #4
 8001282:	0155      	lsls	r5, r2, #5
 8001284:	d502      	bpl.n	800128c <__aeabi_i2f+0x68>
 8001286:	239f      	movs	r3, #159	@ 0x9f
 8001288:	4002      	ands	r2, r0
 800128a:	1a5b      	subs	r3, r3, r1
 800128c:	0192      	lsls	r2, r2, #6
 800128e:	0a55      	lsrs	r5, r2, #9
 8001290:	b2d8      	uxtb	r0, r3
 8001292:	e7e1      	b.n	8001258 <__aeabi_i2f+0x34>
 8001294:	2205      	movs	r2, #5
 8001296:	1a12      	subs	r2, r2, r0
 8001298:	0028      	movs	r0, r5
 800129a:	40d0      	lsrs	r0, r2
 800129c:	0002      	movs	r2, r0
 800129e:	0008      	movs	r0, r1
 80012a0:	301b      	adds	r0, #27
 80012a2:	4085      	lsls	r5, r0
 80012a4:	0028      	movs	r0, r5
 80012a6:	1e45      	subs	r5, r0, #1
 80012a8:	41a8      	sbcs	r0, r5
 80012aa:	4302      	orrs	r2, r0
 80012ac:	0015      	movs	r5, r2
 80012ae:	e7de      	b.n	800126e <__aeabi_i2f+0x4a>
 80012b0:	026d      	lsls	r5, r5, #9
 80012b2:	2096      	movs	r0, #150	@ 0x96
 80012b4:	0a6d      	lsrs	r5, r5, #9
 80012b6:	e7cf      	b.n	8001258 <__aeabi_i2f+0x34>
 80012b8:	fbffffff 	.word	0xfbffffff

080012bc <__aeabi_dadd>:
 80012bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012be:	4657      	mov	r7, sl
 80012c0:	464e      	mov	r6, r9
 80012c2:	4645      	mov	r5, r8
 80012c4:	46de      	mov	lr, fp
 80012c6:	b5e0      	push	{r5, r6, r7, lr}
 80012c8:	b083      	sub	sp, #12
 80012ca:	9000      	str	r0, [sp, #0]
 80012cc:	9101      	str	r1, [sp, #4]
 80012ce:	030c      	lsls	r4, r1, #12
 80012d0:	004f      	lsls	r7, r1, #1
 80012d2:	0fce      	lsrs	r6, r1, #31
 80012d4:	0a61      	lsrs	r1, r4, #9
 80012d6:	9c00      	ldr	r4, [sp, #0]
 80012d8:	031d      	lsls	r5, r3, #12
 80012da:	0f64      	lsrs	r4, r4, #29
 80012dc:	430c      	orrs	r4, r1
 80012de:	9900      	ldr	r1, [sp, #0]
 80012e0:	9200      	str	r2, [sp, #0]
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	00c8      	lsls	r0, r1, #3
 80012e6:	0059      	lsls	r1, r3, #1
 80012e8:	0d4b      	lsrs	r3, r1, #21
 80012ea:	4699      	mov	r9, r3
 80012ec:	9a00      	ldr	r2, [sp, #0]
 80012ee:	9b01      	ldr	r3, [sp, #4]
 80012f0:	0a6d      	lsrs	r5, r5, #9
 80012f2:	0fd9      	lsrs	r1, r3, #31
 80012f4:	0f53      	lsrs	r3, r2, #29
 80012f6:	432b      	orrs	r3, r5
 80012f8:	469a      	mov	sl, r3
 80012fa:	9b00      	ldr	r3, [sp, #0]
 80012fc:	0d7f      	lsrs	r7, r7, #21
 80012fe:	00da      	lsls	r2, r3, #3
 8001300:	4694      	mov	ip, r2
 8001302:	464a      	mov	r2, r9
 8001304:	46b0      	mov	r8, r6
 8001306:	1aba      	subs	r2, r7, r2
 8001308:	428e      	cmp	r6, r1
 800130a:	d100      	bne.n	800130e <__aeabi_dadd+0x52>
 800130c:	e0b0      	b.n	8001470 <__aeabi_dadd+0x1b4>
 800130e:	2a00      	cmp	r2, #0
 8001310:	dc00      	bgt.n	8001314 <__aeabi_dadd+0x58>
 8001312:	e078      	b.n	8001406 <__aeabi_dadd+0x14a>
 8001314:	4649      	mov	r1, r9
 8001316:	2900      	cmp	r1, #0
 8001318:	d100      	bne.n	800131c <__aeabi_dadd+0x60>
 800131a:	e0e9      	b.n	80014f0 <__aeabi_dadd+0x234>
 800131c:	49c9      	ldr	r1, [pc, #804]	@ (8001644 <__aeabi_dadd+0x388>)
 800131e:	428f      	cmp	r7, r1
 8001320:	d100      	bne.n	8001324 <__aeabi_dadd+0x68>
 8001322:	e195      	b.n	8001650 <__aeabi_dadd+0x394>
 8001324:	2501      	movs	r5, #1
 8001326:	2a38      	cmp	r2, #56	@ 0x38
 8001328:	dc16      	bgt.n	8001358 <__aeabi_dadd+0x9c>
 800132a:	2180      	movs	r1, #128	@ 0x80
 800132c:	4653      	mov	r3, sl
 800132e:	0409      	lsls	r1, r1, #16
 8001330:	430b      	orrs	r3, r1
 8001332:	469a      	mov	sl, r3
 8001334:	2a1f      	cmp	r2, #31
 8001336:	dd00      	ble.n	800133a <__aeabi_dadd+0x7e>
 8001338:	e1e7      	b.n	800170a <__aeabi_dadd+0x44e>
 800133a:	2120      	movs	r1, #32
 800133c:	4655      	mov	r5, sl
 800133e:	1a8b      	subs	r3, r1, r2
 8001340:	4661      	mov	r1, ip
 8001342:	409d      	lsls	r5, r3
 8001344:	40d1      	lsrs	r1, r2
 8001346:	430d      	orrs	r5, r1
 8001348:	4661      	mov	r1, ip
 800134a:	4099      	lsls	r1, r3
 800134c:	1e4b      	subs	r3, r1, #1
 800134e:	4199      	sbcs	r1, r3
 8001350:	4653      	mov	r3, sl
 8001352:	40d3      	lsrs	r3, r2
 8001354:	430d      	orrs	r5, r1
 8001356:	1ae4      	subs	r4, r4, r3
 8001358:	1b45      	subs	r5, r0, r5
 800135a:	42a8      	cmp	r0, r5
 800135c:	4180      	sbcs	r0, r0
 800135e:	4240      	negs	r0, r0
 8001360:	1a24      	subs	r4, r4, r0
 8001362:	0223      	lsls	r3, r4, #8
 8001364:	d400      	bmi.n	8001368 <__aeabi_dadd+0xac>
 8001366:	e10f      	b.n	8001588 <__aeabi_dadd+0x2cc>
 8001368:	0264      	lsls	r4, r4, #9
 800136a:	0a64      	lsrs	r4, r4, #9
 800136c:	2c00      	cmp	r4, #0
 800136e:	d100      	bne.n	8001372 <__aeabi_dadd+0xb6>
 8001370:	e139      	b.n	80015e6 <__aeabi_dadd+0x32a>
 8001372:	0020      	movs	r0, r4
 8001374:	f001 ff06 	bl	8003184 <__clzsi2>
 8001378:	0003      	movs	r3, r0
 800137a:	3b08      	subs	r3, #8
 800137c:	2120      	movs	r1, #32
 800137e:	0028      	movs	r0, r5
 8001380:	1aca      	subs	r2, r1, r3
 8001382:	40d0      	lsrs	r0, r2
 8001384:	409c      	lsls	r4, r3
 8001386:	0002      	movs	r2, r0
 8001388:	409d      	lsls	r5, r3
 800138a:	4322      	orrs	r2, r4
 800138c:	429f      	cmp	r7, r3
 800138e:	dd00      	ble.n	8001392 <__aeabi_dadd+0xd6>
 8001390:	e173      	b.n	800167a <__aeabi_dadd+0x3be>
 8001392:	1bd8      	subs	r0, r3, r7
 8001394:	3001      	adds	r0, #1
 8001396:	1a09      	subs	r1, r1, r0
 8001398:	002c      	movs	r4, r5
 800139a:	408d      	lsls	r5, r1
 800139c:	40c4      	lsrs	r4, r0
 800139e:	1e6b      	subs	r3, r5, #1
 80013a0:	419d      	sbcs	r5, r3
 80013a2:	0013      	movs	r3, r2
 80013a4:	40c2      	lsrs	r2, r0
 80013a6:	408b      	lsls	r3, r1
 80013a8:	4325      	orrs	r5, r4
 80013aa:	2700      	movs	r7, #0
 80013ac:	0014      	movs	r4, r2
 80013ae:	431d      	orrs	r5, r3
 80013b0:	076b      	lsls	r3, r5, #29
 80013b2:	d009      	beq.n	80013c8 <__aeabi_dadd+0x10c>
 80013b4:	230f      	movs	r3, #15
 80013b6:	402b      	ands	r3, r5
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	d005      	beq.n	80013c8 <__aeabi_dadd+0x10c>
 80013bc:	1d2b      	adds	r3, r5, #4
 80013be:	42ab      	cmp	r3, r5
 80013c0:	41ad      	sbcs	r5, r5
 80013c2:	426d      	negs	r5, r5
 80013c4:	1964      	adds	r4, r4, r5
 80013c6:	001d      	movs	r5, r3
 80013c8:	0223      	lsls	r3, r4, #8
 80013ca:	d400      	bmi.n	80013ce <__aeabi_dadd+0x112>
 80013cc:	e12d      	b.n	800162a <__aeabi_dadd+0x36e>
 80013ce:	4a9d      	ldr	r2, [pc, #628]	@ (8001644 <__aeabi_dadd+0x388>)
 80013d0:	3701      	adds	r7, #1
 80013d2:	4297      	cmp	r7, r2
 80013d4:	d100      	bne.n	80013d8 <__aeabi_dadd+0x11c>
 80013d6:	e0d3      	b.n	8001580 <__aeabi_dadd+0x2c4>
 80013d8:	4646      	mov	r6, r8
 80013da:	499b      	ldr	r1, [pc, #620]	@ (8001648 <__aeabi_dadd+0x38c>)
 80013dc:	08ed      	lsrs	r5, r5, #3
 80013de:	4021      	ands	r1, r4
 80013e0:	074a      	lsls	r2, r1, #29
 80013e2:	432a      	orrs	r2, r5
 80013e4:	057c      	lsls	r4, r7, #21
 80013e6:	024d      	lsls	r5, r1, #9
 80013e8:	0b2d      	lsrs	r5, r5, #12
 80013ea:	0d64      	lsrs	r4, r4, #21
 80013ec:	0524      	lsls	r4, r4, #20
 80013ee:	432c      	orrs	r4, r5
 80013f0:	07f6      	lsls	r6, r6, #31
 80013f2:	4334      	orrs	r4, r6
 80013f4:	0010      	movs	r0, r2
 80013f6:	0021      	movs	r1, r4
 80013f8:	b003      	add	sp, #12
 80013fa:	bcf0      	pop	{r4, r5, r6, r7}
 80013fc:	46bb      	mov	fp, r7
 80013fe:	46b2      	mov	sl, r6
 8001400:	46a9      	mov	r9, r5
 8001402:	46a0      	mov	r8, r4
 8001404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001406:	2a00      	cmp	r2, #0
 8001408:	d100      	bne.n	800140c <__aeabi_dadd+0x150>
 800140a:	e084      	b.n	8001516 <__aeabi_dadd+0x25a>
 800140c:	464a      	mov	r2, r9
 800140e:	1bd2      	subs	r2, r2, r7
 8001410:	2f00      	cmp	r7, #0
 8001412:	d000      	beq.n	8001416 <__aeabi_dadd+0x15a>
 8001414:	e16d      	b.n	80016f2 <__aeabi_dadd+0x436>
 8001416:	0025      	movs	r5, r4
 8001418:	4305      	orrs	r5, r0
 800141a:	d100      	bne.n	800141e <__aeabi_dadd+0x162>
 800141c:	e127      	b.n	800166e <__aeabi_dadd+0x3b2>
 800141e:	1e56      	subs	r6, r2, #1
 8001420:	2a01      	cmp	r2, #1
 8001422:	d100      	bne.n	8001426 <__aeabi_dadd+0x16a>
 8001424:	e23b      	b.n	800189e <__aeabi_dadd+0x5e2>
 8001426:	4d87      	ldr	r5, [pc, #540]	@ (8001644 <__aeabi_dadd+0x388>)
 8001428:	42aa      	cmp	r2, r5
 800142a:	d100      	bne.n	800142e <__aeabi_dadd+0x172>
 800142c:	e26a      	b.n	8001904 <__aeabi_dadd+0x648>
 800142e:	2501      	movs	r5, #1
 8001430:	2e38      	cmp	r6, #56	@ 0x38
 8001432:	dc12      	bgt.n	800145a <__aeabi_dadd+0x19e>
 8001434:	0032      	movs	r2, r6
 8001436:	2a1f      	cmp	r2, #31
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0x180>
 800143a:	e1f8      	b.n	800182e <__aeabi_dadd+0x572>
 800143c:	2620      	movs	r6, #32
 800143e:	0025      	movs	r5, r4
 8001440:	1ab6      	subs	r6, r6, r2
 8001442:	0007      	movs	r7, r0
 8001444:	4653      	mov	r3, sl
 8001446:	40b0      	lsls	r0, r6
 8001448:	40d4      	lsrs	r4, r2
 800144a:	40b5      	lsls	r5, r6
 800144c:	40d7      	lsrs	r7, r2
 800144e:	1e46      	subs	r6, r0, #1
 8001450:	41b0      	sbcs	r0, r6
 8001452:	1b1b      	subs	r3, r3, r4
 8001454:	469a      	mov	sl, r3
 8001456:	433d      	orrs	r5, r7
 8001458:	4305      	orrs	r5, r0
 800145a:	4662      	mov	r2, ip
 800145c:	1b55      	subs	r5, r2, r5
 800145e:	45ac      	cmp	ip, r5
 8001460:	4192      	sbcs	r2, r2
 8001462:	4653      	mov	r3, sl
 8001464:	4252      	negs	r2, r2
 8001466:	000e      	movs	r6, r1
 8001468:	464f      	mov	r7, r9
 800146a:	4688      	mov	r8, r1
 800146c:	1a9c      	subs	r4, r3, r2
 800146e:	e778      	b.n	8001362 <__aeabi_dadd+0xa6>
 8001470:	2a00      	cmp	r2, #0
 8001472:	dc00      	bgt.n	8001476 <__aeabi_dadd+0x1ba>
 8001474:	e08e      	b.n	8001594 <__aeabi_dadd+0x2d8>
 8001476:	4649      	mov	r1, r9
 8001478:	2900      	cmp	r1, #0
 800147a:	d175      	bne.n	8001568 <__aeabi_dadd+0x2ac>
 800147c:	4661      	mov	r1, ip
 800147e:	4653      	mov	r3, sl
 8001480:	4319      	orrs	r1, r3
 8001482:	d100      	bne.n	8001486 <__aeabi_dadd+0x1ca>
 8001484:	e0f6      	b.n	8001674 <__aeabi_dadd+0x3b8>
 8001486:	1e51      	subs	r1, r2, #1
 8001488:	2a01      	cmp	r2, #1
 800148a:	d100      	bne.n	800148e <__aeabi_dadd+0x1d2>
 800148c:	e191      	b.n	80017b2 <__aeabi_dadd+0x4f6>
 800148e:	4d6d      	ldr	r5, [pc, #436]	@ (8001644 <__aeabi_dadd+0x388>)
 8001490:	42aa      	cmp	r2, r5
 8001492:	d100      	bne.n	8001496 <__aeabi_dadd+0x1da>
 8001494:	e0dc      	b.n	8001650 <__aeabi_dadd+0x394>
 8001496:	2501      	movs	r5, #1
 8001498:	2938      	cmp	r1, #56	@ 0x38
 800149a:	dc14      	bgt.n	80014c6 <__aeabi_dadd+0x20a>
 800149c:	000a      	movs	r2, r1
 800149e:	2a1f      	cmp	r2, #31
 80014a0:	dd00      	ble.n	80014a4 <__aeabi_dadd+0x1e8>
 80014a2:	e1a2      	b.n	80017ea <__aeabi_dadd+0x52e>
 80014a4:	2120      	movs	r1, #32
 80014a6:	4653      	mov	r3, sl
 80014a8:	1a89      	subs	r1, r1, r2
 80014aa:	408b      	lsls	r3, r1
 80014ac:	001d      	movs	r5, r3
 80014ae:	4663      	mov	r3, ip
 80014b0:	40d3      	lsrs	r3, r2
 80014b2:	431d      	orrs	r5, r3
 80014b4:	4663      	mov	r3, ip
 80014b6:	408b      	lsls	r3, r1
 80014b8:	0019      	movs	r1, r3
 80014ba:	1e4b      	subs	r3, r1, #1
 80014bc:	4199      	sbcs	r1, r3
 80014be:	4653      	mov	r3, sl
 80014c0:	40d3      	lsrs	r3, r2
 80014c2:	430d      	orrs	r5, r1
 80014c4:	18e4      	adds	r4, r4, r3
 80014c6:	182d      	adds	r5, r5, r0
 80014c8:	4285      	cmp	r5, r0
 80014ca:	4180      	sbcs	r0, r0
 80014cc:	4240      	negs	r0, r0
 80014ce:	1824      	adds	r4, r4, r0
 80014d0:	0223      	lsls	r3, r4, #8
 80014d2:	d559      	bpl.n	8001588 <__aeabi_dadd+0x2cc>
 80014d4:	4b5b      	ldr	r3, [pc, #364]	@ (8001644 <__aeabi_dadd+0x388>)
 80014d6:	3701      	adds	r7, #1
 80014d8:	429f      	cmp	r7, r3
 80014da:	d051      	beq.n	8001580 <__aeabi_dadd+0x2c4>
 80014dc:	2101      	movs	r1, #1
 80014de:	4b5a      	ldr	r3, [pc, #360]	@ (8001648 <__aeabi_dadd+0x38c>)
 80014e0:	086a      	lsrs	r2, r5, #1
 80014e2:	401c      	ands	r4, r3
 80014e4:	4029      	ands	r1, r5
 80014e6:	430a      	orrs	r2, r1
 80014e8:	07e5      	lsls	r5, r4, #31
 80014ea:	4315      	orrs	r5, r2
 80014ec:	0864      	lsrs	r4, r4, #1
 80014ee:	e75f      	b.n	80013b0 <__aeabi_dadd+0xf4>
 80014f0:	4661      	mov	r1, ip
 80014f2:	4653      	mov	r3, sl
 80014f4:	4319      	orrs	r1, r3
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x23e>
 80014f8:	e0bc      	b.n	8001674 <__aeabi_dadd+0x3b8>
 80014fa:	1e51      	subs	r1, r2, #1
 80014fc:	2a01      	cmp	r2, #1
 80014fe:	d100      	bne.n	8001502 <__aeabi_dadd+0x246>
 8001500:	e164      	b.n	80017cc <__aeabi_dadd+0x510>
 8001502:	4d50      	ldr	r5, [pc, #320]	@ (8001644 <__aeabi_dadd+0x388>)
 8001504:	42aa      	cmp	r2, r5
 8001506:	d100      	bne.n	800150a <__aeabi_dadd+0x24e>
 8001508:	e16a      	b.n	80017e0 <__aeabi_dadd+0x524>
 800150a:	2501      	movs	r5, #1
 800150c:	2938      	cmp	r1, #56	@ 0x38
 800150e:	dd00      	ble.n	8001512 <__aeabi_dadd+0x256>
 8001510:	e722      	b.n	8001358 <__aeabi_dadd+0x9c>
 8001512:	000a      	movs	r2, r1
 8001514:	e70e      	b.n	8001334 <__aeabi_dadd+0x78>
 8001516:	4a4d      	ldr	r2, [pc, #308]	@ (800164c <__aeabi_dadd+0x390>)
 8001518:	1c7d      	adds	r5, r7, #1
 800151a:	4215      	tst	r5, r2
 800151c:	d000      	beq.n	8001520 <__aeabi_dadd+0x264>
 800151e:	e0d0      	b.n	80016c2 <__aeabi_dadd+0x406>
 8001520:	0025      	movs	r5, r4
 8001522:	4662      	mov	r2, ip
 8001524:	4653      	mov	r3, sl
 8001526:	4305      	orrs	r5, r0
 8001528:	431a      	orrs	r2, r3
 800152a:	2f00      	cmp	r7, #0
 800152c:	d000      	beq.n	8001530 <__aeabi_dadd+0x274>
 800152e:	e137      	b.n	80017a0 <__aeabi_dadd+0x4e4>
 8001530:	2d00      	cmp	r5, #0
 8001532:	d100      	bne.n	8001536 <__aeabi_dadd+0x27a>
 8001534:	e1a8      	b.n	8001888 <__aeabi_dadd+0x5cc>
 8001536:	2a00      	cmp	r2, #0
 8001538:	d100      	bne.n	800153c <__aeabi_dadd+0x280>
 800153a:	e16a      	b.n	8001812 <__aeabi_dadd+0x556>
 800153c:	4663      	mov	r3, ip
 800153e:	1ac5      	subs	r5, r0, r3
 8001540:	4653      	mov	r3, sl
 8001542:	1ae2      	subs	r2, r4, r3
 8001544:	42a8      	cmp	r0, r5
 8001546:	419b      	sbcs	r3, r3
 8001548:	425b      	negs	r3, r3
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	021a      	lsls	r2, r3, #8
 800154e:	d400      	bmi.n	8001552 <__aeabi_dadd+0x296>
 8001550:	e203      	b.n	800195a <__aeabi_dadd+0x69e>
 8001552:	4663      	mov	r3, ip
 8001554:	1a1d      	subs	r5, r3, r0
 8001556:	45ac      	cmp	ip, r5
 8001558:	4192      	sbcs	r2, r2
 800155a:	4653      	mov	r3, sl
 800155c:	4252      	negs	r2, r2
 800155e:	1b1c      	subs	r4, r3, r4
 8001560:	000e      	movs	r6, r1
 8001562:	4688      	mov	r8, r1
 8001564:	1aa4      	subs	r4, r4, r2
 8001566:	e723      	b.n	80013b0 <__aeabi_dadd+0xf4>
 8001568:	4936      	ldr	r1, [pc, #216]	@ (8001644 <__aeabi_dadd+0x388>)
 800156a:	428f      	cmp	r7, r1
 800156c:	d070      	beq.n	8001650 <__aeabi_dadd+0x394>
 800156e:	2501      	movs	r5, #1
 8001570:	2a38      	cmp	r2, #56	@ 0x38
 8001572:	dca8      	bgt.n	80014c6 <__aeabi_dadd+0x20a>
 8001574:	2180      	movs	r1, #128	@ 0x80
 8001576:	4653      	mov	r3, sl
 8001578:	0409      	lsls	r1, r1, #16
 800157a:	430b      	orrs	r3, r1
 800157c:	469a      	mov	sl, r3
 800157e:	e78e      	b.n	800149e <__aeabi_dadd+0x1e2>
 8001580:	003c      	movs	r4, r7
 8001582:	2500      	movs	r5, #0
 8001584:	2200      	movs	r2, #0
 8001586:	e731      	b.n	80013ec <__aeabi_dadd+0x130>
 8001588:	2307      	movs	r3, #7
 800158a:	402b      	ands	r3, r5
 800158c:	2b00      	cmp	r3, #0
 800158e:	d000      	beq.n	8001592 <__aeabi_dadd+0x2d6>
 8001590:	e710      	b.n	80013b4 <__aeabi_dadd+0xf8>
 8001592:	e093      	b.n	80016bc <__aeabi_dadd+0x400>
 8001594:	2a00      	cmp	r2, #0
 8001596:	d074      	beq.n	8001682 <__aeabi_dadd+0x3c6>
 8001598:	464a      	mov	r2, r9
 800159a:	1bd2      	subs	r2, r2, r7
 800159c:	2f00      	cmp	r7, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_dadd+0x2e6>
 80015a0:	e0c7      	b.n	8001732 <__aeabi_dadd+0x476>
 80015a2:	4928      	ldr	r1, [pc, #160]	@ (8001644 <__aeabi_dadd+0x388>)
 80015a4:	4589      	cmp	r9, r1
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x2ee>
 80015a8:	e185      	b.n	80018b6 <__aeabi_dadd+0x5fa>
 80015aa:	2501      	movs	r5, #1
 80015ac:	2a38      	cmp	r2, #56	@ 0x38
 80015ae:	dc12      	bgt.n	80015d6 <__aeabi_dadd+0x31a>
 80015b0:	2180      	movs	r1, #128	@ 0x80
 80015b2:	0409      	lsls	r1, r1, #16
 80015b4:	430c      	orrs	r4, r1
 80015b6:	2a1f      	cmp	r2, #31
 80015b8:	dd00      	ble.n	80015bc <__aeabi_dadd+0x300>
 80015ba:	e1ab      	b.n	8001914 <__aeabi_dadd+0x658>
 80015bc:	2120      	movs	r1, #32
 80015be:	0025      	movs	r5, r4
 80015c0:	1a89      	subs	r1, r1, r2
 80015c2:	0007      	movs	r7, r0
 80015c4:	4088      	lsls	r0, r1
 80015c6:	408d      	lsls	r5, r1
 80015c8:	40d7      	lsrs	r7, r2
 80015ca:	1e41      	subs	r1, r0, #1
 80015cc:	4188      	sbcs	r0, r1
 80015ce:	40d4      	lsrs	r4, r2
 80015d0:	433d      	orrs	r5, r7
 80015d2:	4305      	orrs	r5, r0
 80015d4:	44a2      	add	sl, r4
 80015d6:	4465      	add	r5, ip
 80015d8:	4565      	cmp	r5, ip
 80015da:	4192      	sbcs	r2, r2
 80015dc:	4252      	negs	r2, r2
 80015de:	4452      	add	r2, sl
 80015e0:	0014      	movs	r4, r2
 80015e2:	464f      	mov	r7, r9
 80015e4:	e774      	b.n	80014d0 <__aeabi_dadd+0x214>
 80015e6:	0028      	movs	r0, r5
 80015e8:	f001 fdcc 	bl	8003184 <__clzsi2>
 80015ec:	0003      	movs	r3, r0
 80015ee:	3318      	adds	r3, #24
 80015f0:	2b1f      	cmp	r3, #31
 80015f2:	dc00      	bgt.n	80015f6 <__aeabi_dadd+0x33a>
 80015f4:	e6c2      	b.n	800137c <__aeabi_dadd+0xc0>
 80015f6:	002a      	movs	r2, r5
 80015f8:	3808      	subs	r0, #8
 80015fa:	4082      	lsls	r2, r0
 80015fc:	429f      	cmp	r7, r3
 80015fe:	dd00      	ble.n	8001602 <__aeabi_dadd+0x346>
 8001600:	e0a9      	b.n	8001756 <__aeabi_dadd+0x49a>
 8001602:	1bdb      	subs	r3, r3, r7
 8001604:	1c58      	adds	r0, r3, #1
 8001606:	281f      	cmp	r0, #31
 8001608:	dc00      	bgt.n	800160c <__aeabi_dadd+0x350>
 800160a:	e1ac      	b.n	8001966 <__aeabi_dadd+0x6aa>
 800160c:	0015      	movs	r5, r2
 800160e:	3b1f      	subs	r3, #31
 8001610:	40dd      	lsrs	r5, r3
 8001612:	2820      	cmp	r0, #32
 8001614:	d005      	beq.n	8001622 <__aeabi_dadd+0x366>
 8001616:	2340      	movs	r3, #64	@ 0x40
 8001618:	1a1b      	subs	r3, r3, r0
 800161a:	409a      	lsls	r2, r3
 800161c:	1e53      	subs	r3, r2, #1
 800161e:	419a      	sbcs	r2, r3
 8001620:	4315      	orrs	r5, r2
 8001622:	2307      	movs	r3, #7
 8001624:	2700      	movs	r7, #0
 8001626:	402b      	ands	r3, r5
 8001628:	e7b0      	b.n	800158c <__aeabi_dadd+0x2d0>
 800162a:	08ed      	lsrs	r5, r5, #3
 800162c:	4b05      	ldr	r3, [pc, #20]	@ (8001644 <__aeabi_dadd+0x388>)
 800162e:	0762      	lsls	r2, r4, #29
 8001630:	432a      	orrs	r2, r5
 8001632:	08e4      	lsrs	r4, r4, #3
 8001634:	429f      	cmp	r7, r3
 8001636:	d00f      	beq.n	8001658 <__aeabi_dadd+0x39c>
 8001638:	0324      	lsls	r4, r4, #12
 800163a:	0b25      	lsrs	r5, r4, #12
 800163c:	057c      	lsls	r4, r7, #21
 800163e:	0d64      	lsrs	r4, r4, #21
 8001640:	e6d4      	b.n	80013ec <__aeabi_dadd+0x130>
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	000007ff 	.word	0x000007ff
 8001648:	ff7fffff 	.word	0xff7fffff
 800164c:	000007fe 	.word	0x000007fe
 8001650:	08c0      	lsrs	r0, r0, #3
 8001652:	0762      	lsls	r2, r4, #29
 8001654:	4302      	orrs	r2, r0
 8001656:	08e4      	lsrs	r4, r4, #3
 8001658:	0013      	movs	r3, r2
 800165a:	4323      	orrs	r3, r4
 800165c:	d100      	bne.n	8001660 <__aeabi_dadd+0x3a4>
 800165e:	e186      	b.n	800196e <__aeabi_dadd+0x6b2>
 8001660:	2580      	movs	r5, #128	@ 0x80
 8001662:	032d      	lsls	r5, r5, #12
 8001664:	4325      	orrs	r5, r4
 8001666:	032d      	lsls	r5, r5, #12
 8001668:	4cc3      	ldr	r4, [pc, #780]	@ (8001978 <__aeabi_dadd+0x6bc>)
 800166a:	0b2d      	lsrs	r5, r5, #12
 800166c:	e6be      	b.n	80013ec <__aeabi_dadd+0x130>
 800166e:	4660      	mov	r0, ip
 8001670:	4654      	mov	r4, sl
 8001672:	000e      	movs	r6, r1
 8001674:	0017      	movs	r7, r2
 8001676:	08c5      	lsrs	r5, r0, #3
 8001678:	e7d8      	b.n	800162c <__aeabi_dadd+0x370>
 800167a:	4cc0      	ldr	r4, [pc, #768]	@ (800197c <__aeabi_dadd+0x6c0>)
 800167c:	1aff      	subs	r7, r7, r3
 800167e:	4014      	ands	r4, r2
 8001680:	e696      	b.n	80013b0 <__aeabi_dadd+0xf4>
 8001682:	4abf      	ldr	r2, [pc, #764]	@ (8001980 <__aeabi_dadd+0x6c4>)
 8001684:	1c79      	adds	r1, r7, #1
 8001686:	4211      	tst	r1, r2
 8001688:	d16b      	bne.n	8001762 <__aeabi_dadd+0x4a6>
 800168a:	0022      	movs	r2, r4
 800168c:	4302      	orrs	r2, r0
 800168e:	2f00      	cmp	r7, #0
 8001690:	d000      	beq.n	8001694 <__aeabi_dadd+0x3d8>
 8001692:	e0db      	b.n	800184c <__aeabi_dadd+0x590>
 8001694:	2a00      	cmp	r2, #0
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x3de>
 8001698:	e12d      	b.n	80018f6 <__aeabi_dadd+0x63a>
 800169a:	4662      	mov	r2, ip
 800169c:	4653      	mov	r3, sl
 800169e:	431a      	orrs	r2, r3
 80016a0:	d100      	bne.n	80016a4 <__aeabi_dadd+0x3e8>
 80016a2:	e0b6      	b.n	8001812 <__aeabi_dadd+0x556>
 80016a4:	4663      	mov	r3, ip
 80016a6:	18c5      	adds	r5, r0, r3
 80016a8:	4285      	cmp	r5, r0
 80016aa:	4180      	sbcs	r0, r0
 80016ac:	4454      	add	r4, sl
 80016ae:	4240      	negs	r0, r0
 80016b0:	1824      	adds	r4, r4, r0
 80016b2:	0223      	lsls	r3, r4, #8
 80016b4:	d502      	bpl.n	80016bc <__aeabi_dadd+0x400>
 80016b6:	000f      	movs	r7, r1
 80016b8:	4bb0      	ldr	r3, [pc, #704]	@ (800197c <__aeabi_dadd+0x6c0>)
 80016ba:	401c      	ands	r4, r3
 80016bc:	003a      	movs	r2, r7
 80016be:	0028      	movs	r0, r5
 80016c0:	e7d8      	b.n	8001674 <__aeabi_dadd+0x3b8>
 80016c2:	4662      	mov	r2, ip
 80016c4:	1a85      	subs	r5, r0, r2
 80016c6:	42a8      	cmp	r0, r5
 80016c8:	4192      	sbcs	r2, r2
 80016ca:	4653      	mov	r3, sl
 80016cc:	4252      	negs	r2, r2
 80016ce:	4691      	mov	r9, r2
 80016d0:	1ae3      	subs	r3, r4, r3
 80016d2:	001a      	movs	r2, r3
 80016d4:	464b      	mov	r3, r9
 80016d6:	1ad2      	subs	r2, r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	4691      	mov	r9, r2
 80016dc:	021a      	lsls	r2, r3, #8
 80016de:	d454      	bmi.n	800178a <__aeabi_dadd+0x4ce>
 80016e0:	464a      	mov	r2, r9
 80016e2:	464c      	mov	r4, r9
 80016e4:	432a      	orrs	r2, r5
 80016e6:	d000      	beq.n	80016ea <__aeabi_dadd+0x42e>
 80016e8:	e640      	b.n	800136c <__aeabi_dadd+0xb0>
 80016ea:	2600      	movs	r6, #0
 80016ec:	2400      	movs	r4, #0
 80016ee:	2500      	movs	r5, #0
 80016f0:	e67c      	b.n	80013ec <__aeabi_dadd+0x130>
 80016f2:	4da1      	ldr	r5, [pc, #644]	@ (8001978 <__aeabi_dadd+0x6bc>)
 80016f4:	45a9      	cmp	r9, r5
 80016f6:	d100      	bne.n	80016fa <__aeabi_dadd+0x43e>
 80016f8:	e090      	b.n	800181c <__aeabi_dadd+0x560>
 80016fa:	2501      	movs	r5, #1
 80016fc:	2a38      	cmp	r2, #56	@ 0x38
 80016fe:	dd00      	ble.n	8001702 <__aeabi_dadd+0x446>
 8001700:	e6ab      	b.n	800145a <__aeabi_dadd+0x19e>
 8001702:	2580      	movs	r5, #128	@ 0x80
 8001704:	042d      	lsls	r5, r5, #16
 8001706:	432c      	orrs	r4, r5
 8001708:	e695      	b.n	8001436 <__aeabi_dadd+0x17a>
 800170a:	0011      	movs	r1, r2
 800170c:	4655      	mov	r5, sl
 800170e:	3920      	subs	r1, #32
 8001710:	40cd      	lsrs	r5, r1
 8001712:	46a9      	mov	r9, r5
 8001714:	2a20      	cmp	r2, #32
 8001716:	d006      	beq.n	8001726 <__aeabi_dadd+0x46a>
 8001718:	2140      	movs	r1, #64	@ 0x40
 800171a:	4653      	mov	r3, sl
 800171c:	1a8a      	subs	r2, r1, r2
 800171e:	4093      	lsls	r3, r2
 8001720:	4662      	mov	r2, ip
 8001722:	431a      	orrs	r2, r3
 8001724:	4694      	mov	ip, r2
 8001726:	4665      	mov	r5, ip
 8001728:	1e6b      	subs	r3, r5, #1
 800172a:	419d      	sbcs	r5, r3
 800172c:	464b      	mov	r3, r9
 800172e:	431d      	orrs	r5, r3
 8001730:	e612      	b.n	8001358 <__aeabi_dadd+0x9c>
 8001732:	0021      	movs	r1, r4
 8001734:	4301      	orrs	r1, r0
 8001736:	d100      	bne.n	800173a <__aeabi_dadd+0x47e>
 8001738:	e0c4      	b.n	80018c4 <__aeabi_dadd+0x608>
 800173a:	1e51      	subs	r1, r2, #1
 800173c:	2a01      	cmp	r2, #1
 800173e:	d100      	bne.n	8001742 <__aeabi_dadd+0x486>
 8001740:	e0fb      	b.n	800193a <__aeabi_dadd+0x67e>
 8001742:	4d8d      	ldr	r5, [pc, #564]	@ (8001978 <__aeabi_dadd+0x6bc>)
 8001744:	42aa      	cmp	r2, r5
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x48e>
 8001748:	e0b5      	b.n	80018b6 <__aeabi_dadd+0x5fa>
 800174a:	2501      	movs	r5, #1
 800174c:	2938      	cmp	r1, #56	@ 0x38
 800174e:	dd00      	ble.n	8001752 <__aeabi_dadd+0x496>
 8001750:	e741      	b.n	80015d6 <__aeabi_dadd+0x31a>
 8001752:	000a      	movs	r2, r1
 8001754:	e72f      	b.n	80015b6 <__aeabi_dadd+0x2fa>
 8001756:	4c89      	ldr	r4, [pc, #548]	@ (800197c <__aeabi_dadd+0x6c0>)
 8001758:	1aff      	subs	r7, r7, r3
 800175a:	4014      	ands	r4, r2
 800175c:	0762      	lsls	r2, r4, #29
 800175e:	08e4      	lsrs	r4, r4, #3
 8001760:	e76a      	b.n	8001638 <__aeabi_dadd+0x37c>
 8001762:	4a85      	ldr	r2, [pc, #532]	@ (8001978 <__aeabi_dadd+0x6bc>)
 8001764:	4291      	cmp	r1, r2
 8001766:	d100      	bne.n	800176a <__aeabi_dadd+0x4ae>
 8001768:	e0e3      	b.n	8001932 <__aeabi_dadd+0x676>
 800176a:	4663      	mov	r3, ip
 800176c:	18c2      	adds	r2, r0, r3
 800176e:	4282      	cmp	r2, r0
 8001770:	4180      	sbcs	r0, r0
 8001772:	0023      	movs	r3, r4
 8001774:	4240      	negs	r0, r0
 8001776:	4453      	add	r3, sl
 8001778:	181b      	adds	r3, r3, r0
 800177a:	07dd      	lsls	r5, r3, #31
 800177c:	085c      	lsrs	r4, r3, #1
 800177e:	2307      	movs	r3, #7
 8001780:	0852      	lsrs	r2, r2, #1
 8001782:	4315      	orrs	r5, r2
 8001784:	000f      	movs	r7, r1
 8001786:	402b      	ands	r3, r5
 8001788:	e700      	b.n	800158c <__aeabi_dadd+0x2d0>
 800178a:	4663      	mov	r3, ip
 800178c:	1a1d      	subs	r5, r3, r0
 800178e:	45ac      	cmp	ip, r5
 8001790:	4192      	sbcs	r2, r2
 8001792:	4653      	mov	r3, sl
 8001794:	4252      	negs	r2, r2
 8001796:	1b1c      	subs	r4, r3, r4
 8001798:	000e      	movs	r6, r1
 800179a:	4688      	mov	r8, r1
 800179c:	1aa4      	subs	r4, r4, r2
 800179e:	e5e5      	b.n	800136c <__aeabi_dadd+0xb0>
 80017a0:	2d00      	cmp	r5, #0
 80017a2:	d000      	beq.n	80017a6 <__aeabi_dadd+0x4ea>
 80017a4:	e091      	b.n	80018ca <__aeabi_dadd+0x60e>
 80017a6:	2a00      	cmp	r2, #0
 80017a8:	d138      	bne.n	800181c <__aeabi_dadd+0x560>
 80017aa:	2480      	movs	r4, #128	@ 0x80
 80017ac:	2600      	movs	r6, #0
 80017ae:	0324      	lsls	r4, r4, #12
 80017b0:	e756      	b.n	8001660 <__aeabi_dadd+0x3a4>
 80017b2:	4663      	mov	r3, ip
 80017b4:	18c5      	adds	r5, r0, r3
 80017b6:	4285      	cmp	r5, r0
 80017b8:	4180      	sbcs	r0, r0
 80017ba:	4454      	add	r4, sl
 80017bc:	4240      	negs	r0, r0
 80017be:	1824      	adds	r4, r4, r0
 80017c0:	2701      	movs	r7, #1
 80017c2:	0223      	lsls	r3, r4, #8
 80017c4:	d400      	bmi.n	80017c8 <__aeabi_dadd+0x50c>
 80017c6:	e6df      	b.n	8001588 <__aeabi_dadd+0x2cc>
 80017c8:	2702      	movs	r7, #2
 80017ca:	e687      	b.n	80014dc <__aeabi_dadd+0x220>
 80017cc:	4663      	mov	r3, ip
 80017ce:	1ac5      	subs	r5, r0, r3
 80017d0:	42a8      	cmp	r0, r5
 80017d2:	4180      	sbcs	r0, r0
 80017d4:	4653      	mov	r3, sl
 80017d6:	4240      	negs	r0, r0
 80017d8:	1ae4      	subs	r4, r4, r3
 80017da:	2701      	movs	r7, #1
 80017dc:	1a24      	subs	r4, r4, r0
 80017de:	e5c0      	b.n	8001362 <__aeabi_dadd+0xa6>
 80017e0:	0762      	lsls	r2, r4, #29
 80017e2:	08c0      	lsrs	r0, r0, #3
 80017e4:	4302      	orrs	r2, r0
 80017e6:	08e4      	lsrs	r4, r4, #3
 80017e8:	e736      	b.n	8001658 <__aeabi_dadd+0x39c>
 80017ea:	0011      	movs	r1, r2
 80017ec:	4653      	mov	r3, sl
 80017ee:	3920      	subs	r1, #32
 80017f0:	40cb      	lsrs	r3, r1
 80017f2:	4699      	mov	r9, r3
 80017f4:	2a20      	cmp	r2, #32
 80017f6:	d006      	beq.n	8001806 <__aeabi_dadd+0x54a>
 80017f8:	2140      	movs	r1, #64	@ 0x40
 80017fa:	4653      	mov	r3, sl
 80017fc:	1a8a      	subs	r2, r1, r2
 80017fe:	4093      	lsls	r3, r2
 8001800:	4662      	mov	r2, ip
 8001802:	431a      	orrs	r2, r3
 8001804:	4694      	mov	ip, r2
 8001806:	4665      	mov	r5, ip
 8001808:	1e6b      	subs	r3, r5, #1
 800180a:	419d      	sbcs	r5, r3
 800180c:	464b      	mov	r3, r9
 800180e:	431d      	orrs	r5, r3
 8001810:	e659      	b.n	80014c6 <__aeabi_dadd+0x20a>
 8001812:	0762      	lsls	r2, r4, #29
 8001814:	08c0      	lsrs	r0, r0, #3
 8001816:	4302      	orrs	r2, r0
 8001818:	08e4      	lsrs	r4, r4, #3
 800181a:	e70d      	b.n	8001638 <__aeabi_dadd+0x37c>
 800181c:	4653      	mov	r3, sl
 800181e:	075a      	lsls	r2, r3, #29
 8001820:	4663      	mov	r3, ip
 8001822:	08d8      	lsrs	r0, r3, #3
 8001824:	4653      	mov	r3, sl
 8001826:	000e      	movs	r6, r1
 8001828:	4302      	orrs	r2, r0
 800182a:	08dc      	lsrs	r4, r3, #3
 800182c:	e714      	b.n	8001658 <__aeabi_dadd+0x39c>
 800182e:	0015      	movs	r5, r2
 8001830:	0026      	movs	r6, r4
 8001832:	3d20      	subs	r5, #32
 8001834:	40ee      	lsrs	r6, r5
 8001836:	2a20      	cmp	r2, #32
 8001838:	d003      	beq.n	8001842 <__aeabi_dadd+0x586>
 800183a:	2540      	movs	r5, #64	@ 0x40
 800183c:	1aaa      	subs	r2, r5, r2
 800183e:	4094      	lsls	r4, r2
 8001840:	4320      	orrs	r0, r4
 8001842:	1e42      	subs	r2, r0, #1
 8001844:	4190      	sbcs	r0, r2
 8001846:	0005      	movs	r5, r0
 8001848:	4335      	orrs	r5, r6
 800184a:	e606      	b.n	800145a <__aeabi_dadd+0x19e>
 800184c:	2a00      	cmp	r2, #0
 800184e:	d07c      	beq.n	800194a <__aeabi_dadd+0x68e>
 8001850:	4662      	mov	r2, ip
 8001852:	4653      	mov	r3, sl
 8001854:	08c0      	lsrs	r0, r0, #3
 8001856:	431a      	orrs	r2, r3
 8001858:	d100      	bne.n	800185c <__aeabi_dadd+0x5a0>
 800185a:	e6fa      	b.n	8001652 <__aeabi_dadd+0x396>
 800185c:	0762      	lsls	r2, r4, #29
 800185e:	4310      	orrs	r0, r2
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	08e4      	lsrs	r4, r4, #3
 8001864:	0312      	lsls	r2, r2, #12
 8001866:	4214      	tst	r4, r2
 8001868:	d008      	beq.n	800187c <__aeabi_dadd+0x5c0>
 800186a:	08d9      	lsrs	r1, r3, #3
 800186c:	4211      	tst	r1, r2
 800186e:	d105      	bne.n	800187c <__aeabi_dadd+0x5c0>
 8001870:	4663      	mov	r3, ip
 8001872:	08d8      	lsrs	r0, r3, #3
 8001874:	4653      	mov	r3, sl
 8001876:	000c      	movs	r4, r1
 8001878:	075b      	lsls	r3, r3, #29
 800187a:	4318      	orrs	r0, r3
 800187c:	0f42      	lsrs	r2, r0, #29
 800187e:	00c0      	lsls	r0, r0, #3
 8001880:	08c0      	lsrs	r0, r0, #3
 8001882:	0752      	lsls	r2, r2, #29
 8001884:	4302      	orrs	r2, r0
 8001886:	e6e7      	b.n	8001658 <__aeabi_dadd+0x39c>
 8001888:	2a00      	cmp	r2, #0
 800188a:	d100      	bne.n	800188e <__aeabi_dadd+0x5d2>
 800188c:	e72d      	b.n	80016ea <__aeabi_dadd+0x42e>
 800188e:	4663      	mov	r3, ip
 8001890:	08d8      	lsrs	r0, r3, #3
 8001892:	4653      	mov	r3, sl
 8001894:	075a      	lsls	r2, r3, #29
 8001896:	000e      	movs	r6, r1
 8001898:	4302      	orrs	r2, r0
 800189a:	08dc      	lsrs	r4, r3, #3
 800189c:	e6cc      	b.n	8001638 <__aeabi_dadd+0x37c>
 800189e:	4663      	mov	r3, ip
 80018a0:	1a1d      	subs	r5, r3, r0
 80018a2:	45ac      	cmp	ip, r5
 80018a4:	4192      	sbcs	r2, r2
 80018a6:	4653      	mov	r3, sl
 80018a8:	4252      	negs	r2, r2
 80018aa:	1b1c      	subs	r4, r3, r4
 80018ac:	000e      	movs	r6, r1
 80018ae:	4688      	mov	r8, r1
 80018b0:	1aa4      	subs	r4, r4, r2
 80018b2:	3701      	adds	r7, #1
 80018b4:	e555      	b.n	8001362 <__aeabi_dadd+0xa6>
 80018b6:	4663      	mov	r3, ip
 80018b8:	08d9      	lsrs	r1, r3, #3
 80018ba:	4653      	mov	r3, sl
 80018bc:	075a      	lsls	r2, r3, #29
 80018be:	430a      	orrs	r2, r1
 80018c0:	08dc      	lsrs	r4, r3, #3
 80018c2:	e6c9      	b.n	8001658 <__aeabi_dadd+0x39c>
 80018c4:	4660      	mov	r0, ip
 80018c6:	4654      	mov	r4, sl
 80018c8:	e6d4      	b.n	8001674 <__aeabi_dadd+0x3b8>
 80018ca:	08c0      	lsrs	r0, r0, #3
 80018cc:	2a00      	cmp	r2, #0
 80018ce:	d100      	bne.n	80018d2 <__aeabi_dadd+0x616>
 80018d0:	e6bf      	b.n	8001652 <__aeabi_dadd+0x396>
 80018d2:	0762      	lsls	r2, r4, #29
 80018d4:	4310      	orrs	r0, r2
 80018d6:	2280      	movs	r2, #128	@ 0x80
 80018d8:	08e4      	lsrs	r4, r4, #3
 80018da:	0312      	lsls	r2, r2, #12
 80018dc:	4214      	tst	r4, r2
 80018de:	d0cd      	beq.n	800187c <__aeabi_dadd+0x5c0>
 80018e0:	08dd      	lsrs	r5, r3, #3
 80018e2:	4215      	tst	r5, r2
 80018e4:	d1ca      	bne.n	800187c <__aeabi_dadd+0x5c0>
 80018e6:	4663      	mov	r3, ip
 80018e8:	08d8      	lsrs	r0, r3, #3
 80018ea:	4653      	mov	r3, sl
 80018ec:	075b      	lsls	r3, r3, #29
 80018ee:	000e      	movs	r6, r1
 80018f0:	002c      	movs	r4, r5
 80018f2:	4318      	orrs	r0, r3
 80018f4:	e7c2      	b.n	800187c <__aeabi_dadd+0x5c0>
 80018f6:	4663      	mov	r3, ip
 80018f8:	08d9      	lsrs	r1, r3, #3
 80018fa:	4653      	mov	r3, sl
 80018fc:	075a      	lsls	r2, r3, #29
 80018fe:	430a      	orrs	r2, r1
 8001900:	08dc      	lsrs	r4, r3, #3
 8001902:	e699      	b.n	8001638 <__aeabi_dadd+0x37c>
 8001904:	4663      	mov	r3, ip
 8001906:	08d8      	lsrs	r0, r3, #3
 8001908:	4653      	mov	r3, sl
 800190a:	075a      	lsls	r2, r3, #29
 800190c:	000e      	movs	r6, r1
 800190e:	4302      	orrs	r2, r0
 8001910:	08dc      	lsrs	r4, r3, #3
 8001912:	e6a1      	b.n	8001658 <__aeabi_dadd+0x39c>
 8001914:	0011      	movs	r1, r2
 8001916:	0027      	movs	r7, r4
 8001918:	3920      	subs	r1, #32
 800191a:	40cf      	lsrs	r7, r1
 800191c:	2a20      	cmp	r2, #32
 800191e:	d003      	beq.n	8001928 <__aeabi_dadd+0x66c>
 8001920:	2140      	movs	r1, #64	@ 0x40
 8001922:	1a8a      	subs	r2, r1, r2
 8001924:	4094      	lsls	r4, r2
 8001926:	4320      	orrs	r0, r4
 8001928:	1e42      	subs	r2, r0, #1
 800192a:	4190      	sbcs	r0, r2
 800192c:	0005      	movs	r5, r0
 800192e:	433d      	orrs	r5, r7
 8001930:	e651      	b.n	80015d6 <__aeabi_dadd+0x31a>
 8001932:	000c      	movs	r4, r1
 8001934:	2500      	movs	r5, #0
 8001936:	2200      	movs	r2, #0
 8001938:	e558      	b.n	80013ec <__aeabi_dadd+0x130>
 800193a:	4460      	add	r0, ip
 800193c:	4560      	cmp	r0, ip
 800193e:	4192      	sbcs	r2, r2
 8001940:	4454      	add	r4, sl
 8001942:	4252      	negs	r2, r2
 8001944:	0005      	movs	r5, r0
 8001946:	18a4      	adds	r4, r4, r2
 8001948:	e73a      	b.n	80017c0 <__aeabi_dadd+0x504>
 800194a:	4653      	mov	r3, sl
 800194c:	075a      	lsls	r2, r3, #29
 800194e:	4663      	mov	r3, ip
 8001950:	08d9      	lsrs	r1, r3, #3
 8001952:	4653      	mov	r3, sl
 8001954:	430a      	orrs	r2, r1
 8001956:	08dc      	lsrs	r4, r3, #3
 8001958:	e67e      	b.n	8001658 <__aeabi_dadd+0x39c>
 800195a:	001a      	movs	r2, r3
 800195c:	001c      	movs	r4, r3
 800195e:	432a      	orrs	r2, r5
 8001960:	d000      	beq.n	8001964 <__aeabi_dadd+0x6a8>
 8001962:	e6ab      	b.n	80016bc <__aeabi_dadd+0x400>
 8001964:	e6c1      	b.n	80016ea <__aeabi_dadd+0x42e>
 8001966:	2120      	movs	r1, #32
 8001968:	2500      	movs	r5, #0
 800196a:	1a09      	subs	r1, r1, r0
 800196c:	e519      	b.n	80013a2 <__aeabi_dadd+0xe6>
 800196e:	2200      	movs	r2, #0
 8001970:	2500      	movs	r5, #0
 8001972:	4c01      	ldr	r4, [pc, #4]	@ (8001978 <__aeabi_dadd+0x6bc>)
 8001974:	e53a      	b.n	80013ec <__aeabi_dadd+0x130>
 8001976:	46c0      	nop			@ (mov r8, r8)
 8001978:	000007ff 	.word	0x000007ff
 800197c:	ff7fffff 	.word	0xff7fffff
 8001980:	000007fe 	.word	0x000007fe

08001984 <__aeabi_ddiv>:
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001986:	46de      	mov	lr, fp
 8001988:	4645      	mov	r5, r8
 800198a:	4657      	mov	r7, sl
 800198c:	464e      	mov	r6, r9
 800198e:	b5e0      	push	{r5, r6, r7, lr}
 8001990:	b087      	sub	sp, #28
 8001992:	9200      	str	r2, [sp, #0]
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	030b      	lsls	r3, r1, #12
 8001998:	0b1b      	lsrs	r3, r3, #12
 800199a:	469b      	mov	fp, r3
 800199c:	0fca      	lsrs	r2, r1, #31
 800199e:	004b      	lsls	r3, r1, #1
 80019a0:	0004      	movs	r4, r0
 80019a2:	4680      	mov	r8, r0
 80019a4:	0d5b      	lsrs	r3, r3, #21
 80019a6:	9202      	str	r2, [sp, #8]
 80019a8:	d100      	bne.n	80019ac <__aeabi_ddiv+0x28>
 80019aa:	e16a      	b.n	8001c82 <__aeabi_ddiv+0x2fe>
 80019ac:	4ad4      	ldr	r2, [pc, #848]	@ (8001d00 <__aeabi_ddiv+0x37c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d100      	bne.n	80019b4 <__aeabi_ddiv+0x30>
 80019b2:	e18c      	b.n	8001cce <__aeabi_ddiv+0x34a>
 80019b4:	4659      	mov	r1, fp
 80019b6:	0f42      	lsrs	r2, r0, #29
 80019b8:	00c9      	lsls	r1, r1, #3
 80019ba:	430a      	orrs	r2, r1
 80019bc:	2180      	movs	r1, #128	@ 0x80
 80019be:	0409      	lsls	r1, r1, #16
 80019c0:	4311      	orrs	r1, r2
 80019c2:	00c2      	lsls	r2, r0, #3
 80019c4:	4690      	mov	r8, r2
 80019c6:	4acf      	ldr	r2, [pc, #828]	@ (8001d04 <__aeabi_ddiv+0x380>)
 80019c8:	4689      	mov	r9, r1
 80019ca:	4692      	mov	sl, r2
 80019cc:	449a      	add	sl, r3
 80019ce:	2300      	movs	r3, #0
 80019d0:	2400      	movs	r4, #0
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	9e00      	ldr	r6, [sp, #0]
 80019d6:	9f01      	ldr	r7, [sp, #4]
 80019d8:	033b      	lsls	r3, r7, #12
 80019da:	0b1b      	lsrs	r3, r3, #12
 80019dc:	469b      	mov	fp, r3
 80019de:	007b      	lsls	r3, r7, #1
 80019e0:	0030      	movs	r0, r6
 80019e2:	0d5b      	lsrs	r3, r3, #21
 80019e4:	0ffd      	lsrs	r5, r7, #31
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d100      	bne.n	80019ec <__aeabi_ddiv+0x68>
 80019ea:	e128      	b.n	8001c3e <__aeabi_ddiv+0x2ba>
 80019ec:	4ac4      	ldr	r2, [pc, #784]	@ (8001d00 <__aeabi_ddiv+0x37c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d100      	bne.n	80019f4 <__aeabi_ddiv+0x70>
 80019f2:	e177      	b.n	8001ce4 <__aeabi_ddiv+0x360>
 80019f4:	4659      	mov	r1, fp
 80019f6:	0f72      	lsrs	r2, r6, #29
 80019f8:	00c9      	lsls	r1, r1, #3
 80019fa:	430a      	orrs	r2, r1
 80019fc:	2180      	movs	r1, #128	@ 0x80
 80019fe:	0409      	lsls	r1, r1, #16
 8001a00:	4311      	orrs	r1, r2
 8001a02:	468b      	mov	fp, r1
 8001a04:	49bf      	ldr	r1, [pc, #764]	@ (8001d04 <__aeabi_ddiv+0x380>)
 8001a06:	00f2      	lsls	r2, r6, #3
 8001a08:	468c      	mov	ip, r1
 8001a0a:	4651      	mov	r1, sl
 8001a0c:	4463      	add	r3, ip
 8001a0e:	1acb      	subs	r3, r1, r3
 8001a10:	469a      	mov	sl, r3
 8001a12:	2300      	movs	r3, #0
 8001a14:	9e02      	ldr	r6, [sp, #8]
 8001a16:	406e      	eors	r6, r5
 8001a18:	2c0f      	cmp	r4, #15
 8001a1a:	d827      	bhi.n	8001a6c <__aeabi_ddiv+0xe8>
 8001a1c:	49ba      	ldr	r1, [pc, #744]	@ (8001d08 <__aeabi_ddiv+0x384>)
 8001a1e:	00a4      	lsls	r4, r4, #2
 8001a20:	5909      	ldr	r1, [r1, r4]
 8001a22:	468f      	mov	pc, r1
 8001a24:	46cb      	mov	fp, r9
 8001a26:	4642      	mov	r2, r8
 8001a28:	9e02      	ldr	r6, [sp, #8]
 8001a2a:	9b03      	ldr	r3, [sp, #12]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d016      	beq.n	8001a5e <__aeabi_ddiv+0xda>
 8001a30:	2b03      	cmp	r3, #3
 8001a32:	d100      	bne.n	8001a36 <__aeabi_ddiv+0xb2>
 8001a34:	e2a6      	b.n	8001f84 <__aeabi_ddiv+0x600>
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d000      	beq.n	8001a3c <__aeabi_ddiv+0xb8>
 8001a3a:	e0df      	b.n	8001bfc <__aeabi_ddiv+0x278>
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2400      	movs	r4, #0
 8001a42:	4690      	mov	r8, r2
 8001a44:	051b      	lsls	r3, r3, #20
 8001a46:	4323      	orrs	r3, r4
 8001a48:	07f6      	lsls	r6, r6, #31
 8001a4a:	4333      	orrs	r3, r6
 8001a4c:	4640      	mov	r0, r8
 8001a4e:	0019      	movs	r1, r3
 8001a50:	b007      	add	sp, #28
 8001a52:	bcf0      	pop	{r4, r5, r6, r7}
 8001a54:	46bb      	mov	fp, r7
 8001a56:	46b2      	mov	sl, r6
 8001a58:	46a9      	mov	r9, r5
 8001a5a:	46a0      	mov	r8, r4
 8001a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2400      	movs	r4, #0
 8001a62:	4690      	mov	r8, r2
 8001a64:	4ba6      	ldr	r3, [pc, #664]	@ (8001d00 <__aeabi_ddiv+0x37c>)
 8001a66:	e7ed      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001a68:	002e      	movs	r6, r5
 8001a6a:	e7df      	b.n	8001a2c <__aeabi_ddiv+0xa8>
 8001a6c:	45cb      	cmp	fp, r9
 8001a6e:	d200      	bcs.n	8001a72 <__aeabi_ddiv+0xee>
 8001a70:	e1d4      	b.n	8001e1c <__aeabi_ddiv+0x498>
 8001a72:	d100      	bne.n	8001a76 <__aeabi_ddiv+0xf2>
 8001a74:	e1cf      	b.n	8001e16 <__aeabi_ddiv+0x492>
 8001a76:	2301      	movs	r3, #1
 8001a78:	425b      	negs	r3, r3
 8001a7a:	469c      	mov	ip, r3
 8001a7c:	4644      	mov	r4, r8
 8001a7e:	4648      	mov	r0, r9
 8001a80:	2700      	movs	r7, #0
 8001a82:	44e2      	add	sl, ip
 8001a84:	465b      	mov	r3, fp
 8001a86:	0e15      	lsrs	r5, r2, #24
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	431d      	orrs	r5, r3
 8001a8c:	0c19      	lsrs	r1, r3, #16
 8001a8e:	042b      	lsls	r3, r5, #16
 8001a90:	0212      	lsls	r2, r2, #8
 8001a92:	9500      	str	r5, [sp, #0]
 8001a94:	0c1d      	lsrs	r5, r3, #16
 8001a96:	4691      	mov	r9, r2
 8001a98:	9102      	str	r1, [sp, #8]
 8001a9a:	9503      	str	r5, [sp, #12]
 8001a9c:	f7fe fbc4 	bl	8000228 <__aeabi_uidivmod>
 8001aa0:	0002      	movs	r2, r0
 8001aa2:	436a      	muls	r2, r5
 8001aa4:	040b      	lsls	r3, r1, #16
 8001aa6:	0c21      	lsrs	r1, r4, #16
 8001aa8:	4680      	mov	r8, r0
 8001aaa:	4319      	orrs	r1, r3
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d909      	bls.n	8001ac4 <__aeabi_ddiv+0x140>
 8001ab0:	9d00      	ldr	r5, [sp, #0]
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	46ac      	mov	ip, r5
 8001ab6:	425b      	negs	r3, r3
 8001ab8:	4461      	add	r1, ip
 8001aba:	469c      	mov	ip, r3
 8001abc:	44e0      	add	r8, ip
 8001abe:	428d      	cmp	r5, r1
 8001ac0:	d800      	bhi.n	8001ac4 <__aeabi_ddiv+0x140>
 8001ac2:	e1fb      	b.n	8001ebc <__aeabi_ddiv+0x538>
 8001ac4:	1a88      	subs	r0, r1, r2
 8001ac6:	9902      	ldr	r1, [sp, #8]
 8001ac8:	f7fe fbae 	bl	8000228 <__aeabi_uidivmod>
 8001acc:	9a03      	ldr	r2, [sp, #12]
 8001ace:	0424      	lsls	r4, r4, #16
 8001ad0:	4342      	muls	r2, r0
 8001ad2:	0409      	lsls	r1, r1, #16
 8001ad4:	0c24      	lsrs	r4, r4, #16
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	430c      	orrs	r4, r1
 8001ada:	42a2      	cmp	r2, r4
 8001adc:	d906      	bls.n	8001aec <__aeabi_ddiv+0x168>
 8001ade:	9900      	ldr	r1, [sp, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	468c      	mov	ip, r1
 8001ae4:	4464      	add	r4, ip
 8001ae6:	42a1      	cmp	r1, r4
 8001ae8:	d800      	bhi.n	8001aec <__aeabi_ddiv+0x168>
 8001aea:	e1e1      	b.n	8001eb0 <__aeabi_ddiv+0x52c>
 8001aec:	1aa0      	subs	r0, r4, r2
 8001aee:	4642      	mov	r2, r8
 8001af0:	0412      	lsls	r2, r2, #16
 8001af2:	431a      	orrs	r2, r3
 8001af4:	4693      	mov	fp, r2
 8001af6:	464b      	mov	r3, r9
 8001af8:	4659      	mov	r1, fp
 8001afa:	0c1b      	lsrs	r3, r3, #16
 8001afc:	001d      	movs	r5, r3
 8001afe:	9304      	str	r3, [sp, #16]
 8001b00:	040b      	lsls	r3, r1, #16
 8001b02:	4649      	mov	r1, r9
 8001b04:	0409      	lsls	r1, r1, #16
 8001b06:	0c09      	lsrs	r1, r1, #16
 8001b08:	000c      	movs	r4, r1
 8001b0a:	0c1b      	lsrs	r3, r3, #16
 8001b0c:	435c      	muls	r4, r3
 8001b0e:	0c12      	lsrs	r2, r2, #16
 8001b10:	436b      	muls	r3, r5
 8001b12:	4688      	mov	r8, r1
 8001b14:	4351      	muls	r1, r2
 8001b16:	436a      	muls	r2, r5
 8001b18:	0c25      	lsrs	r5, r4, #16
 8001b1a:	46ac      	mov	ip, r5
 8001b1c:	185b      	adds	r3, r3, r1
 8001b1e:	4463      	add	r3, ip
 8001b20:	4299      	cmp	r1, r3
 8001b22:	d903      	bls.n	8001b2c <__aeabi_ddiv+0x1a8>
 8001b24:	2180      	movs	r1, #128	@ 0x80
 8001b26:	0249      	lsls	r1, r1, #9
 8001b28:	468c      	mov	ip, r1
 8001b2a:	4462      	add	r2, ip
 8001b2c:	0c19      	lsrs	r1, r3, #16
 8001b2e:	0424      	lsls	r4, r4, #16
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	0c24      	lsrs	r4, r4, #16
 8001b34:	188a      	adds	r2, r1, r2
 8001b36:	191c      	adds	r4, r3, r4
 8001b38:	4290      	cmp	r0, r2
 8001b3a:	d302      	bcc.n	8001b42 <__aeabi_ddiv+0x1be>
 8001b3c:	d116      	bne.n	8001b6c <__aeabi_ddiv+0x1e8>
 8001b3e:	42a7      	cmp	r7, r4
 8001b40:	d214      	bcs.n	8001b6c <__aeabi_ddiv+0x1e8>
 8001b42:	465b      	mov	r3, fp
 8001b44:	9d00      	ldr	r5, [sp, #0]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	444f      	add	r7, r9
 8001b4a:	9305      	str	r3, [sp, #20]
 8001b4c:	454f      	cmp	r7, r9
 8001b4e:	419b      	sbcs	r3, r3
 8001b50:	46ac      	mov	ip, r5
 8001b52:	425b      	negs	r3, r3
 8001b54:	4463      	add	r3, ip
 8001b56:	18c0      	adds	r0, r0, r3
 8001b58:	4285      	cmp	r5, r0
 8001b5a:	d300      	bcc.n	8001b5e <__aeabi_ddiv+0x1da>
 8001b5c:	e1a1      	b.n	8001ea2 <__aeabi_ddiv+0x51e>
 8001b5e:	4282      	cmp	r2, r0
 8001b60:	d900      	bls.n	8001b64 <__aeabi_ddiv+0x1e0>
 8001b62:	e1f6      	b.n	8001f52 <__aeabi_ddiv+0x5ce>
 8001b64:	d100      	bne.n	8001b68 <__aeabi_ddiv+0x1e4>
 8001b66:	e1f1      	b.n	8001f4c <__aeabi_ddiv+0x5c8>
 8001b68:	9b05      	ldr	r3, [sp, #20]
 8001b6a:	469b      	mov	fp, r3
 8001b6c:	1b3c      	subs	r4, r7, r4
 8001b6e:	42a7      	cmp	r7, r4
 8001b70:	41bf      	sbcs	r7, r7
 8001b72:	9d00      	ldr	r5, [sp, #0]
 8001b74:	1a80      	subs	r0, r0, r2
 8001b76:	427f      	negs	r7, r7
 8001b78:	1bc0      	subs	r0, r0, r7
 8001b7a:	4285      	cmp	r5, r0
 8001b7c:	d100      	bne.n	8001b80 <__aeabi_ddiv+0x1fc>
 8001b7e:	e1d0      	b.n	8001f22 <__aeabi_ddiv+0x59e>
 8001b80:	9902      	ldr	r1, [sp, #8]
 8001b82:	f7fe fb51 	bl	8000228 <__aeabi_uidivmod>
 8001b86:	9a03      	ldr	r2, [sp, #12]
 8001b88:	040b      	lsls	r3, r1, #16
 8001b8a:	4342      	muls	r2, r0
 8001b8c:	0c21      	lsrs	r1, r4, #16
 8001b8e:	0007      	movs	r7, r0
 8001b90:	4319      	orrs	r1, r3
 8001b92:	428a      	cmp	r2, r1
 8001b94:	d900      	bls.n	8001b98 <__aeabi_ddiv+0x214>
 8001b96:	e178      	b.n	8001e8a <__aeabi_ddiv+0x506>
 8001b98:	1a88      	subs	r0, r1, r2
 8001b9a:	9902      	ldr	r1, [sp, #8]
 8001b9c:	f7fe fb44 	bl	8000228 <__aeabi_uidivmod>
 8001ba0:	9a03      	ldr	r2, [sp, #12]
 8001ba2:	0424      	lsls	r4, r4, #16
 8001ba4:	4342      	muls	r2, r0
 8001ba6:	0409      	lsls	r1, r1, #16
 8001ba8:	0c24      	lsrs	r4, r4, #16
 8001baa:	0003      	movs	r3, r0
 8001bac:	430c      	orrs	r4, r1
 8001bae:	42a2      	cmp	r2, r4
 8001bb0:	d900      	bls.n	8001bb4 <__aeabi_ddiv+0x230>
 8001bb2:	e15d      	b.n	8001e70 <__aeabi_ddiv+0x4ec>
 8001bb4:	4641      	mov	r1, r8
 8001bb6:	1aa4      	subs	r4, r4, r2
 8001bb8:	043a      	lsls	r2, r7, #16
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	9d04      	ldr	r5, [sp, #16]
 8001bbe:	0413      	lsls	r3, r2, #16
 8001bc0:	0c1b      	lsrs	r3, r3, #16
 8001bc2:	4359      	muls	r1, r3
 8001bc4:	4647      	mov	r7, r8
 8001bc6:	436b      	muls	r3, r5
 8001bc8:	469c      	mov	ip, r3
 8001bca:	0c10      	lsrs	r0, r2, #16
 8001bcc:	4347      	muls	r7, r0
 8001bce:	0c0b      	lsrs	r3, r1, #16
 8001bd0:	44bc      	add	ip, r7
 8001bd2:	4463      	add	r3, ip
 8001bd4:	4368      	muls	r0, r5
 8001bd6:	429f      	cmp	r7, r3
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_ddiv+0x25e>
 8001bda:	2580      	movs	r5, #128	@ 0x80
 8001bdc:	026d      	lsls	r5, r5, #9
 8001bde:	46ac      	mov	ip, r5
 8001be0:	4460      	add	r0, ip
 8001be2:	0c1f      	lsrs	r7, r3, #16
 8001be4:	0409      	lsls	r1, r1, #16
 8001be6:	041b      	lsls	r3, r3, #16
 8001be8:	0c09      	lsrs	r1, r1, #16
 8001bea:	183f      	adds	r7, r7, r0
 8001bec:	185b      	adds	r3, r3, r1
 8001bee:	42bc      	cmp	r4, r7
 8001bf0:	d200      	bcs.n	8001bf4 <__aeabi_ddiv+0x270>
 8001bf2:	e102      	b.n	8001dfa <__aeabi_ddiv+0x476>
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x274>
 8001bf6:	e0fd      	b.n	8001df4 <__aeabi_ddiv+0x470>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	4b43      	ldr	r3, [pc, #268]	@ (8001d0c <__aeabi_ddiv+0x388>)
 8001bfe:	4453      	add	r3, sl
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dc00      	bgt.n	8001c06 <__aeabi_ddiv+0x282>
 8001c04:	e0ae      	b.n	8001d64 <__aeabi_ddiv+0x3e0>
 8001c06:	0751      	lsls	r1, r2, #29
 8001c08:	d000      	beq.n	8001c0c <__aeabi_ddiv+0x288>
 8001c0a:	e198      	b.n	8001f3e <__aeabi_ddiv+0x5ba>
 8001c0c:	4659      	mov	r1, fp
 8001c0e:	01c9      	lsls	r1, r1, #7
 8001c10:	d506      	bpl.n	8001c20 <__aeabi_ddiv+0x29c>
 8001c12:	4659      	mov	r1, fp
 8001c14:	4b3e      	ldr	r3, [pc, #248]	@ (8001d10 <__aeabi_ddiv+0x38c>)
 8001c16:	4019      	ands	r1, r3
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	468b      	mov	fp, r1
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4453      	add	r3, sl
 8001c20:	493c      	ldr	r1, [pc, #240]	@ (8001d14 <__aeabi_ddiv+0x390>)
 8001c22:	428b      	cmp	r3, r1
 8001c24:	dd00      	ble.n	8001c28 <__aeabi_ddiv+0x2a4>
 8001c26:	e71a      	b.n	8001a5e <__aeabi_ddiv+0xda>
 8001c28:	4659      	mov	r1, fp
 8001c2a:	08d2      	lsrs	r2, r2, #3
 8001c2c:	0749      	lsls	r1, r1, #29
 8001c2e:	4311      	orrs	r1, r2
 8001c30:	465a      	mov	r2, fp
 8001c32:	055b      	lsls	r3, r3, #21
 8001c34:	0254      	lsls	r4, r2, #9
 8001c36:	4688      	mov	r8, r1
 8001c38:	0b24      	lsrs	r4, r4, #12
 8001c3a:	0d5b      	lsrs	r3, r3, #21
 8001c3c:	e702      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001c3e:	465a      	mov	r2, fp
 8001c40:	9b00      	ldr	r3, [sp, #0]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	d100      	bne.n	8001c48 <__aeabi_ddiv+0x2c4>
 8001c46:	e07e      	b.n	8001d46 <__aeabi_ddiv+0x3c2>
 8001c48:	465b      	mov	r3, fp
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d100      	bne.n	8001c50 <__aeabi_ddiv+0x2cc>
 8001c4e:	e100      	b.n	8001e52 <__aeabi_ddiv+0x4ce>
 8001c50:	4658      	mov	r0, fp
 8001c52:	f001 fa97 	bl	8003184 <__clzsi2>
 8001c56:	0002      	movs	r2, r0
 8001c58:	0003      	movs	r3, r0
 8001c5a:	3a0b      	subs	r2, #11
 8001c5c:	271d      	movs	r7, #29
 8001c5e:	9e00      	ldr	r6, [sp, #0]
 8001c60:	1aba      	subs	r2, r7, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	4658      	mov	r0, fp
 8001c66:	40d6      	lsrs	r6, r2
 8001c68:	3908      	subs	r1, #8
 8001c6a:	4088      	lsls	r0, r1
 8001c6c:	0032      	movs	r2, r6
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	4693      	mov	fp, r2
 8001c72:	9a00      	ldr	r2, [sp, #0]
 8001c74:	408a      	lsls	r2, r1
 8001c76:	4928      	ldr	r1, [pc, #160]	@ (8001d18 <__aeabi_ddiv+0x394>)
 8001c78:	4453      	add	r3, sl
 8001c7a:	468a      	mov	sl, r1
 8001c7c:	449a      	add	sl, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e6c8      	b.n	8001a14 <__aeabi_ddiv+0x90>
 8001c82:	465b      	mov	r3, fp
 8001c84:	4303      	orrs	r3, r0
 8001c86:	4699      	mov	r9, r3
 8001c88:	d056      	beq.n	8001d38 <__aeabi_ddiv+0x3b4>
 8001c8a:	465b      	mov	r3, fp
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d100      	bne.n	8001c92 <__aeabi_ddiv+0x30e>
 8001c90:	e0cd      	b.n	8001e2e <__aeabi_ddiv+0x4aa>
 8001c92:	4658      	mov	r0, fp
 8001c94:	f001 fa76 	bl	8003184 <__clzsi2>
 8001c98:	230b      	movs	r3, #11
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	469c      	mov	ip, r3
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	4484      	add	ip, r0
 8001ca2:	4666      	mov	r6, ip
 8001ca4:	231d      	movs	r3, #29
 8001ca6:	1b9b      	subs	r3, r3, r6
 8001ca8:	0026      	movs	r6, r4
 8001caa:	0011      	movs	r1, r2
 8001cac:	4658      	mov	r0, fp
 8001cae:	40de      	lsrs	r6, r3
 8001cb0:	3908      	subs	r1, #8
 8001cb2:	4088      	lsls	r0, r1
 8001cb4:	0033      	movs	r3, r6
 8001cb6:	4303      	orrs	r3, r0
 8001cb8:	4699      	mov	r9, r3
 8001cba:	0023      	movs	r3, r4
 8001cbc:	408b      	lsls	r3, r1
 8001cbe:	4698      	mov	r8, r3
 8001cc0:	4b16      	ldr	r3, [pc, #88]	@ (8001d1c <__aeabi_ddiv+0x398>)
 8001cc2:	2400      	movs	r4, #0
 8001cc4:	1a9b      	subs	r3, r3, r2
 8001cc6:	469a      	mov	sl, r3
 8001cc8:	2300      	movs	r3, #0
 8001cca:	9303      	str	r3, [sp, #12]
 8001ccc:	e682      	b.n	80019d4 <__aeabi_ddiv+0x50>
 8001cce:	465a      	mov	r2, fp
 8001cd0:	4302      	orrs	r2, r0
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	d12a      	bne.n	8001d2c <__aeabi_ddiv+0x3a8>
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	469a      	mov	sl, r3
 8001cda:	2302      	movs	r3, #2
 8001cdc:	4690      	mov	r8, r2
 8001cde:	2408      	movs	r4, #8
 8001ce0:	9303      	str	r3, [sp, #12]
 8001ce2:	e677      	b.n	80019d4 <__aeabi_ddiv+0x50>
 8001ce4:	465a      	mov	r2, fp
 8001ce6:	9b00      	ldr	r3, [sp, #0]
 8001ce8:	431a      	orrs	r2, r3
 8001cea:	4b0d      	ldr	r3, [pc, #52]	@ (8001d20 <__aeabi_ddiv+0x39c>)
 8001cec:	469c      	mov	ip, r3
 8001cee:	44e2      	add	sl, ip
 8001cf0:	2a00      	cmp	r2, #0
 8001cf2:	d117      	bne.n	8001d24 <__aeabi_ddiv+0x3a0>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	431c      	orrs	r4, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	469b      	mov	fp, r3
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	e689      	b.n	8001a14 <__aeabi_ddiv+0x90>
 8001d00:	000007ff 	.word	0x000007ff
 8001d04:	fffffc01 	.word	0xfffffc01
 8001d08:	0800a254 	.word	0x0800a254
 8001d0c:	000003ff 	.word	0x000003ff
 8001d10:	feffffff 	.word	0xfeffffff
 8001d14:	000007fe 	.word	0x000007fe
 8001d18:	000003f3 	.word	0x000003f3
 8001d1c:	fffffc0d 	.word	0xfffffc0d
 8001d20:	fffff801 	.word	0xfffff801
 8001d24:	2303      	movs	r3, #3
 8001d26:	0032      	movs	r2, r6
 8001d28:	431c      	orrs	r4, r3
 8001d2a:	e673      	b.n	8001a14 <__aeabi_ddiv+0x90>
 8001d2c:	469a      	mov	sl, r3
 8001d2e:	2303      	movs	r3, #3
 8001d30:	46d9      	mov	r9, fp
 8001d32:	240c      	movs	r4, #12
 8001d34:	9303      	str	r3, [sp, #12]
 8001d36:	e64d      	b.n	80019d4 <__aeabi_ddiv+0x50>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	4698      	mov	r8, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	3301      	adds	r3, #1
 8001d40:	2404      	movs	r4, #4
 8001d42:	9303      	str	r3, [sp, #12]
 8001d44:	e646      	b.n	80019d4 <__aeabi_ddiv+0x50>
 8001d46:	2301      	movs	r3, #1
 8001d48:	431c      	orrs	r4, r3
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	469b      	mov	fp, r3
 8001d4e:	3301      	adds	r3, #1
 8001d50:	e660      	b.n	8001a14 <__aeabi_ddiv+0x90>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2480      	movs	r4, #128	@ 0x80
 8001d56:	4698      	mov	r8, r3
 8001d58:	2600      	movs	r6, #0
 8001d5a:	4b92      	ldr	r3, [pc, #584]	@ (8001fa4 <__aeabi_ddiv+0x620>)
 8001d5c:	0324      	lsls	r4, r4, #12
 8001d5e:	e671      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001d60:	2201      	movs	r2, #1
 8001d62:	4252      	negs	r2, r2
 8001d64:	2101      	movs	r1, #1
 8001d66:	1ac9      	subs	r1, r1, r3
 8001d68:	2938      	cmp	r1, #56	@ 0x38
 8001d6a:	dd00      	ble.n	8001d6e <__aeabi_ddiv+0x3ea>
 8001d6c:	e666      	b.n	8001a3c <__aeabi_ddiv+0xb8>
 8001d6e:	291f      	cmp	r1, #31
 8001d70:	dc00      	bgt.n	8001d74 <__aeabi_ddiv+0x3f0>
 8001d72:	e0ab      	b.n	8001ecc <__aeabi_ddiv+0x548>
 8001d74:	201f      	movs	r0, #31
 8001d76:	4240      	negs	r0, r0
 8001d78:	1ac3      	subs	r3, r0, r3
 8001d7a:	4658      	mov	r0, fp
 8001d7c:	40d8      	lsrs	r0, r3
 8001d7e:	0003      	movs	r3, r0
 8001d80:	2920      	cmp	r1, #32
 8001d82:	d004      	beq.n	8001d8e <__aeabi_ddiv+0x40a>
 8001d84:	4658      	mov	r0, fp
 8001d86:	4988      	ldr	r1, [pc, #544]	@ (8001fa8 <__aeabi_ddiv+0x624>)
 8001d88:	4451      	add	r1, sl
 8001d8a:	4088      	lsls	r0, r1
 8001d8c:	4302      	orrs	r2, r0
 8001d8e:	1e51      	subs	r1, r2, #1
 8001d90:	418a      	sbcs	r2, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	2307      	movs	r3, #7
 8001d96:	0019      	movs	r1, r3
 8001d98:	2400      	movs	r4, #0
 8001d9a:	4011      	ands	r1, r2
 8001d9c:	4213      	tst	r3, r2
 8001d9e:	d00c      	beq.n	8001dba <__aeabi_ddiv+0x436>
 8001da0:	230f      	movs	r3, #15
 8001da2:	4013      	ands	r3, r2
 8001da4:	2b04      	cmp	r3, #4
 8001da6:	d100      	bne.n	8001daa <__aeabi_ddiv+0x426>
 8001da8:	e0f9      	b.n	8001f9e <__aeabi_ddiv+0x61a>
 8001daa:	1d11      	adds	r1, r2, #4
 8001dac:	4291      	cmp	r1, r2
 8001dae:	419b      	sbcs	r3, r3
 8001db0:	000a      	movs	r2, r1
 8001db2:	425b      	negs	r3, r3
 8001db4:	0759      	lsls	r1, r3, #29
 8001db6:	025b      	lsls	r3, r3, #9
 8001db8:	0b1c      	lsrs	r4, r3, #12
 8001dba:	08d2      	lsrs	r2, r2, #3
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	4690      	mov	r8, r2
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e63f      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001dc4:	2480      	movs	r4, #128	@ 0x80
 8001dc6:	464b      	mov	r3, r9
 8001dc8:	0324      	lsls	r4, r4, #12
 8001dca:	4223      	tst	r3, r4
 8001dcc:	d009      	beq.n	8001de2 <__aeabi_ddiv+0x45e>
 8001dce:	465b      	mov	r3, fp
 8001dd0:	4223      	tst	r3, r4
 8001dd2:	d106      	bne.n	8001de2 <__aeabi_ddiv+0x45e>
 8001dd4:	431c      	orrs	r4, r3
 8001dd6:	0324      	lsls	r4, r4, #12
 8001dd8:	002e      	movs	r6, r5
 8001dda:	4690      	mov	r8, r2
 8001ddc:	4b71      	ldr	r3, [pc, #452]	@ (8001fa4 <__aeabi_ddiv+0x620>)
 8001dde:	0b24      	lsrs	r4, r4, #12
 8001de0:	e630      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001de2:	2480      	movs	r4, #128	@ 0x80
 8001de4:	464b      	mov	r3, r9
 8001de6:	0324      	lsls	r4, r4, #12
 8001de8:	431c      	orrs	r4, r3
 8001dea:	0324      	lsls	r4, r4, #12
 8001dec:	9e02      	ldr	r6, [sp, #8]
 8001dee:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa4 <__aeabi_ddiv+0x620>)
 8001df0:	0b24      	lsrs	r4, r4, #12
 8001df2:	e627      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x476>
 8001df8:	e700      	b.n	8001bfc <__aeabi_ddiv+0x278>
 8001dfa:	9800      	ldr	r0, [sp, #0]
 8001dfc:	1e51      	subs	r1, r2, #1
 8001dfe:	4684      	mov	ip, r0
 8001e00:	4464      	add	r4, ip
 8001e02:	4284      	cmp	r4, r0
 8001e04:	d200      	bcs.n	8001e08 <__aeabi_ddiv+0x484>
 8001e06:	e084      	b.n	8001f12 <__aeabi_ddiv+0x58e>
 8001e08:	42bc      	cmp	r4, r7
 8001e0a:	d200      	bcs.n	8001e0e <__aeabi_ddiv+0x48a>
 8001e0c:	e0ae      	b.n	8001f6c <__aeabi_ddiv+0x5e8>
 8001e0e:	d100      	bne.n	8001e12 <__aeabi_ddiv+0x48e>
 8001e10:	e0c1      	b.n	8001f96 <__aeabi_ddiv+0x612>
 8001e12:	000a      	movs	r2, r1
 8001e14:	e6f0      	b.n	8001bf8 <__aeabi_ddiv+0x274>
 8001e16:	4542      	cmp	r2, r8
 8001e18:	d900      	bls.n	8001e1c <__aeabi_ddiv+0x498>
 8001e1a:	e62c      	b.n	8001a76 <__aeabi_ddiv+0xf2>
 8001e1c:	464b      	mov	r3, r9
 8001e1e:	07dc      	lsls	r4, r3, #31
 8001e20:	0858      	lsrs	r0, r3, #1
 8001e22:	4643      	mov	r3, r8
 8001e24:	085b      	lsrs	r3, r3, #1
 8001e26:	431c      	orrs	r4, r3
 8001e28:	4643      	mov	r3, r8
 8001e2a:	07df      	lsls	r7, r3, #31
 8001e2c:	e62a      	b.n	8001a84 <__aeabi_ddiv+0x100>
 8001e2e:	f001 f9a9 	bl	8003184 <__clzsi2>
 8001e32:	2315      	movs	r3, #21
 8001e34:	469c      	mov	ip, r3
 8001e36:	4484      	add	ip, r0
 8001e38:	0002      	movs	r2, r0
 8001e3a:	4663      	mov	r3, ip
 8001e3c:	3220      	adds	r2, #32
 8001e3e:	2b1c      	cmp	r3, #28
 8001e40:	dc00      	bgt.n	8001e44 <__aeabi_ddiv+0x4c0>
 8001e42:	e72e      	b.n	8001ca2 <__aeabi_ddiv+0x31e>
 8001e44:	0023      	movs	r3, r4
 8001e46:	3808      	subs	r0, #8
 8001e48:	4083      	lsls	r3, r0
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4698      	mov	r8, r3
 8001e50:	e736      	b.n	8001cc0 <__aeabi_ddiv+0x33c>
 8001e52:	f001 f997 	bl	8003184 <__clzsi2>
 8001e56:	0002      	movs	r2, r0
 8001e58:	0003      	movs	r3, r0
 8001e5a:	3215      	adds	r2, #21
 8001e5c:	3320      	adds	r3, #32
 8001e5e:	2a1c      	cmp	r2, #28
 8001e60:	dc00      	bgt.n	8001e64 <__aeabi_ddiv+0x4e0>
 8001e62:	e6fb      	b.n	8001c5c <__aeabi_ddiv+0x2d8>
 8001e64:	9900      	ldr	r1, [sp, #0]
 8001e66:	3808      	subs	r0, #8
 8001e68:	4081      	lsls	r1, r0
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	468b      	mov	fp, r1
 8001e6e:	e702      	b.n	8001c76 <__aeabi_ddiv+0x2f2>
 8001e70:	9900      	ldr	r1, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	468c      	mov	ip, r1
 8001e76:	4464      	add	r4, ip
 8001e78:	42a1      	cmp	r1, r4
 8001e7a:	d900      	bls.n	8001e7e <__aeabi_ddiv+0x4fa>
 8001e7c:	e69a      	b.n	8001bb4 <__aeabi_ddiv+0x230>
 8001e7e:	42a2      	cmp	r2, r4
 8001e80:	d800      	bhi.n	8001e84 <__aeabi_ddiv+0x500>
 8001e82:	e697      	b.n	8001bb4 <__aeabi_ddiv+0x230>
 8001e84:	1e83      	subs	r3, r0, #2
 8001e86:	4464      	add	r4, ip
 8001e88:	e694      	b.n	8001bb4 <__aeabi_ddiv+0x230>
 8001e8a:	46ac      	mov	ip, r5
 8001e8c:	4461      	add	r1, ip
 8001e8e:	3f01      	subs	r7, #1
 8001e90:	428d      	cmp	r5, r1
 8001e92:	d900      	bls.n	8001e96 <__aeabi_ddiv+0x512>
 8001e94:	e680      	b.n	8001b98 <__aeabi_ddiv+0x214>
 8001e96:	428a      	cmp	r2, r1
 8001e98:	d800      	bhi.n	8001e9c <__aeabi_ddiv+0x518>
 8001e9a:	e67d      	b.n	8001b98 <__aeabi_ddiv+0x214>
 8001e9c:	1e87      	subs	r7, r0, #2
 8001e9e:	4461      	add	r1, ip
 8001ea0:	e67a      	b.n	8001b98 <__aeabi_ddiv+0x214>
 8001ea2:	4285      	cmp	r5, r0
 8001ea4:	d000      	beq.n	8001ea8 <__aeabi_ddiv+0x524>
 8001ea6:	e65f      	b.n	8001b68 <__aeabi_ddiv+0x1e4>
 8001ea8:	45b9      	cmp	r9, r7
 8001eaa:	d900      	bls.n	8001eae <__aeabi_ddiv+0x52a>
 8001eac:	e65c      	b.n	8001b68 <__aeabi_ddiv+0x1e4>
 8001eae:	e656      	b.n	8001b5e <__aeabi_ddiv+0x1da>
 8001eb0:	42a2      	cmp	r2, r4
 8001eb2:	d800      	bhi.n	8001eb6 <__aeabi_ddiv+0x532>
 8001eb4:	e61a      	b.n	8001aec <__aeabi_ddiv+0x168>
 8001eb6:	1e83      	subs	r3, r0, #2
 8001eb8:	4464      	add	r4, ip
 8001eba:	e617      	b.n	8001aec <__aeabi_ddiv+0x168>
 8001ebc:	428a      	cmp	r2, r1
 8001ebe:	d800      	bhi.n	8001ec2 <__aeabi_ddiv+0x53e>
 8001ec0:	e600      	b.n	8001ac4 <__aeabi_ddiv+0x140>
 8001ec2:	46ac      	mov	ip, r5
 8001ec4:	1e83      	subs	r3, r0, #2
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	4461      	add	r1, ip
 8001eca:	e5fb      	b.n	8001ac4 <__aeabi_ddiv+0x140>
 8001ecc:	4837      	ldr	r0, [pc, #220]	@ (8001fac <__aeabi_ddiv+0x628>)
 8001ece:	0014      	movs	r4, r2
 8001ed0:	4450      	add	r0, sl
 8001ed2:	4082      	lsls	r2, r0
 8001ed4:	465b      	mov	r3, fp
 8001ed6:	0017      	movs	r7, r2
 8001ed8:	4083      	lsls	r3, r0
 8001eda:	40cc      	lsrs	r4, r1
 8001edc:	1e7a      	subs	r2, r7, #1
 8001ede:	4197      	sbcs	r7, r2
 8001ee0:	4323      	orrs	r3, r4
 8001ee2:	433b      	orrs	r3, r7
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	465b      	mov	r3, fp
 8001ee8:	40cb      	lsrs	r3, r1
 8001eea:	0751      	lsls	r1, r2, #29
 8001eec:	d009      	beq.n	8001f02 <__aeabi_ddiv+0x57e>
 8001eee:	210f      	movs	r1, #15
 8001ef0:	4011      	ands	r1, r2
 8001ef2:	2904      	cmp	r1, #4
 8001ef4:	d005      	beq.n	8001f02 <__aeabi_ddiv+0x57e>
 8001ef6:	1d11      	adds	r1, r2, #4
 8001ef8:	4291      	cmp	r1, r2
 8001efa:	4192      	sbcs	r2, r2
 8001efc:	4252      	negs	r2, r2
 8001efe:	189b      	adds	r3, r3, r2
 8001f00:	000a      	movs	r2, r1
 8001f02:	0219      	lsls	r1, r3, #8
 8001f04:	d400      	bmi.n	8001f08 <__aeabi_ddiv+0x584>
 8001f06:	e755      	b.n	8001db4 <__aeabi_ddiv+0x430>
 8001f08:	2200      	movs	r2, #0
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2400      	movs	r4, #0
 8001f0e:	4690      	mov	r8, r2
 8001f10:	e598      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001f12:	000a      	movs	r2, r1
 8001f14:	42bc      	cmp	r4, r7
 8001f16:	d000      	beq.n	8001f1a <__aeabi_ddiv+0x596>
 8001f18:	e66e      	b.n	8001bf8 <__aeabi_ddiv+0x274>
 8001f1a:	454b      	cmp	r3, r9
 8001f1c:	d000      	beq.n	8001f20 <__aeabi_ddiv+0x59c>
 8001f1e:	e66b      	b.n	8001bf8 <__aeabi_ddiv+0x274>
 8001f20:	e66c      	b.n	8001bfc <__aeabi_ddiv+0x278>
 8001f22:	4b23      	ldr	r3, [pc, #140]	@ (8001fb0 <__aeabi_ddiv+0x62c>)
 8001f24:	4a23      	ldr	r2, [pc, #140]	@ (8001fb4 <__aeabi_ddiv+0x630>)
 8001f26:	4453      	add	r3, sl
 8001f28:	4592      	cmp	sl, r2
 8001f2a:	da00      	bge.n	8001f2e <__aeabi_ddiv+0x5aa>
 8001f2c:	e718      	b.n	8001d60 <__aeabi_ddiv+0x3dc>
 8001f2e:	2101      	movs	r1, #1
 8001f30:	4249      	negs	r1, r1
 8001f32:	1d0a      	adds	r2, r1, #4
 8001f34:	428a      	cmp	r2, r1
 8001f36:	4189      	sbcs	r1, r1
 8001f38:	4249      	negs	r1, r1
 8001f3a:	448b      	add	fp, r1
 8001f3c:	e666      	b.n	8001c0c <__aeabi_ddiv+0x288>
 8001f3e:	210f      	movs	r1, #15
 8001f40:	4011      	ands	r1, r2
 8001f42:	2904      	cmp	r1, #4
 8001f44:	d100      	bne.n	8001f48 <__aeabi_ddiv+0x5c4>
 8001f46:	e661      	b.n	8001c0c <__aeabi_ddiv+0x288>
 8001f48:	0011      	movs	r1, r2
 8001f4a:	e7f2      	b.n	8001f32 <__aeabi_ddiv+0x5ae>
 8001f4c:	42bc      	cmp	r4, r7
 8001f4e:	d800      	bhi.n	8001f52 <__aeabi_ddiv+0x5ce>
 8001f50:	e60a      	b.n	8001b68 <__aeabi_ddiv+0x1e4>
 8001f52:	2302      	movs	r3, #2
 8001f54:	425b      	negs	r3, r3
 8001f56:	469c      	mov	ip, r3
 8001f58:	9900      	ldr	r1, [sp, #0]
 8001f5a:	444f      	add	r7, r9
 8001f5c:	454f      	cmp	r7, r9
 8001f5e:	419b      	sbcs	r3, r3
 8001f60:	44e3      	add	fp, ip
 8001f62:	468c      	mov	ip, r1
 8001f64:	425b      	negs	r3, r3
 8001f66:	4463      	add	r3, ip
 8001f68:	18c0      	adds	r0, r0, r3
 8001f6a:	e5ff      	b.n	8001b6c <__aeabi_ddiv+0x1e8>
 8001f6c:	4649      	mov	r1, r9
 8001f6e:	9d00      	ldr	r5, [sp, #0]
 8001f70:	0048      	lsls	r0, r1, #1
 8001f72:	4548      	cmp	r0, r9
 8001f74:	4189      	sbcs	r1, r1
 8001f76:	46ac      	mov	ip, r5
 8001f78:	4249      	negs	r1, r1
 8001f7a:	4461      	add	r1, ip
 8001f7c:	4681      	mov	r9, r0
 8001f7e:	3a02      	subs	r2, #2
 8001f80:	1864      	adds	r4, r4, r1
 8001f82:	e7c7      	b.n	8001f14 <__aeabi_ddiv+0x590>
 8001f84:	2480      	movs	r4, #128	@ 0x80
 8001f86:	465b      	mov	r3, fp
 8001f88:	0324      	lsls	r4, r4, #12
 8001f8a:	431c      	orrs	r4, r3
 8001f8c:	0324      	lsls	r4, r4, #12
 8001f8e:	4690      	mov	r8, r2
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <__aeabi_ddiv+0x620>)
 8001f92:	0b24      	lsrs	r4, r4, #12
 8001f94:	e556      	b.n	8001a44 <__aeabi_ddiv+0xc0>
 8001f96:	4599      	cmp	r9, r3
 8001f98:	d3e8      	bcc.n	8001f6c <__aeabi_ddiv+0x5e8>
 8001f9a:	000a      	movs	r2, r1
 8001f9c:	e7bd      	b.n	8001f1a <__aeabi_ddiv+0x596>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e708      	b.n	8001db4 <__aeabi_ddiv+0x430>
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	000007ff 	.word	0x000007ff
 8001fa8:	0000043e 	.word	0x0000043e
 8001fac:	0000041e 	.word	0x0000041e
 8001fb0:	000003ff 	.word	0x000003ff
 8001fb4:	fffffc02 	.word	0xfffffc02

08001fb8 <__eqdf2>:
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	4657      	mov	r7, sl
 8001fbc:	46de      	mov	lr, fp
 8001fbe:	464e      	mov	r6, r9
 8001fc0:	4645      	mov	r5, r8
 8001fc2:	b5e0      	push	{r5, r6, r7, lr}
 8001fc4:	000d      	movs	r5, r1
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	0fe8      	lsrs	r0, r5, #31
 8001fca:	4683      	mov	fp, r0
 8001fcc:	0309      	lsls	r1, r1, #12
 8001fce:	0fd8      	lsrs	r0, r3, #31
 8001fd0:	0b09      	lsrs	r1, r1, #12
 8001fd2:	4682      	mov	sl, r0
 8001fd4:	4819      	ldr	r0, [pc, #100]	@ (800203c <__eqdf2+0x84>)
 8001fd6:	468c      	mov	ip, r1
 8001fd8:	031f      	lsls	r7, r3, #12
 8001fda:	0069      	lsls	r1, r5, #1
 8001fdc:	005e      	lsls	r6, r3, #1
 8001fde:	0d49      	lsrs	r1, r1, #21
 8001fe0:	0b3f      	lsrs	r7, r7, #12
 8001fe2:	0d76      	lsrs	r6, r6, #21
 8001fe4:	4281      	cmp	r1, r0
 8001fe6:	d018      	beq.n	800201a <__eqdf2+0x62>
 8001fe8:	4286      	cmp	r6, r0
 8001fea:	d00f      	beq.n	800200c <__eqdf2+0x54>
 8001fec:	2001      	movs	r0, #1
 8001fee:	42b1      	cmp	r1, r6
 8001ff0:	d10d      	bne.n	800200e <__eqdf2+0x56>
 8001ff2:	45bc      	cmp	ip, r7
 8001ff4:	d10b      	bne.n	800200e <__eqdf2+0x56>
 8001ff6:	4294      	cmp	r4, r2
 8001ff8:	d109      	bne.n	800200e <__eqdf2+0x56>
 8001ffa:	45d3      	cmp	fp, sl
 8001ffc:	d01c      	beq.n	8002038 <__eqdf2+0x80>
 8001ffe:	2900      	cmp	r1, #0
 8002000:	d105      	bne.n	800200e <__eqdf2+0x56>
 8002002:	4660      	mov	r0, ip
 8002004:	4320      	orrs	r0, r4
 8002006:	1e43      	subs	r3, r0, #1
 8002008:	4198      	sbcs	r0, r3
 800200a:	e000      	b.n	800200e <__eqdf2+0x56>
 800200c:	2001      	movs	r0, #1
 800200e:	bcf0      	pop	{r4, r5, r6, r7}
 8002010:	46bb      	mov	fp, r7
 8002012:	46b2      	mov	sl, r6
 8002014:	46a9      	mov	r9, r5
 8002016:	46a0      	mov	r8, r4
 8002018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800201a:	2001      	movs	r0, #1
 800201c:	428e      	cmp	r6, r1
 800201e:	d1f6      	bne.n	800200e <__eqdf2+0x56>
 8002020:	4661      	mov	r1, ip
 8002022:	4339      	orrs	r1, r7
 8002024:	000f      	movs	r7, r1
 8002026:	4317      	orrs	r7, r2
 8002028:	4327      	orrs	r7, r4
 800202a:	d1f0      	bne.n	800200e <__eqdf2+0x56>
 800202c:	465b      	mov	r3, fp
 800202e:	4652      	mov	r2, sl
 8002030:	1a98      	subs	r0, r3, r2
 8002032:	1e43      	subs	r3, r0, #1
 8002034:	4198      	sbcs	r0, r3
 8002036:	e7ea      	b.n	800200e <__eqdf2+0x56>
 8002038:	2000      	movs	r0, #0
 800203a:	e7e8      	b.n	800200e <__eqdf2+0x56>
 800203c:	000007ff 	.word	0x000007ff

08002040 <__gedf2>:
 8002040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002042:	4657      	mov	r7, sl
 8002044:	464e      	mov	r6, r9
 8002046:	4645      	mov	r5, r8
 8002048:	46de      	mov	lr, fp
 800204a:	b5e0      	push	{r5, r6, r7, lr}
 800204c:	000d      	movs	r5, r1
 800204e:	030f      	lsls	r7, r1, #12
 8002050:	0b39      	lsrs	r1, r7, #12
 8002052:	b083      	sub	sp, #12
 8002054:	0004      	movs	r4, r0
 8002056:	4680      	mov	r8, r0
 8002058:	9101      	str	r1, [sp, #4]
 800205a:	0058      	lsls	r0, r3, #1
 800205c:	0fe9      	lsrs	r1, r5, #31
 800205e:	4f31      	ldr	r7, [pc, #196]	@ (8002124 <__gedf2+0xe4>)
 8002060:	0d40      	lsrs	r0, r0, #21
 8002062:	468c      	mov	ip, r1
 8002064:	006e      	lsls	r6, r5, #1
 8002066:	0319      	lsls	r1, r3, #12
 8002068:	4682      	mov	sl, r0
 800206a:	4691      	mov	r9, r2
 800206c:	0d76      	lsrs	r6, r6, #21
 800206e:	0b09      	lsrs	r1, r1, #12
 8002070:	0fd8      	lsrs	r0, r3, #31
 8002072:	42be      	cmp	r6, r7
 8002074:	d01f      	beq.n	80020b6 <__gedf2+0x76>
 8002076:	45ba      	cmp	sl, r7
 8002078:	d00f      	beq.n	800209a <__gedf2+0x5a>
 800207a:	2e00      	cmp	r6, #0
 800207c:	d12f      	bne.n	80020de <__gedf2+0x9e>
 800207e:	4655      	mov	r5, sl
 8002080:	9e01      	ldr	r6, [sp, #4]
 8002082:	4334      	orrs	r4, r6
 8002084:	2d00      	cmp	r5, #0
 8002086:	d127      	bne.n	80020d8 <__gedf2+0x98>
 8002088:	430a      	orrs	r2, r1
 800208a:	d03a      	beq.n	8002102 <__gedf2+0xc2>
 800208c:	2c00      	cmp	r4, #0
 800208e:	d145      	bne.n	800211c <__gedf2+0xdc>
 8002090:	2800      	cmp	r0, #0
 8002092:	d11a      	bne.n	80020ca <__gedf2+0x8a>
 8002094:	2001      	movs	r0, #1
 8002096:	4240      	negs	r0, r0
 8002098:	e017      	b.n	80020ca <__gedf2+0x8a>
 800209a:	4311      	orrs	r1, r2
 800209c:	d13b      	bne.n	8002116 <__gedf2+0xd6>
 800209e:	2e00      	cmp	r6, #0
 80020a0:	d102      	bne.n	80020a8 <__gedf2+0x68>
 80020a2:	9f01      	ldr	r7, [sp, #4]
 80020a4:	4327      	orrs	r7, r4
 80020a6:	d0f3      	beq.n	8002090 <__gedf2+0x50>
 80020a8:	4584      	cmp	ip, r0
 80020aa:	d109      	bne.n	80020c0 <__gedf2+0x80>
 80020ac:	4663      	mov	r3, ip
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <__gedf2+0x54>
 80020b2:	4660      	mov	r0, ip
 80020b4:	e009      	b.n	80020ca <__gedf2+0x8a>
 80020b6:	9f01      	ldr	r7, [sp, #4]
 80020b8:	4327      	orrs	r7, r4
 80020ba:	d12c      	bne.n	8002116 <__gedf2+0xd6>
 80020bc:	45b2      	cmp	sl, r6
 80020be:	d024      	beq.n	800210a <__gedf2+0xca>
 80020c0:	4663      	mov	r3, ip
 80020c2:	2002      	movs	r0, #2
 80020c4:	3b01      	subs	r3, #1
 80020c6:	4018      	ands	r0, r3
 80020c8:	3801      	subs	r0, #1
 80020ca:	b003      	add	sp, #12
 80020cc:	bcf0      	pop	{r4, r5, r6, r7}
 80020ce:	46bb      	mov	fp, r7
 80020d0:	46b2      	mov	sl, r6
 80020d2:	46a9      	mov	r9, r5
 80020d4:	46a0      	mov	r8, r4
 80020d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d8:	2c00      	cmp	r4, #0
 80020da:	d0d9      	beq.n	8002090 <__gedf2+0x50>
 80020dc:	e7e4      	b.n	80020a8 <__gedf2+0x68>
 80020de:	4654      	mov	r4, sl
 80020e0:	2c00      	cmp	r4, #0
 80020e2:	d0ed      	beq.n	80020c0 <__gedf2+0x80>
 80020e4:	4584      	cmp	ip, r0
 80020e6:	d1eb      	bne.n	80020c0 <__gedf2+0x80>
 80020e8:	4556      	cmp	r6, sl
 80020ea:	dce9      	bgt.n	80020c0 <__gedf2+0x80>
 80020ec:	dbde      	blt.n	80020ac <__gedf2+0x6c>
 80020ee:	9b01      	ldr	r3, [sp, #4]
 80020f0:	428b      	cmp	r3, r1
 80020f2:	d8e5      	bhi.n	80020c0 <__gedf2+0x80>
 80020f4:	d1da      	bne.n	80020ac <__gedf2+0x6c>
 80020f6:	45c8      	cmp	r8, r9
 80020f8:	d8e2      	bhi.n	80020c0 <__gedf2+0x80>
 80020fa:	2000      	movs	r0, #0
 80020fc:	45c8      	cmp	r8, r9
 80020fe:	d2e4      	bcs.n	80020ca <__gedf2+0x8a>
 8002100:	e7d4      	b.n	80020ac <__gedf2+0x6c>
 8002102:	2000      	movs	r0, #0
 8002104:	2c00      	cmp	r4, #0
 8002106:	d0e0      	beq.n	80020ca <__gedf2+0x8a>
 8002108:	e7da      	b.n	80020c0 <__gedf2+0x80>
 800210a:	4311      	orrs	r1, r2
 800210c:	d103      	bne.n	8002116 <__gedf2+0xd6>
 800210e:	4584      	cmp	ip, r0
 8002110:	d1d6      	bne.n	80020c0 <__gedf2+0x80>
 8002112:	2000      	movs	r0, #0
 8002114:	e7d9      	b.n	80020ca <__gedf2+0x8a>
 8002116:	2002      	movs	r0, #2
 8002118:	4240      	negs	r0, r0
 800211a:	e7d6      	b.n	80020ca <__gedf2+0x8a>
 800211c:	4584      	cmp	ip, r0
 800211e:	d0e6      	beq.n	80020ee <__gedf2+0xae>
 8002120:	e7ce      	b.n	80020c0 <__gedf2+0x80>
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	000007ff 	.word	0x000007ff

08002128 <__ledf2>:
 8002128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212a:	4657      	mov	r7, sl
 800212c:	464e      	mov	r6, r9
 800212e:	4645      	mov	r5, r8
 8002130:	46de      	mov	lr, fp
 8002132:	b5e0      	push	{r5, r6, r7, lr}
 8002134:	000d      	movs	r5, r1
 8002136:	030f      	lsls	r7, r1, #12
 8002138:	0004      	movs	r4, r0
 800213a:	4680      	mov	r8, r0
 800213c:	0fe8      	lsrs	r0, r5, #31
 800213e:	0b39      	lsrs	r1, r7, #12
 8002140:	4684      	mov	ip, r0
 8002142:	b083      	sub	sp, #12
 8002144:	0058      	lsls	r0, r3, #1
 8002146:	4f30      	ldr	r7, [pc, #192]	@ (8002208 <__ledf2+0xe0>)
 8002148:	0d40      	lsrs	r0, r0, #21
 800214a:	9101      	str	r1, [sp, #4]
 800214c:	031e      	lsls	r6, r3, #12
 800214e:	0069      	lsls	r1, r5, #1
 8002150:	4682      	mov	sl, r0
 8002152:	4691      	mov	r9, r2
 8002154:	0d49      	lsrs	r1, r1, #21
 8002156:	0b36      	lsrs	r6, r6, #12
 8002158:	0fd8      	lsrs	r0, r3, #31
 800215a:	42b9      	cmp	r1, r7
 800215c:	d020      	beq.n	80021a0 <__ledf2+0x78>
 800215e:	45ba      	cmp	sl, r7
 8002160:	d00f      	beq.n	8002182 <__ledf2+0x5a>
 8002162:	2900      	cmp	r1, #0
 8002164:	d12b      	bne.n	80021be <__ledf2+0x96>
 8002166:	9901      	ldr	r1, [sp, #4]
 8002168:	430c      	orrs	r4, r1
 800216a:	4651      	mov	r1, sl
 800216c:	2900      	cmp	r1, #0
 800216e:	d137      	bne.n	80021e0 <__ledf2+0xb8>
 8002170:	4332      	orrs	r2, r6
 8002172:	d038      	beq.n	80021e6 <__ledf2+0xbe>
 8002174:	2c00      	cmp	r4, #0
 8002176:	d144      	bne.n	8002202 <__ledf2+0xda>
 8002178:	2800      	cmp	r0, #0
 800217a:	d119      	bne.n	80021b0 <__ledf2+0x88>
 800217c:	2001      	movs	r0, #1
 800217e:	4240      	negs	r0, r0
 8002180:	e016      	b.n	80021b0 <__ledf2+0x88>
 8002182:	4316      	orrs	r6, r2
 8002184:	d113      	bne.n	80021ae <__ledf2+0x86>
 8002186:	2900      	cmp	r1, #0
 8002188:	d102      	bne.n	8002190 <__ledf2+0x68>
 800218a:	9f01      	ldr	r7, [sp, #4]
 800218c:	4327      	orrs	r7, r4
 800218e:	d0f3      	beq.n	8002178 <__ledf2+0x50>
 8002190:	4584      	cmp	ip, r0
 8002192:	d020      	beq.n	80021d6 <__ledf2+0xae>
 8002194:	4663      	mov	r3, ip
 8002196:	2002      	movs	r0, #2
 8002198:	3b01      	subs	r3, #1
 800219a:	4018      	ands	r0, r3
 800219c:	3801      	subs	r0, #1
 800219e:	e007      	b.n	80021b0 <__ledf2+0x88>
 80021a0:	9f01      	ldr	r7, [sp, #4]
 80021a2:	4327      	orrs	r7, r4
 80021a4:	d103      	bne.n	80021ae <__ledf2+0x86>
 80021a6:	458a      	cmp	sl, r1
 80021a8:	d1f4      	bne.n	8002194 <__ledf2+0x6c>
 80021aa:	4316      	orrs	r6, r2
 80021ac:	d01f      	beq.n	80021ee <__ledf2+0xc6>
 80021ae:	2002      	movs	r0, #2
 80021b0:	b003      	add	sp, #12
 80021b2:	bcf0      	pop	{r4, r5, r6, r7}
 80021b4:	46bb      	mov	fp, r7
 80021b6:	46b2      	mov	sl, r6
 80021b8:	46a9      	mov	r9, r5
 80021ba:	46a0      	mov	r8, r4
 80021bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021be:	4654      	mov	r4, sl
 80021c0:	2c00      	cmp	r4, #0
 80021c2:	d0e7      	beq.n	8002194 <__ledf2+0x6c>
 80021c4:	4584      	cmp	ip, r0
 80021c6:	d1e5      	bne.n	8002194 <__ledf2+0x6c>
 80021c8:	4551      	cmp	r1, sl
 80021ca:	dce3      	bgt.n	8002194 <__ledf2+0x6c>
 80021cc:	db03      	blt.n	80021d6 <__ledf2+0xae>
 80021ce:	9b01      	ldr	r3, [sp, #4]
 80021d0:	42b3      	cmp	r3, r6
 80021d2:	d8df      	bhi.n	8002194 <__ledf2+0x6c>
 80021d4:	d00f      	beq.n	80021f6 <__ledf2+0xce>
 80021d6:	4663      	mov	r3, ip
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0cf      	beq.n	800217c <__ledf2+0x54>
 80021dc:	4660      	mov	r0, ip
 80021de:	e7e7      	b.n	80021b0 <__ledf2+0x88>
 80021e0:	2c00      	cmp	r4, #0
 80021e2:	d0c9      	beq.n	8002178 <__ledf2+0x50>
 80021e4:	e7d4      	b.n	8002190 <__ledf2+0x68>
 80021e6:	2000      	movs	r0, #0
 80021e8:	2c00      	cmp	r4, #0
 80021ea:	d0e1      	beq.n	80021b0 <__ledf2+0x88>
 80021ec:	e7d2      	b.n	8002194 <__ledf2+0x6c>
 80021ee:	4584      	cmp	ip, r0
 80021f0:	d1d0      	bne.n	8002194 <__ledf2+0x6c>
 80021f2:	2000      	movs	r0, #0
 80021f4:	e7dc      	b.n	80021b0 <__ledf2+0x88>
 80021f6:	45c8      	cmp	r8, r9
 80021f8:	d8cc      	bhi.n	8002194 <__ledf2+0x6c>
 80021fa:	2000      	movs	r0, #0
 80021fc:	45c8      	cmp	r8, r9
 80021fe:	d2d7      	bcs.n	80021b0 <__ledf2+0x88>
 8002200:	e7e9      	b.n	80021d6 <__ledf2+0xae>
 8002202:	4584      	cmp	ip, r0
 8002204:	d0e3      	beq.n	80021ce <__ledf2+0xa6>
 8002206:	e7c5      	b.n	8002194 <__ledf2+0x6c>
 8002208:	000007ff 	.word	0x000007ff

0800220c <__aeabi_dmul>:
 800220c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220e:	4657      	mov	r7, sl
 8002210:	46de      	mov	lr, fp
 8002212:	464e      	mov	r6, r9
 8002214:	4645      	mov	r5, r8
 8002216:	b5e0      	push	{r5, r6, r7, lr}
 8002218:	001f      	movs	r7, r3
 800221a:	030b      	lsls	r3, r1, #12
 800221c:	0b1b      	lsrs	r3, r3, #12
 800221e:	0016      	movs	r6, r2
 8002220:	469a      	mov	sl, r3
 8002222:	0fca      	lsrs	r2, r1, #31
 8002224:	004b      	lsls	r3, r1, #1
 8002226:	0004      	movs	r4, r0
 8002228:	4693      	mov	fp, r2
 800222a:	b087      	sub	sp, #28
 800222c:	0d5b      	lsrs	r3, r3, #21
 800222e:	d100      	bne.n	8002232 <__aeabi_dmul+0x26>
 8002230:	e0d5      	b.n	80023de <__aeabi_dmul+0x1d2>
 8002232:	4abb      	ldr	r2, [pc, #748]	@ (8002520 <__aeabi_dmul+0x314>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d100      	bne.n	800223a <__aeabi_dmul+0x2e>
 8002238:	e0f8      	b.n	800242c <__aeabi_dmul+0x220>
 800223a:	4651      	mov	r1, sl
 800223c:	0f42      	lsrs	r2, r0, #29
 800223e:	00c9      	lsls	r1, r1, #3
 8002240:	430a      	orrs	r2, r1
 8002242:	2180      	movs	r1, #128	@ 0x80
 8002244:	0409      	lsls	r1, r1, #16
 8002246:	4311      	orrs	r1, r2
 8002248:	00c2      	lsls	r2, r0, #3
 800224a:	4691      	mov	r9, r2
 800224c:	4ab5      	ldr	r2, [pc, #724]	@ (8002524 <__aeabi_dmul+0x318>)
 800224e:	468a      	mov	sl, r1
 8002250:	189d      	adds	r5, r3, r2
 8002252:	2300      	movs	r3, #0
 8002254:	4698      	mov	r8, r3
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	033c      	lsls	r4, r7, #12
 800225a:	007b      	lsls	r3, r7, #1
 800225c:	0ffa      	lsrs	r2, r7, #31
 800225e:	0030      	movs	r0, r6
 8002260:	0b24      	lsrs	r4, r4, #12
 8002262:	0d5b      	lsrs	r3, r3, #21
 8002264:	9200      	str	r2, [sp, #0]
 8002266:	d100      	bne.n	800226a <__aeabi_dmul+0x5e>
 8002268:	e096      	b.n	8002398 <__aeabi_dmul+0x18c>
 800226a:	4aad      	ldr	r2, [pc, #692]	@ (8002520 <__aeabi_dmul+0x314>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d031      	beq.n	80022d4 <__aeabi_dmul+0xc8>
 8002270:	0f72      	lsrs	r2, r6, #29
 8002272:	00e4      	lsls	r4, r4, #3
 8002274:	4322      	orrs	r2, r4
 8002276:	2480      	movs	r4, #128	@ 0x80
 8002278:	0424      	lsls	r4, r4, #16
 800227a:	4314      	orrs	r4, r2
 800227c:	4aa9      	ldr	r2, [pc, #676]	@ (8002524 <__aeabi_dmul+0x318>)
 800227e:	00f0      	lsls	r0, r6, #3
 8002280:	4694      	mov	ip, r2
 8002282:	4463      	add	r3, ip
 8002284:	195b      	adds	r3, r3, r5
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	9201      	str	r2, [sp, #4]
 800228a:	4642      	mov	r2, r8
 800228c:	2600      	movs	r6, #0
 800228e:	2a0a      	cmp	r2, #10
 8002290:	dc42      	bgt.n	8002318 <__aeabi_dmul+0x10c>
 8002292:	465a      	mov	r2, fp
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	404a      	eors	r2, r1
 8002298:	4693      	mov	fp, r2
 800229a:	4642      	mov	r2, r8
 800229c:	2a02      	cmp	r2, #2
 800229e:	dc32      	bgt.n	8002306 <__aeabi_dmul+0xfa>
 80022a0:	3a01      	subs	r2, #1
 80022a2:	2a01      	cmp	r2, #1
 80022a4:	d900      	bls.n	80022a8 <__aeabi_dmul+0x9c>
 80022a6:	e149      	b.n	800253c <__aeabi_dmul+0x330>
 80022a8:	2e02      	cmp	r6, #2
 80022aa:	d100      	bne.n	80022ae <__aeabi_dmul+0xa2>
 80022ac:	e0ca      	b.n	8002444 <__aeabi_dmul+0x238>
 80022ae:	2e01      	cmp	r6, #1
 80022b0:	d13d      	bne.n	800232e <__aeabi_dmul+0x122>
 80022b2:	2300      	movs	r3, #0
 80022b4:	2400      	movs	r4, #0
 80022b6:	2200      	movs	r2, #0
 80022b8:	0010      	movs	r0, r2
 80022ba:	465a      	mov	r2, fp
 80022bc:	051b      	lsls	r3, r3, #20
 80022be:	4323      	orrs	r3, r4
 80022c0:	07d2      	lsls	r2, r2, #31
 80022c2:	4313      	orrs	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	b007      	add	sp, #28
 80022c8:	bcf0      	pop	{r4, r5, r6, r7}
 80022ca:	46bb      	mov	fp, r7
 80022cc:	46b2      	mov	sl, r6
 80022ce:	46a9      	mov	r9, r5
 80022d0:	46a0      	mov	r8, r4
 80022d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d4:	4b92      	ldr	r3, [pc, #584]	@ (8002520 <__aeabi_dmul+0x314>)
 80022d6:	4326      	orrs	r6, r4
 80022d8:	18eb      	adds	r3, r5, r3
 80022da:	2e00      	cmp	r6, #0
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dmul+0xd4>
 80022de:	e0bb      	b.n	8002458 <__aeabi_dmul+0x24c>
 80022e0:	2203      	movs	r2, #3
 80022e2:	4641      	mov	r1, r8
 80022e4:	4311      	orrs	r1, r2
 80022e6:	465a      	mov	r2, fp
 80022e8:	4688      	mov	r8, r1
 80022ea:	9900      	ldr	r1, [sp, #0]
 80022ec:	404a      	eors	r2, r1
 80022ee:	2180      	movs	r1, #128	@ 0x80
 80022f0:	0109      	lsls	r1, r1, #4
 80022f2:	468c      	mov	ip, r1
 80022f4:	0029      	movs	r1, r5
 80022f6:	4461      	add	r1, ip
 80022f8:	9101      	str	r1, [sp, #4]
 80022fa:	4641      	mov	r1, r8
 80022fc:	290a      	cmp	r1, #10
 80022fe:	dd00      	ble.n	8002302 <__aeabi_dmul+0xf6>
 8002300:	e233      	b.n	800276a <__aeabi_dmul+0x55e>
 8002302:	4693      	mov	fp, r2
 8002304:	2603      	movs	r6, #3
 8002306:	4642      	mov	r2, r8
 8002308:	2701      	movs	r7, #1
 800230a:	4097      	lsls	r7, r2
 800230c:	21a6      	movs	r1, #166	@ 0xa6
 800230e:	003a      	movs	r2, r7
 8002310:	00c9      	lsls	r1, r1, #3
 8002312:	400a      	ands	r2, r1
 8002314:	420f      	tst	r7, r1
 8002316:	d031      	beq.n	800237c <__aeabi_dmul+0x170>
 8002318:	9e02      	ldr	r6, [sp, #8]
 800231a:	2e02      	cmp	r6, #2
 800231c:	d100      	bne.n	8002320 <__aeabi_dmul+0x114>
 800231e:	e235      	b.n	800278c <__aeabi_dmul+0x580>
 8002320:	2e03      	cmp	r6, #3
 8002322:	d100      	bne.n	8002326 <__aeabi_dmul+0x11a>
 8002324:	e1d2      	b.n	80026cc <__aeabi_dmul+0x4c0>
 8002326:	4654      	mov	r4, sl
 8002328:	4648      	mov	r0, r9
 800232a:	2e01      	cmp	r6, #1
 800232c:	d0c1      	beq.n	80022b2 <__aeabi_dmul+0xa6>
 800232e:	9a01      	ldr	r2, [sp, #4]
 8002330:	4b7d      	ldr	r3, [pc, #500]	@ (8002528 <__aeabi_dmul+0x31c>)
 8002332:	4694      	mov	ip, r2
 8002334:	4463      	add	r3, ip
 8002336:	2b00      	cmp	r3, #0
 8002338:	dc00      	bgt.n	800233c <__aeabi_dmul+0x130>
 800233a:	e0c0      	b.n	80024be <__aeabi_dmul+0x2b2>
 800233c:	0742      	lsls	r2, r0, #29
 800233e:	d009      	beq.n	8002354 <__aeabi_dmul+0x148>
 8002340:	220f      	movs	r2, #15
 8002342:	4002      	ands	r2, r0
 8002344:	2a04      	cmp	r2, #4
 8002346:	d005      	beq.n	8002354 <__aeabi_dmul+0x148>
 8002348:	1d02      	adds	r2, r0, #4
 800234a:	4282      	cmp	r2, r0
 800234c:	4180      	sbcs	r0, r0
 800234e:	4240      	negs	r0, r0
 8002350:	1824      	adds	r4, r4, r0
 8002352:	0010      	movs	r0, r2
 8002354:	01e2      	lsls	r2, r4, #7
 8002356:	d506      	bpl.n	8002366 <__aeabi_dmul+0x15a>
 8002358:	4b74      	ldr	r3, [pc, #464]	@ (800252c <__aeabi_dmul+0x320>)
 800235a:	9a01      	ldr	r2, [sp, #4]
 800235c:	401c      	ands	r4, r3
 800235e:	2380      	movs	r3, #128	@ 0x80
 8002360:	4694      	mov	ip, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4463      	add	r3, ip
 8002366:	4a72      	ldr	r2, [pc, #456]	@ (8002530 <__aeabi_dmul+0x324>)
 8002368:	4293      	cmp	r3, r2
 800236a:	dc6b      	bgt.n	8002444 <__aeabi_dmul+0x238>
 800236c:	0762      	lsls	r2, r4, #29
 800236e:	08c0      	lsrs	r0, r0, #3
 8002370:	0264      	lsls	r4, r4, #9
 8002372:	055b      	lsls	r3, r3, #21
 8002374:	4302      	orrs	r2, r0
 8002376:	0b24      	lsrs	r4, r4, #12
 8002378:	0d5b      	lsrs	r3, r3, #21
 800237a:	e79d      	b.n	80022b8 <__aeabi_dmul+0xac>
 800237c:	2190      	movs	r1, #144	@ 0x90
 800237e:	0089      	lsls	r1, r1, #2
 8002380:	420f      	tst	r7, r1
 8002382:	d163      	bne.n	800244c <__aeabi_dmul+0x240>
 8002384:	2288      	movs	r2, #136	@ 0x88
 8002386:	423a      	tst	r2, r7
 8002388:	d100      	bne.n	800238c <__aeabi_dmul+0x180>
 800238a:	e0d7      	b.n	800253c <__aeabi_dmul+0x330>
 800238c:	9b00      	ldr	r3, [sp, #0]
 800238e:	46a2      	mov	sl, r4
 8002390:	469b      	mov	fp, r3
 8002392:	4681      	mov	r9, r0
 8002394:	9602      	str	r6, [sp, #8]
 8002396:	e7bf      	b.n	8002318 <__aeabi_dmul+0x10c>
 8002398:	0023      	movs	r3, r4
 800239a:	4333      	orrs	r3, r6
 800239c:	d100      	bne.n	80023a0 <__aeabi_dmul+0x194>
 800239e:	e07f      	b.n	80024a0 <__aeabi_dmul+0x294>
 80023a0:	2c00      	cmp	r4, #0
 80023a2:	d100      	bne.n	80023a6 <__aeabi_dmul+0x19a>
 80023a4:	e1ad      	b.n	8002702 <__aeabi_dmul+0x4f6>
 80023a6:	0020      	movs	r0, r4
 80023a8:	f000 feec 	bl	8003184 <__clzsi2>
 80023ac:	0002      	movs	r2, r0
 80023ae:	0003      	movs	r3, r0
 80023b0:	3a0b      	subs	r2, #11
 80023b2:	201d      	movs	r0, #29
 80023b4:	0019      	movs	r1, r3
 80023b6:	1a82      	subs	r2, r0, r2
 80023b8:	0030      	movs	r0, r6
 80023ba:	3908      	subs	r1, #8
 80023bc:	40d0      	lsrs	r0, r2
 80023be:	408c      	lsls	r4, r1
 80023c0:	4304      	orrs	r4, r0
 80023c2:	0030      	movs	r0, r6
 80023c4:	4088      	lsls	r0, r1
 80023c6:	4a5b      	ldr	r2, [pc, #364]	@ (8002534 <__aeabi_dmul+0x328>)
 80023c8:	1aeb      	subs	r3, r5, r3
 80023ca:	4694      	mov	ip, r2
 80023cc:	4463      	add	r3, ip
 80023ce:	1c5a      	adds	r2, r3, #1
 80023d0:	9201      	str	r2, [sp, #4]
 80023d2:	4642      	mov	r2, r8
 80023d4:	2600      	movs	r6, #0
 80023d6:	2a0a      	cmp	r2, #10
 80023d8:	dc00      	bgt.n	80023dc <__aeabi_dmul+0x1d0>
 80023da:	e75a      	b.n	8002292 <__aeabi_dmul+0x86>
 80023dc:	e79c      	b.n	8002318 <__aeabi_dmul+0x10c>
 80023de:	4653      	mov	r3, sl
 80023e0:	4303      	orrs	r3, r0
 80023e2:	4699      	mov	r9, r3
 80023e4:	d054      	beq.n	8002490 <__aeabi_dmul+0x284>
 80023e6:	4653      	mov	r3, sl
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d100      	bne.n	80023ee <__aeabi_dmul+0x1e2>
 80023ec:	e177      	b.n	80026de <__aeabi_dmul+0x4d2>
 80023ee:	4650      	mov	r0, sl
 80023f0:	f000 fec8 	bl	8003184 <__clzsi2>
 80023f4:	230b      	movs	r3, #11
 80023f6:	425b      	negs	r3, r3
 80023f8:	469c      	mov	ip, r3
 80023fa:	0002      	movs	r2, r0
 80023fc:	4484      	add	ip, r0
 80023fe:	0011      	movs	r1, r2
 8002400:	4650      	mov	r0, sl
 8002402:	3908      	subs	r1, #8
 8002404:	4088      	lsls	r0, r1
 8002406:	231d      	movs	r3, #29
 8002408:	4680      	mov	r8, r0
 800240a:	4660      	mov	r0, ip
 800240c:	1a1b      	subs	r3, r3, r0
 800240e:	0020      	movs	r0, r4
 8002410:	40d8      	lsrs	r0, r3
 8002412:	0003      	movs	r3, r0
 8002414:	4640      	mov	r0, r8
 8002416:	4303      	orrs	r3, r0
 8002418:	469a      	mov	sl, r3
 800241a:	0023      	movs	r3, r4
 800241c:	408b      	lsls	r3, r1
 800241e:	4699      	mov	r9, r3
 8002420:	2300      	movs	r3, #0
 8002422:	4d44      	ldr	r5, [pc, #272]	@ (8002534 <__aeabi_dmul+0x328>)
 8002424:	4698      	mov	r8, r3
 8002426:	1aad      	subs	r5, r5, r2
 8002428:	9302      	str	r3, [sp, #8]
 800242a:	e715      	b.n	8002258 <__aeabi_dmul+0x4c>
 800242c:	4652      	mov	r2, sl
 800242e:	4302      	orrs	r2, r0
 8002430:	4691      	mov	r9, r2
 8002432:	d126      	bne.n	8002482 <__aeabi_dmul+0x276>
 8002434:	2200      	movs	r2, #0
 8002436:	001d      	movs	r5, r3
 8002438:	2302      	movs	r3, #2
 800243a:	4692      	mov	sl, r2
 800243c:	3208      	adds	r2, #8
 800243e:	4690      	mov	r8, r2
 8002440:	9302      	str	r3, [sp, #8]
 8002442:	e709      	b.n	8002258 <__aeabi_dmul+0x4c>
 8002444:	2400      	movs	r4, #0
 8002446:	2200      	movs	r2, #0
 8002448:	4b35      	ldr	r3, [pc, #212]	@ (8002520 <__aeabi_dmul+0x314>)
 800244a:	e735      	b.n	80022b8 <__aeabi_dmul+0xac>
 800244c:	2300      	movs	r3, #0
 800244e:	2480      	movs	r4, #128	@ 0x80
 8002450:	469b      	mov	fp, r3
 8002452:	0324      	lsls	r4, r4, #12
 8002454:	4b32      	ldr	r3, [pc, #200]	@ (8002520 <__aeabi_dmul+0x314>)
 8002456:	e72f      	b.n	80022b8 <__aeabi_dmul+0xac>
 8002458:	2202      	movs	r2, #2
 800245a:	4641      	mov	r1, r8
 800245c:	4311      	orrs	r1, r2
 800245e:	2280      	movs	r2, #128	@ 0x80
 8002460:	0112      	lsls	r2, r2, #4
 8002462:	4694      	mov	ip, r2
 8002464:	002a      	movs	r2, r5
 8002466:	4462      	add	r2, ip
 8002468:	4688      	mov	r8, r1
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	290a      	cmp	r1, #10
 800246e:	dd00      	ble.n	8002472 <__aeabi_dmul+0x266>
 8002470:	e752      	b.n	8002318 <__aeabi_dmul+0x10c>
 8002472:	465a      	mov	r2, fp
 8002474:	2000      	movs	r0, #0
 8002476:	9900      	ldr	r1, [sp, #0]
 8002478:	0004      	movs	r4, r0
 800247a:	404a      	eors	r2, r1
 800247c:	4693      	mov	fp, r2
 800247e:	2602      	movs	r6, #2
 8002480:	e70b      	b.n	800229a <__aeabi_dmul+0x8e>
 8002482:	220c      	movs	r2, #12
 8002484:	001d      	movs	r5, r3
 8002486:	2303      	movs	r3, #3
 8002488:	4681      	mov	r9, r0
 800248a:	4690      	mov	r8, r2
 800248c:	9302      	str	r3, [sp, #8]
 800248e:	e6e3      	b.n	8002258 <__aeabi_dmul+0x4c>
 8002490:	2300      	movs	r3, #0
 8002492:	469a      	mov	sl, r3
 8002494:	3304      	adds	r3, #4
 8002496:	4698      	mov	r8, r3
 8002498:	3b03      	subs	r3, #3
 800249a:	2500      	movs	r5, #0
 800249c:	9302      	str	r3, [sp, #8]
 800249e:	e6db      	b.n	8002258 <__aeabi_dmul+0x4c>
 80024a0:	4642      	mov	r2, r8
 80024a2:	3301      	adds	r3, #1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	002b      	movs	r3, r5
 80024a8:	4690      	mov	r8, r2
 80024aa:	1c5a      	adds	r2, r3, #1
 80024ac:	9201      	str	r2, [sp, #4]
 80024ae:	4642      	mov	r2, r8
 80024b0:	2400      	movs	r4, #0
 80024b2:	2000      	movs	r0, #0
 80024b4:	2601      	movs	r6, #1
 80024b6:	2a0a      	cmp	r2, #10
 80024b8:	dc00      	bgt.n	80024bc <__aeabi_dmul+0x2b0>
 80024ba:	e6ea      	b.n	8002292 <__aeabi_dmul+0x86>
 80024bc:	e72c      	b.n	8002318 <__aeabi_dmul+0x10c>
 80024be:	2201      	movs	r2, #1
 80024c0:	1ad2      	subs	r2, r2, r3
 80024c2:	2a38      	cmp	r2, #56	@ 0x38
 80024c4:	dd00      	ble.n	80024c8 <__aeabi_dmul+0x2bc>
 80024c6:	e6f4      	b.n	80022b2 <__aeabi_dmul+0xa6>
 80024c8:	2a1f      	cmp	r2, #31
 80024ca:	dc00      	bgt.n	80024ce <__aeabi_dmul+0x2c2>
 80024cc:	e12a      	b.n	8002724 <__aeabi_dmul+0x518>
 80024ce:	211f      	movs	r1, #31
 80024d0:	4249      	negs	r1, r1
 80024d2:	1acb      	subs	r3, r1, r3
 80024d4:	0021      	movs	r1, r4
 80024d6:	40d9      	lsrs	r1, r3
 80024d8:	000b      	movs	r3, r1
 80024da:	2a20      	cmp	r2, #32
 80024dc:	d005      	beq.n	80024ea <__aeabi_dmul+0x2de>
 80024de:	4a16      	ldr	r2, [pc, #88]	@ (8002538 <__aeabi_dmul+0x32c>)
 80024e0:	9d01      	ldr	r5, [sp, #4]
 80024e2:	4694      	mov	ip, r2
 80024e4:	4465      	add	r5, ip
 80024e6:	40ac      	lsls	r4, r5
 80024e8:	4320      	orrs	r0, r4
 80024ea:	1e42      	subs	r2, r0, #1
 80024ec:	4190      	sbcs	r0, r2
 80024ee:	4318      	orrs	r0, r3
 80024f0:	2307      	movs	r3, #7
 80024f2:	0019      	movs	r1, r3
 80024f4:	2400      	movs	r4, #0
 80024f6:	4001      	ands	r1, r0
 80024f8:	4203      	tst	r3, r0
 80024fa:	d00c      	beq.n	8002516 <__aeabi_dmul+0x30a>
 80024fc:	230f      	movs	r3, #15
 80024fe:	4003      	ands	r3, r0
 8002500:	2b04      	cmp	r3, #4
 8002502:	d100      	bne.n	8002506 <__aeabi_dmul+0x2fa>
 8002504:	e140      	b.n	8002788 <__aeabi_dmul+0x57c>
 8002506:	1d03      	adds	r3, r0, #4
 8002508:	4283      	cmp	r3, r0
 800250a:	41a4      	sbcs	r4, r4
 800250c:	0018      	movs	r0, r3
 800250e:	4264      	negs	r4, r4
 8002510:	0761      	lsls	r1, r4, #29
 8002512:	0264      	lsls	r4, r4, #9
 8002514:	0b24      	lsrs	r4, r4, #12
 8002516:	08c2      	lsrs	r2, r0, #3
 8002518:	2300      	movs	r3, #0
 800251a:	430a      	orrs	r2, r1
 800251c:	e6cc      	b.n	80022b8 <__aeabi_dmul+0xac>
 800251e:	46c0      	nop			@ (mov r8, r8)
 8002520:	000007ff 	.word	0x000007ff
 8002524:	fffffc01 	.word	0xfffffc01
 8002528:	000003ff 	.word	0x000003ff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	000007fe 	.word	0x000007fe
 8002534:	fffffc0d 	.word	0xfffffc0d
 8002538:	0000043e 	.word	0x0000043e
 800253c:	4649      	mov	r1, r9
 800253e:	464a      	mov	r2, r9
 8002540:	0409      	lsls	r1, r1, #16
 8002542:	0c09      	lsrs	r1, r1, #16
 8002544:	000d      	movs	r5, r1
 8002546:	0c16      	lsrs	r6, r2, #16
 8002548:	0c02      	lsrs	r2, r0, #16
 800254a:	0400      	lsls	r0, r0, #16
 800254c:	0c00      	lsrs	r0, r0, #16
 800254e:	4345      	muls	r5, r0
 8002550:	46ac      	mov	ip, r5
 8002552:	0005      	movs	r5, r0
 8002554:	4375      	muls	r5, r6
 8002556:	46a8      	mov	r8, r5
 8002558:	0015      	movs	r5, r2
 800255a:	000f      	movs	r7, r1
 800255c:	4375      	muls	r5, r6
 800255e:	9200      	str	r2, [sp, #0]
 8002560:	9502      	str	r5, [sp, #8]
 8002562:	002a      	movs	r2, r5
 8002564:	9d00      	ldr	r5, [sp, #0]
 8002566:	436f      	muls	r7, r5
 8002568:	4665      	mov	r5, ip
 800256a:	0c2d      	lsrs	r5, r5, #16
 800256c:	46a9      	mov	r9, r5
 800256e:	4447      	add	r7, r8
 8002570:	444f      	add	r7, r9
 8002572:	45b8      	cmp	r8, r7
 8002574:	d905      	bls.n	8002582 <__aeabi_dmul+0x376>
 8002576:	0015      	movs	r5, r2
 8002578:	2280      	movs	r2, #128	@ 0x80
 800257a:	0252      	lsls	r2, r2, #9
 800257c:	4690      	mov	r8, r2
 800257e:	4445      	add	r5, r8
 8002580:	9502      	str	r5, [sp, #8]
 8002582:	0c3d      	lsrs	r5, r7, #16
 8002584:	9503      	str	r5, [sp, #12]
 8002586:	4665      	mov	r5, ip
 8002588:	042d      	lsls	r5, r5, #16
 800258a:	043f      	lsls	r7, r7, #16
 800258c:	0c2d      	lsrs	r5, r5, #16
 800258e:	46ac      	mov	ip, r5
 8002590:	003d      	movs	r5, r7
 8002592:	4465      	add	r5, ip
 8002594:	9504      	str	r5, [sp, #16]
 8002596:	0c25      	lsrs	r5, r4, #16
 8002598:	0424      	lsls	r4, r4, #16
 800259a:	0c24      	lsrs	r4, r4, #16
 800259c:	46ac      	mov	ip, r5
 800259e:	0025      	movs	r5, r4
 80025a0:	4375      	muls	r5, r6
 80025a2:	46a8      	mov	r8, r5
 80025a4:	4665      	mov	r5, ip
 80025a6:	000f      	movs	r7, r1
 80025a8:	4369      	muls	r1, r5
 80025aa:	4441      	add	r1, r8
 80025ac:	4689      	mov	r9, r1
 80025ae:	4367      	muls	r7, r4
 80025b0:	0c39      	lsrs	r1, r7, #16
 80025b2:	4449      	add	r1, r9
 80025b4:	436e      	muls	r6, r5
 80025b6:	4588      	cmp	r8, r1
 80025b8:	d903      	bls.n	80025c2 <__aeabi_dmul+0x3b6>
 80025ba:	2280      	movs	r2, #128	@ 0x80
 80025bc:	0252      	lsls	r2, r2, #9
 80025be:	4690      	mov	r8, r2
 80025c0:	4446      	add	r6, r8
 80025c2:	0c0d      	lsrs	r5, r1, #16
 80025c4:	46a8      	mov	r8, r5
 80025c6:	0035      	movs	r5, r6
 80025c8:	4445      	add	r5, r8
 80025ca:	9505      	str	r5, [sp, #20]
 80025cc:	9d03      	ldr	r5, [sp, #12]
 80025ce:	043f      	lsls	r7, r7, #16
 80025d0:	46a8      	mov	r8, r5
 80025d2:	0c3f      	lsrs	r7, r7, #16
 80025d4:	0409      	lsls	r1, r1, #16
 80025d6:	19c9      	adds	r1, r1, r7
 80025d8:	4488      	add	r8, r1
 80025da:	4645      	mov	r5, r8
 80025dc:	9503      	str	r5, [sp, #12]
 80025de:	4655      	mov	r5, sl
 80025e0:	042e      	lsls	r6, r5, #16
 80025e2:	0c36      	lsrs	r6, r6, #16
 80025e4:	0c2f      	lsrs	r7, r5, #16
 80025e6:	0035      	movs	r5, r6
 80025e8:	4345      	muls	r5, r0
 80025ea:	4378      	muls	r0, r7
 80025ec:	4681      	mov	r9, r0
 80025ee:	0038      	movs	r0, r7
 80025f0:	46a8      	mov	r8, r5
 80025f2:	0c2d      	lsrs	r5, r5, #16
 80025f4:	46aa      	mov	sl, r5
 80025f6:	9a00      	ldr	r2, [sp, #0]
 80025f8:	4350      	muls	r0, r2
 80025fa:	4372      	muls	r2, r6
 80025fc:	444a      	add	r2, r9
 80025fe:	4452      	add	r2, sl
 8002600:	4591      	cmp	r9, r2
 8002602:	d903      	bls.n	800260c <__aeabi_dmul+0x400>
 8002604:	2580      	movs	r5, #128	@ 0x80
 8002606:	026d      	lsls	r5, r5, #9
 8002608:	46a9      	mov	r9, r5
 800260a:	4448      	add	r0, r9
 800260c:	0c15      	lsrs	r5, r2, #16
 800260e:	46a9      	mov	r9, r5
 8002610:	4645      	mov	r5, r8
 8002612:	042d      	lsls	r5, r5, #16
 8002614:	0c2d      	lsrs	r5, r5, #16
 8002616:	46a8      	mov	r8, r5
 8002618:	4665      	mov	r5, ip
 800261a:	437d      	muls	r5, r7
 800261c:	0412      	lsls	r2, r2, #16
 800261e:	4448      	add	r0, r9
 8002620:	4490      	add	r8, r2
 8002622:	46a9      	mov	r9, r5
 8002624:	0032      	movs	r2, r6
 8002626:	4665      	mov	r5, ip
 8002628:	4362      	muls	r2, r4
 800262a:	436e      	muls	r6, r5
 800262c:	437c      	muls	r4, r7
 800262e:	0c17      	lsrs	r7, r2, #16
 8002630:	1936      	adds	r6, r6, r4
 8002632:	19bf      	adds	r7, r7, r6
 8002634:	42bc      	cmp	r4, r7
 8002636:	d903      	bls.n	8002640 <__aeabi_dmul+0x434>
 8002638:	2480      	movs	r4, #128	@ 0x80
 800263a:	0264      	lsls	r4, r4, #9
 800263c:	46a4      	mov	ip, r4
 800263e:	44e1      	add	r9, ip
 8002640:	9c02      	ldr	r4, [sp, #8]
 8002642:	9e03      	ldr	r6, [sp, #12]
 8002644:	46a4      	mov	ip, r4
 8002646:	9d05      	ldr	r5, [sp, #20]
 8002648:	4466      	add	r6, ip
 800264a:	428e      	cmp	r6, r1
 800264c:	4189      	sbcs	r1, r1
 800264e:	46ac      	mov	ip, r5
 8002650:	0412      	lsls	r2, r2, #16
 8002652:	043c      	lsls	r4, r7, #16
 8002654:	0c12      	lsrs	r2, r2, #16
 8002656:	18a2      	adds	r2, r4, r2
 8002658:	4462      	add	r2, ip
 800265a:	4249      	negs	r1, r1
 800265c:	1854      	adds	r4, r2, r1
 800265e:	4446      	add	r6, r8
 8002660:	46a4      	mov	ip, r4
 8002662:	4546      	cmp	r6, r8
 8002664:	41a4      	sbcs	r4, r4
 8002666:	4682      	mov	sl, r0
 8002668:	4264      	negs	r4, r4
 800266a:	46a0      	mov	r8, r4
 800266c:	42aa      	cmp	r2, r5
 800266e:	4192      	sbcs	r2, r2
 8002670:	458c      	cmp	ip, r1
 8002672:	4189      	sbcs	r1, r1
 8002674:	44e2      	add	sl, ip
 8002676:	44d0      	add	r8, sl
 8002678:	4249      	negs	r1, r1
 800267a:	4252      	negs	r2, r2
 800267c:	430a      	orrs	r2, r1
 800267e:	45a0      	cmp	r8, r4
 8002680:	41a4      	sbcs	r4, r4
 8002682:	4582      	cmp	sl, r0
 8002684:	4189      	sbcs	r1, r1
 8002686:	4264      	negs	r4, r4
 8002688:	4249      	negs	r1, r1
 800268a:	430c      	orrs	r4, r1
 800268c:	4641      	mov	r1, r8
 800268e:	0c3f      	lsrs	r7, r7, #16
 8002690:	19d2      	adds	r2, r2, r7
 8002692:	1912      	adds	r2, r2, r4
 8002694:	0dcc      	lsrs	r4, r1, #23
 8002696:	9904      	ldr	r1, [sp, #16]
 8002698:	0270      	lsls	r0, r6, #9
 800269a:	4308      	orrs	r0, r1
 800269c:	1e41      	subs	r1, r0, #1
 800269e:	4188      	sbcs	r0, r1
 80026a0:	4641      	mov	r1, r8
 80026a2:	444a      	add	r2, r9
 80026a4:	0df6      	lsrs	r6, r6, #23
 80026a6:	0252      	lsls	r2, r2, #9
 80026a8:	4330      	orrs	r0, r6
 80026aa:	0249      	lsls	r1, r1, #9
 80026ac:	4314      	orrs	r4, r2
 80026ae:	4308      	orrs	r0, r1
 80026b0:	01d2      	lsls	r2, r2, #7
 80026b2:	d535      	bpl.n	8002720 <__aeabi_dmul+0x514>
 80026b4:	2201      	movs	r2, #1
 80026b6:	0843      	lsrs	r3, r0, #1
 80026b8:	4002      	ands	r2, r0
 80026ba:	4313      	orrs	r3, r2
 80026bc:	07e0      	lsls	r0, r4, #31
 80026be:	4318      	orrs	r0, r3
 80026c0:	0864      	lsrs	r4, r4, #1
 80026c2:	e634      	b.n	800232e <__aeabi_dmul+0x122>
 80026c4:	9b00      	ldr	r3, [sp, #0]
 80026c6:	46a2      	mov	sl, r4
 80026c8:	469b      	mov	fp, r3
 80026ca:	4681      	mov	r9, r0
 80026cc:	2480      	movs	r4, #128	@ 0x80
 80026ce:	4653      	mov	r3, sl
 80026d0:	0324      	lsls	r4, r4, #12
 80026d2:	431c      	orrs	r4, r3
 80026d4:	0324      	lsls	r4, r4, #12
 80026d6:	464a      	mov	r2, r9
 80026d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002794 <__aeabi_dmul+0x588>)
 80026da:	0b24      	lsrs	r4, r4, #12
 80026dc:	e5ec      	b.n	80022b8 <__aeabi_dmul+0xac>
 80026de:	f000 fd51 	bl	8003184 <__clzsi2>
 80026e2:	2315      	movs	r3, #21
 80026e4:	469c      	mov	ip, r3
 80026e6:	4484      	add	ip, r0
 80026e8:	0002      	movs	r2, r0
 80026ea:	4663      	mov	r3, ip
 80026ec:	3220      	adds	r2, #32
 80026ee:	2b1c      	cmp	r3, #28
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x4e8>
 80026f2:	e684      	b.n	80023fe <__aeabi_dmul+0x1f2>
 80026f4:	2300      	movs	r3, #0
 80026f6:	4699      	mov	r9, r3
 80026f8:	0023      	movs	r3, r4
 80026fa:	3808      	subs	r0, #8
 80026fc:	4083      	lsls	r3, r0
 80026fe:	469a      	mov	sl, r3
 8002700:	e68e      	b.n	8002420 <__aeabi_dmul+0x214>
 8002702:	f000 fd3f 	bl	8003184 <__clzsi2>
 8002706:	0002      	movs	r2, r0
 8002708:	0003      	movs	r3, r0
 800270a:	3215      	adds	r2, #21
 800270c:	3320      	adds	r3, #32
 800270e:	2a1c      	cmp	r2, #28
 8002710:	dc00      	bgt.n	8002714 <__aeabi_dmul+0x508>
 8002712:	e64e      	b.n	80023b2 <__aeabi_dmul+0x1a6>
 8002714:	0002      	movs	r2, r0
 8002716:	0034      	movs	r4, r6
 8002718:	3a08      	subs	r2, #8
 800271a:	2000      	movs	r0, #0
 800271c:	4094      	lsls	r4, r2
 800271e:	e652      	b.n	80023c6 <__aeabi_dmul+0x1ba>
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	e604      	b.n	800232e <__aeabi_dmul+0x122>
 8002724:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <__aeabi_dmul+0x58c>)
 8002726:	0021      	movs	r1, r4
 8002728:	469c      	mov	ip, r3
 800272a:	0003      	movs	r3, r0
 800272c:	9d01      	ldr	r5, [sp, #4]
 800272e:	40d3      	lsrs	r3, r2
 8002730:	4465      	add	r5, ip
 8002732:	40a9      	lsls	r1, r5
 8002734:	4319      	orrs	r1, r3
 8002736:	0003      	movs	r3, r0
 8002738:	40ab      	lsls	r3, r5
 800273a:	1e58      	subs	r0, r3, #1
 800273c:	4183      	sbcs	r3, r0
 800273e:	4319      	orrs	r1, r3
 8002740:	0008      	movs	r0, r1
 8002742:	40d4      	lsrs	r4, r2
 8002744:	074b      	lsls	r3, r1, #29
 8002746:	d009      	beq.n	800275c <__aeabi_dmul+0x550>
 8002748:	230f      	movs	r3, #15
 800274a:	400b      	ands	r3, r1
 800274c:	2b04      	cmp	r3, #4
 800274e:	d005      	beq.n	800275c <__aeabi_dmul+0x550>
 8002750:	1d0b      	adds	r3, r1, #4
 8002752:	428b      	cmp	r3, r1
 8002754:	4180      	sbcs	r0, r0
 8002756:	4240      	negs	r0, r0
 8002758:	1824      	adds	r4, r4, r0
 800275a:	0018      	movs	r0, r3
 800275c:	0223      	lsls	r3, r4, #8
 800275e:	d400      	bmi.n	8002762 <__aeabi_dmul+0x556>
 8002760:	e6d6      	b.n	8002510 <__aeabi_dmul+0x304>
 8002762:	2301      	movs	r3, #1
 8002764:	2400      	movs	r4, #0
 8002766:	2200      	movs	r2, #0
 8002768:	e5a6      	b.n	80022b8 <__aeabi_dmul+0xac>
 800276a:	290f      	cmp	r1, #15
 800276c:	d1aa      	bne.n	80026c4 <__aeabi_dmul+0x4b8>
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	4652      	mov	r2, sl
 8002772:	031b      	lsls	r3, r3, #12
 8002774:	421a      	tst	r2, r3
 8002776:	d0a9      	beq.n	80026cc <__aeabi_dmul+0x4c0>
 8002778:	421c      	tst	r4, r3
 800277a:	d1a7      	bne.n	80026cc <__aeabi_dmul+0x4c0>
 800277c:	431c      	orrs	r4, r3
 800277e:	9b00      	ldr	r3, [sp, #0]
 8002780:	0002      	movs	r2, r0
 8002782:	469b      	mov	fp, r3
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <__aeabi_dmul+0x588>)
 8002786:	e597      	b.n	80022b8 <__aeabi_dmul+0xac>
 8002788:	2400      	movs	r4, #0
 800278a:	e6c1      	b.n	8002510 <__aeabi_dmul+0x304>
 800278c:	2400      	movs	r4, #0
 800278e:	4b01      	ldr	r3, [pc, #4]	@ (8002794 <__aeabi_dmul+0x588>)
 8002790:	0022      	movs	r2, r4
 8002792:	e591      	b.n	80022b8 <__aeabi_dmul+0xac>
 8002794:	000007ff 	.word	0x000007ff
 8002798:	0000041e 	.word	0x0000041e

0800279c <__aeabi_dsub>:
 800279c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800279e:	464e      	mov	r6, r9
 80027a0:	4645      	mov	r5, r8
 80027a2:	46de      	mov	lr, fp
 80027a4:	4657      	mov	r7, sl
 80027a6:	b5e0      	push	{r5, r6, r7, lr}
 80027a8:	b085      	sub	sp, #20
 80027aa:	9000      	str	r0, [sp, #0]
 80027ac:	9101      	str	r1, [sp, #4]
 80027ae:	030c      	lsls	r4, r1, #12
 80027b0:	004f      	lsls	r7, r1, #1
 80027b2:	0fce      	lsrs	r6, r1, #31
 80027b4:	0a61      	lsrs	r1, r4, #9
 80027b6:	9c00      	ldr	r4, [sp, #0]
 80027b8:	46b0      	mov	r8, r6
 80027ba:	0f64      	lsrs	r4, r4, #29
 80027bc:	430c      	orrs	r4, r1
 80027be:	9900      	ldr	r1, [sp, #0]
 80027c0:	0d7f      	lsrs	r7, r7, #21
 80027c2:	00c8      	lsls	r0, r1, #3
 80027c4:	0011      	movs	r1, r2
 80027c6:	001a      	movs	r2, r3
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	469c      	mov	ip, r3
 80027cc:	9100      	str	r1, [sp, #0]
 80027ce:	9201      	str	r2, [sp, #4]
 80027d0:	0051      	lsls	r1, r2, #1
 80027d2:	0d4b      	lsrs	r3, r1, #21
 80027d4:	4699      	mov	r9, r3
 80027d6:	9b01      	ldr	r3, [sp, #4]
 80027d8:	9d00      	ldr	r5, [sp, #0]
 80027da:	0fd9      	lsrs	r1, r3, #31
 80027dc:	4663      	mov	r3, ip
 80027de:	0f6a      	lsrs	r2, r5, #29
 80027e0:	0a5b      	lsrs	r3, r3, #9
 80027e2:	4313      	orrs	r3, r2
 80027e4:	00ea      	lsls	r2, r5, #3
 80027e6:	4694      	mov	ip, r2
 80027e8:	4693      	mov	fp, r2
 80027ea:	4ac1      	ldr	r2, [pc, #772]	@ (8002af0 <__aeabi_dsub+0x354>)
 80027ec:	9003      	str	r0, [sp, #12]
 80027ee:	9302      	str	r3, [sp, #8]
 80027f0:	4591      	cmp	r9, r2
 80027f2:	d100      	bne.n	80027f6 <__aeabi_dsub+0x5a>
 80027f4:	e0cd      	b.n	8002992 <__aeabi_dsub+0x1f6>
 80027f6:	2501      	movs	r5, #1
 80027f8:	4069      	eors	r1, r5
 80027fa:	464d      	mov	r5, r9
 80027fc:	1b7d      	subs	r5, r7, r5
 80027fe:	46aa      	mov	sl, r5
 8002800:	428e      	cmp	r6, r1
 8002802:	d100      	bne.n	8002806 <__aeabi_dsub+0x6a>
 8002804:	e080      	b.n	8002908 <__aeabi_dsub+0x16c>
 8002806:	2d00      	cmp	r5, #0
 8002808:	dc00      	bgt.n	800280c <__aeabi_dsub+0x70>
 800280a:	e335      	b.n	8002e78 <__aeabi_dsub+0x6dc>
 800280c:	4649      	mov	r1, r9
 800280e:	2900      	cmp	r1, #0
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x78>
 8002812:	e0df      	b.n	80029d4 <__aeabi_dsub+0x238>
 8002814:	4297      	cmp	r7, r2
 8002816:	d100      	bne.n	800281a <__aeabi_dsub+0x7e>
 8002818:	e194      	b.n	8002b44 <__aeabi_dsub+0x3a8>
 800281a:	4652      	mov	r2, sl
 800281c:	2501      	movs	r5, #1
 800281e:	2a38      	cmp	r2, #56	@ 0x38
 8002820:	dc19      	bgt.n	8002856 <__aeabi_dsub+0xba>
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	9b02      	ldr	r3, [sp, #8]
 8002826:	0412      	lsls	r2, r2, #16
 8002828:	4313      	orrs	r3, r2
 800282a:	9302      	str	r3, [sp, #8]
 800282c:	4652      	mov	r2, sl
 800282e:	2a1f      	cmp	r2, #31
 8002830:	dd00      	ble.n	8002834 <__aeabi_dsub+0x98>
 8002832:	e1e3      	b.n	8002bfc <__aeabi_dsub+0x460>
 8002834:	4653      	mov	r3, sl
 8002836:	2220      	movs	r2, #32
 8002838:	4661      	mov	r1, ip
 800283a:	9d02      	ldr	r5, [sp, #8]
 800283c:	1ad2      	subs	r2, r2, r3
 800283e:	4095      	lsls	r5, r2
 8002840:	40d9      	lsrs	r1, r3
 8002842:	430d      	orrs	r5, r1
 8002844:	4661      	mov	r1, ip
 8002846:	4091      	lsls	r1, r2
 8002848:	000a      	movs	r2, r1
 800284a:	1e51      	subs	r1, r2, #1
 800284c:	418a      	sbcs	r2, r1
 800284e:	4315      	orrs	r5, r2
 8002850:	9a02      	ldr	r2, [sp, #8]
 8002852:	40da      	lsrs	r2, r3
 8002854:	1aa4      	subs	r4, r4, r2
 8002856:	1b45      	subs	r5, r0, r5
 8002858:	42a8      	cmp	r0, r5
 800285a:	4180      	sbcs	r0, r0
 800285c:	4240      	negs	r0, r0
 800285e:	1a24      	subs	r4, r4, r0
 8002860:	0223      	lsls	r3, r4, #8
 8002862:	d400      	bmi.n	8002866 <__aeabi_dsub+0xca>
 8002864:	e13d      	b.n	8002ae2 <__aeabi_dsub+0x346>
 8002866:	0264      	lsls	r4, r4, #9
 8002868:	0a64      	lsrs	r4, r4, #9
 800286a:	2c00      	cmp	r4, #0
 800286c:	d100      	bne.n	8002870 <__aeabi_dsub+0xd4>
 800286e:	e147      	b.n	8002b00 <__aeabi_dsub+0x364>
 8002870:	0020      	movs	r0, r4
 8002872:	f000 fc87 	bl	8003184 <__clzsi2>
 8002876:	0003      	movs	r3, r0
 8002878:	3b08      	subs	r3, #8
 800287a:	2120      	movs	r1, #32
 800287c:	0028      	movs	r0, r5
 800287e:	1aca      	subs	r2, r1, r3
 8002880:	40d0      	lsrs	r0, r2
 8002882:	409c      	lsls	r4, r3
 8002884:	0002      	movs	r2, r0
 8002886:	409d      	lsls	r5, r3
 8002888:	4322      	orrs	r2, r4
 800288a:	429f      	cmp	r7, r3
 800288c:	dd00      	ble.n	8002890 <__aeabi_dsub+0xf4>
 800288e:	e177      	b.n	8002b80 <__aeabi_dsub+0x3e4>
 8002890:	1bd8      	subs	r0, r3, r7
 8002892:	3001      	adds	r0, #1
 8002894:	1a09      	subs	r1, r1, r0
 8002896:	002c      	movs	r4, r5
 8002898:	408d      	lsls	r5, r1
 800289a:	40c4      	lsrs	r4, r0
 800289c:	1e6b      	subs	r3, r5, #1
 800289e:	419d      	sbcs	r5, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	40c2      	lsrs	r2, r0
 80028a4:	408b      	lsls	r3, r1
 80028a6:	4325      	orrs	r5, r4
 80028a8:	2700      	movs	r7, #0
 80028aa:	0014      	movs	r4, r2
 80028ac:	431d      	orrs	r5, r3
 80028ae:	076b      	lsls	r3, r5, #29
 80028b0:	d009      	beq.n	80028c6 <__aeabi_dsub+0x12a>
 80028b2:	230f      	movs	r3, #15
 80028b4:	402b      	ands	r3, r5
 80028b6:	2b04      	cmp	r3, #4
 80028b8:	d005      	beq.n	80028c6 <__aeabi_dsub+0x12a>
 80028ba:	1d2b      	adds	r3, r5, #4
 80028bc:	42ab      	cmp	r3, r5
 80028be:	41ad      	sbcs	r5, r5
 80028c0:	426d      	negs	r5, r5
 80028c2:	1964      	adds	r4, r4, r5
 80028c4:	001d      	movs	r5, r3
 80028c6:	0223      	lsls	r3, r4, #8
 80028c8:	d400      	bmi.n	80028cc <__aeabi_dsub+0x130>
 80028ca:	e140      	b.n	8002b4e <__aeabi_dsub+0x3b2>
 80028cc:	4a88      	ldr	r2, [pc, #544]	@ (8002af0 <__aeabi_dsub+0x354>)
 80028ce:	3701      	adds	r7, #1
 80028d0:	4297      	cmp	r7, r2
 80028d2:	d100      	bne.n	80028d6 <__aeabi_dsub+0x13a>
 80028d4:	e101      	b.n	8002ada <__aeabi_dsub+0x33e>
 80028d6:	2601      	movs	r6, #1
 80028d8:	4643      	mov	r3, r8
 80028da:	4986      	ldr	r1, [pc, #536]	@ (8002af4 <__aeabi_dsub+0x358>)
 80028dc:	08ed      	lsrs	r5, r5, #3
 80028de:	4021      	ands	r1, r4
 80028e0:	074a      	lsls	r2, r1, #29
 80028e2:	432a      	orrs	r2, r5
 80028e4:	057c      	lsls	r4, r7, #21
 80028e6:	024d      	lsls	r5, r1, #9
 80028e8:	0b2d      	lsrs	r5, r5, #12
 80028ea:	0d64      	lsrs	r4, r4, #21
 80028ec:	401e      	ands	r6, r3
 80028ee:	0524      	lsls	r4, r4, #20
 80028f0:	432c      	orrs	r4, r5
 80028f2:	07f6      	lsls	r6, r6, #31
 80028f4:	4334      	orrs	r4, r6
 80028f6:	0010      	movs	r0, r2
 80028f8:	0021      	movs	r1, r4
 80028fa:	b005      	add	sp, #20
 80028fc:	bcf0      	pop	{r4, r5, r6, r7}
 80028fe:	46bb      	mov	fp, r7
 8002900:	46b2      	mov	sl, r6
 8002902:	46a9      	mov	r9, r5
 8002904:	46a0      	mov	r8, r4
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002908:	2d00      	cmp	r5, #0
 800290a:	dc00      	bgt.n	800290e <__aeabi_dsub+0x172>
 800290c:	e2d0      	b.n	8002eb0 <__aeabi_dsub+0x714>
 800290e:	4649      	mov	r1, r9
 8002910:	2900      	cmp	r1, #0
 8002912:	d000      	beq.n	8002916 <__aeabi_dsub+0x17a>
 8002914:	e0d4      	b.n	8002ac0 <__aeabi_dsub+0x324>
 8002916:	4661      	mov	r1, ip
 8002918:	9b02      	ldr	r3, [sp, #8]
 800291a:	4319      	orrs	r1, r3
 800291c:	d100      	bne.n	8002920 <__aeabi_dsub+0x184>
 800291e:	e12b      	b.n	8002b78 <__aeabi_dsub+0x3dc>
 8002920:	1e69      	subs	r1, r5, #1
 8002922:	2d01      	cmp	r5, #1
 8002924:	d100      	bne.n	8002928 <__aeabi_dsub+0x18c>
 8002926:	e1d9      	b.n	8002cdc <__aeabi_dsub+0x540>
 8002928:	4295      	cmp	r5, r2
 800292a:	d100      	bne.n	800292e <__aeabi_dsub+0x192>
 800292c:	e10a      	b.n	8002b44 <__aeabi_dsub+0x3a8>
 800292e:	2501      	movs	r5, #1
 8002930:	2938      	cmp	r1, #56	@ 0x38
 8002932:	dc17      	bgt.n	8002964 <__aeabi_dsub+0x1c8>
 8002934:	468a      	mov	sl, r1
 8002936:	4653      	mov	r3, sl
 8002938:	2b1f      	cmp	r3, #31
 800293a:	dd00      	ble.n	800293e <__aeabi_dsub+0x1a2>
 800293c:	e1e7      	b.n	8002d0e <__aeabi_dsub+0x572>
 800293e:	2220      	movs	r2, #32
 8002940:	1ad2      	subs	r2, r2, r3
 8002942:	9b02      	ldr	r3, [sp, #8]
 8002944:	4661      	mov	r1, ip
 8002946:	4093      	lsls	r3, r2
 8002948:	001d      	movs	r5, r3
 800294a:	4653      	mov	r3, sl
 800294c:	40d9      	lsrs	r1, r3
 800294e:	4663      	mov	r3, ip
 8002950:	4093      	lsls	r3, r2
 8002952:	001a      	movs	r2, r3
 8002954:	430d      	orrs	r5, r1
 8002956:	1e51      	subs	r1, r2, #1
 8002958:	418a      	sbcs	r2, r1
 800295a:	4653      	mov	r3, sl
 800295c:	4315      	orrs	r5, r2
 800295e:	9a02      	ldr	r2, [sp, #8]
 8002960:	40da      	lsrs	r2, r3
 8002962:	18a4      	adds	r4, r4, r2
 8002964:	182d      	adds	r5, r5, r0
 8002966:	4285      	cmp	r5, r0
 8002968:	4180      	sbcs	r0, r0
 800296a:	4240      	negs	r0, r0
 800296c:	1824      	adds	r4, r4, r0
 800296e:	0223      	lsls	r3, r4, #8
 8002970:	d400      	bmi.n	8002974 <__aeabi_dsub+0x1d8>
 8002972:	e0b6      	b.n	8002ae2 <__aeabi_dsub+0x346>
 8002974:	4b5e      	ldr	r3, [pc, #376]	@ (8002af0 <__aeabi_dsub+0x354>)
 8002976:	3701      	adds	r7, #1
 8002978:	429f      	cmp	r7, r3
 800297a:	d100      	bne.n	800297e <__aeabi_dsub+0x1e2>
 800297c:	e0ad      	b.n	8002ada <__aeabi_dsub+0x33e>
 800297e:	2101      	movs	r1, #1
 8002980:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <__aeabi_dsub+0x358>)
 8002982:	086a      	lsrs	r2, r5, #1
 8002984:	401c      	ands	r4, r3
 8002986:	4029      	ands	r1, r5
 8002988:	430a      	orrs	r2, r1
 800298a:	07e5      	lsls	r5, r4, #31
 800298c:	4315      	orrs	r5, r2
 800298e:	0864      	lsrs	r4, r4, #1
 8002990:	e78d      	b.n	80028ae <__aeabi_dsub+0x112>
 8002992:	4a59      	ldr	r2, [pc, #356]	@ (8002af8 <__aeabi_dsub+0x35c>)
 8002994:	9b02      	ldr	r3, [sp, #8]
 8002996:	4692      	mov	sl, r2
 8002998:	4662      	mov	r2, ip
 800299a:	44ba      	add	sl, r7
 800299c:	431a      	orrs	r2, r3
 800299e:	d02c      	beq.n	80029fa <__aeabi_dsub+0x25e>
 80029a0:	428e      	cmp	r6, r1
 80029a2:	d02e      	beq.n	8002a02 <__aeabi_dsub+0x266>
 80029a4:	4652      	mov	r2, sl
 80029a6:	2a00      	cmp	r2, #0
 80029a8:	d060      	beq.n	8002a6c <__aeabi_dsub+0x2d0>
 80029aa:	2f00      	cmp	r7, #0
 80029ac:	d100      	bne.n	80029b0 <__aeabi_dsub+0x214>
 80029ae:	e0db      	b.n	8002b68 <__aeabi_dsub+0x3cc>
 80029b0:	4663      	mov	r3, ip
 80029b2:	000e      	movs	r6, r1
 80029b4:	9c02      	ldr	r4, [sp, #8]
 80029b6:	08d8      	lsrs	r0, r3, #3
 80029b8:	0762      	lsls	r2, r4, #29
 80029ba:	4302      	orrs	r2, r0
 80029bc:	08e4      	lsrs	r4, r4, #3
 80029be:	0013      	movs	r3, r2
 80029c0:	4323      	orrs	r3, r4
 80029c2:	d100      	bne.n	80029c6 <__aeabi_dsub+0x22a>
 80029c4:	e254      	b.n	8002e70 <__aeabi_dsub+0x6d4>
 80029c6:	2580      	movs	r5, #128	@ 0x80
 80029c8:	032d      	lsls	r5, r5, #12
 80029ca:	4325      	orrs	r5, r4
 80029cc:	032d      	lsls	r5, r5, #12
 80029ce:	4c48      	ldr	r4, [pc, #288]	@ (8002af0 <__aeabi_dsub+0x354>)
 80029d0:	0b2d      	lsrs	r5, r5, #12
 80029d2:	e78c      	b.n	80028ee <__aeabi_dsub+0x152>
 80029d4:	4661      	mov	r1, ip
 80029d6:	9b02      	ldr	r3, [sp, #8]
 80029d8:	4319      	orrs	r1, r3
 80029da:	d100      	bne.n	80029de <__aeabi_dsub+0x242>
 80029dc:	e0cc      	b.n	8002b78 <__aeabi_dsub+0x3dc>
 80029de:	0029      	movs	r1, r5
 80029e0:	3901      	subs	r1, #1
 80029e2:	2d01      	cmp	r5, #1
 80029e4:	d100      	bne.n	80029e8 <__aeabi_dsub+0x24c>
 80029e6:	e188      	b.n	8002cfa <__aeabi_dsub+0x55e>
 80029e8:	4295      	cmp	r5, r2
 80029ea:	d100      	bne.n	80029ee <__aeabi_dsub+0x252>
 80029ec:	e0aa      	b.n	8002b44 <__aeabi_dsub+0x3a8>
 80029ee:	2501      	movs	r5, #1
 80029f0:	2938      	cmp	r1, #56	@ 0x38
 80029f2:	dd00      	ble.n	80029f6 <__aeabi_dsub+0x25a>
 80029f4:	e72f      	b.n	8002856 <__aeabi_dsub+0xba>
 80029f6:	468a      	mov	sl, r1
 80029f8:	e718      	b.n	800282c <__aeabi_dsub+0x90>
 80029fa:	2201      	movs	r2, #1
 80029fc:	4051      	eors	r1, r2
 80029fe:	428e      	cmp	r6, r1
 8002a00:	d1d0      	bne.n	80029a4 <__aeabi_dsub+0x208>
 8002a02:	4653      	mov	r3, sl
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d100      	bne.n	8002a0a <__aeabi_dsub+0x26e>
 8002a08:	e0be      	b.n	8002b88 <__aeabi_dsub+0x3ec>
 8002a0a:	2f00      	cmp	r7, #0
 8002a0c:	d000      	beq.n	8002a10 <__aeabi_dsub+0x274>
 8002a0e:	e138      	b.n	8002c82 <__aeabi_dsub+0x4e6>
 8002a10:	46ca      	mov	sl, r9
 8002a12:	0022      	movs	r2, r4
 8002a14:	4302      	orrs	r2, r0
 8002a16:	d100      	bne.n	8002a1a <__aeabi_dsub+0x27e>
 8002a18:	e1e2      	b.n	8002de0 <__aeabi_dsub+0x644>
 8002a1a:	4653      	mov	r3, sl
 8002a1c:	1e59      	subs	r1, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d100      	bne.n	8002a24 <__aeabi_dsub+0x288>
 8002a22:	e20d      	b.n	8002e40 <__aeabi_dsub+0x6a4>
 8002a24:	4a32      	ldr	r2, [pc, #200]	@ (8002af0 <__aeabi_dsub+0x354>)
 8002a26:	4592      	cmp	sl, r2
 8002a28:	d100      	bne.n	8002a2c <__aeabi_dsub+0x290>
 8002a2a:	e1d2      	b.n	8002dd2 <__aeabi_dsub+0x636>
 8002a2c:	2701      	movs	r7, #1
 8002a2e:	2938      	cmp	r1, #56	@ 0x38
 8002a30:	dc13      	bgt.n	8002a5a <__aeabi_dsub+0x2be>
 8002a32:	291f      	cmp	r1, #31
 8002a34:	dd00      	ble.n	8002a38 <__aeabi_dsub+0x29c>
 8002a36:	e1ee      	b.n	8002e16 <__aeabi_dsub+0x67a>
 8002a38:	2220      	movs	r2, #32
 8002a3a:	9b02      	ldr	r3, [sp, #8]
 8002a3c:	1a52      	subs	r2, r2, r1
 8002a3e:	0025      	movs	r5, r4
 8002a40:	0007      	movs	r7, r0
 8002a42:	469a      	mov	sl, r3
 8002a44:	40cc      	lsrs	r4, r1
 8002a46:	4090      	lsls	r0, r2
 8002a48:	4095      	lsls	r5, r2
 8002a4a:	40cf      	lsrs	r7, r1
 8002a4c:	44a2      	add	sl, r4
 8002a4e:	1e42      	subs	r2, r0, #1
 8002a50:	4190      	sbcs	r0, r2
 8002a52:	4653      	mov	r3, sl
 8002a54:	432f      	orrs	r7, r5
 8002a56:	4307      	orrs	r7, r0
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	003d      	movs	r5, r7
 8002a5c:	4465      	add	r5, ip
 8002a5e:	4565      	cmp	r5, ip
 8002a60:	4192      	sbcs	r2, r2
 8002a62:	9b02      	ldr	r3, [sp, #8]
 8002a64:	4252      	negs	r2, r2
 8002a66:	464f      	mov	r7, r9
 8002a68:	18d4      	adds	r4, r2, r3
 8002a6a:	e780      	b.n	800296e <__aeabi_dsub+0x1d2>
 8002a6c:	4a23      	ldr	r2, [pc, #140]	@ (8002afc <__aeabi_dsub+0x360>)
 8002a6e:	1c7d      	adds	r5, r7, #1
 8002a70:	4215      	tst	r5, r2
 8002a72:	d000      	beq.n	8002a76 <__aeabi_dsub+0x2da>
 8002a74:	e0aa      	b.n	8002bcc <__aeabi_dsub+0x430>
 8002a76:	4662      	mov	r2, ip
 8002a78:	0025      	movs	r5, r4
 8002a7a:	9b02      	ldr	r3, [sp, #8]
 8002a7c:	4305      	orrs	r5, r0
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	2f00      	cmp	r7, #0
 8002a82:	d000      	beq.n	8002a86 <__aeabi_dsub+0x2ea>
 8002a84:	e0f5      	b.n	8002c72 <__aeabi_dsub+0x4d6>
 8002a86:	2d00      	cmp	r5, #0
 8002a88:	d100      	bne.n	8002a8c <__aeabi_dsub+0x2f0>
 8002a8a:	e16b      	b.n	8002d64 <__aeabi_dsub+0x5c8>
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	d100      	bne.n	8002a92 <__aeabi_dsub+0x2f6>
 8002a90:	e152      	b.n	8002d38 <__aeabi_dsub+0x59c>
 8002a92:	4663      	mov	r3, ip
 8002a94:	1ac5      	subs	r5, r0, r3
 8002a96:	9b02      	ldr	r3, [sp, #8]
 8002a98:	1ae2      	subs	r2, r4, r3
 8002a9a:	42a8      	cmp	r0, r5
 8002a9c:	419b      	sbcs	r3, r3
 8002a9e:	425b      	negs	r3, r3
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	021a      	lsls	r2, r3, #8
 8002aa4:	d400      	bmi.n	8002aa8 <__aeabi_dsub+0x30c>
 8002aa6:	e1d5      	b.n	8002e54 <__aeabi_dsub+0x6b8>
 8002aa8:	4663      	mov	r3, ip
 8002aaa:	1a1d      	subs	r5, r3, r0
 8002aac:	45ac      	cmp	ip, r5
 8002aae:	4192      	sbcs	r2, r2
 8002ab0:	2601      	movs	r6, #1
 8002ab2:	9b02      	ldr	r3, [sp, #8]
 8002ab4:	4252      	negs	r2, r2
 8002ab6:	1b1c      	subs	r4, r3, r4
 8002ab8:	4688      	mov	r8, r1
 8002aba:	1aa4      	subs	r4, r4, r2
 8002abc:	400e      	ands	r6, r1
 8002abe:	e6f6      	b.n	80028ae <__aeabi_dsub+0x112>
 8002ac0:	4297      	cmp	r7, r2
 8002ac2:	d03f      	beq.n	8002b44 <__aeabi_dsub+0x3a8>
 8002ac4:	4652      	mov	r2, sl
 8002ac6:	2501      	movs	r5, #1
 8002ac8:	2a38      	cmp	r2, #56	@ 0x38
 8002aca:	dd00      	ble.n	8002ace <__aeabi_dsub+0x332>
 8002acc:	e74a      	b.n	8002964 <__aeabi_dsub+0x1c8>
 8002ace:	2280      	movs	r2, #128	@ 0x80
 8002ad0:	9b02      	ldr	r3, [sp, #8]
 8002ad2:	0412      	lsls	r2, r2, #16
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	e72d      	b.n	8002936 <__aeabi_dsub+0x19a>
 8002ada:	003c      	movs	r4, r7
 8002adc:	2500      	movs	r5, #0
 8002ade:	2200      	movs	r2, #0
 8002ae0:	e705      	b.n	80028ee <__aeabi_dsub+0x152>
 8002ae2:	2307      	movs	r3, #7
 8002ae4:	402b      	ands	r3, r5
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d000      	beq.n	8002aec <__aeabi_dsub+0x350>
 8002aea:	e6e2      	b.n	80028b2 <__aeabi_dsub+0x116>
 8002aec:	e06b      	b.n	8002bc6 <__aeabi_dsub+0x42a>
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	000007ff 	.word	0x000007ff
 8002af4:	ff7fffff 	.word	0xff7fffff
 8002af8:	fffff801 	.word	0xfffff801
 8002afc:	000007fe 	.word	0x000007fe
 8002b00:	0028      	movs	r0, r5
 8002b02:	f000 fb3f 	bl	8003184 <__clzsi2>
 8002b06:	0003      	movs	r3, r0
 8002b08:	3318      	adds	r3, #24
 8002b0a:	2b1f      	cmp	r3, #31
 8002b0c:	dc00      	bgt.n	8002b10 <__aeabi_dsub+0x374>
 8002b0e:	e6b4      	b.n	800287a <__aeabi_dsub+0xde>
 8002b10:	002a      	movs	r2, r5
 8002b12:	3808      	subs	r0, #8
 8002b14:	4082      	lsls	r2, r0
 8002b16:	429f      	cmp	r7, r3
 8002b18:	dd00      	ble.n	8002b1c <__aeabi_dsub+0x380>
 8002b1a:	e0b9      	b.n	8002c90 <__aeabi_dsub+0x4f4>
 8002b1c:	1bdb      	subs	r3, r3, r7
 8002b1e:	1c58      	adds	r0, r3, #1
 8002b20:	281f      	cmp	r0, #31
 8002b22:	dc00      	bgt.n	8002b26 <__aeabi_dsub+0x38a>
 8002b24:	e1a0      	b.n	8002e68 <__aeabi_dsub+0x6cc>
 8002b26:	0015      	movs	r5, r2
 8002b28:	3b1f      	subs	r3, #31
 8002b2a:	40dd      	lsrs	r5, r3
 8002b2c:	2820      	cmp	r0, #32
 8002b2e:	d005      	beq.n	8002b3c <__aeabi_dsub+0x3a0>
 8002b30:	2340      	movs	r3, #64	@ 0x40
 8002b32:	1a1b      	subs	r3, r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	1e53      	subs	r3, r2, #1
 8002b38:	419a      	sbcs	r2, r3
 8002b3a:	4315      	orrs	r5, r2
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	2700      	movs	r7, #0
 8002b40:	402b      	ands	r3, r5
 8002b42:	e7d0      	b.n	8002ae6 <__aeabi_dsub+0x34a>
 8002b44:	08c0      	lsrs	r0, r0, #3
 8002b46:	0762      	lsls	r2, r4, #29
 8002b48:	4302      	orrs	r2, r0
 8002b4a:	08e4      	lsrs	r4, r4, #3
 8002b4c:	e737      	b.n	80029be <__aeabi_dsub+0x222>
 8002b4e:	08ea      	lsrs	r2, r5, #3
 8002b50:	0763      	lsls	r3, r4, #29
 8002b52:	431a      	orrs	r2, r3
 8002b54:	4bd3      	ldr	r3, [pc, #844]	@ (8002ea4 <__aeabi_dsub+0x708>)
 8002b56:	08e4      	lsrs	r4, r4, #3
 8002b58:	429f      	cmp	r7, r3
 8002b5a:	d100      	bne.n	8002b5e <__aeabi_dsub+0x3c2>
 8002b5c:	e72f      	b.n	80029be <__aeabi_dsub+0x222>
 8002b5e:	0324      	lsls	r4, r4, #12
 8002b60:	0b25      	lsrs	r5, r4, #12
 8002b62:	057c      	lsls	r4, r7, #21
 8002b64:	0d64      	lsrs	r4, r4, #21
 8002b66:	e6c2      	b.n	80028ee <__aeabi_dsub+0x152>
 8002b68:	46ca      	mov	sl, r9
 8002b6a:	0022      	movs	r2, r4
 8002b6c:	4302      	orrs	r2, r0
 8002b6e:	d158      	bne.n	8002c22 <__aeabi_dsub+0x486>
 8002b70:	4663      	mov	r3, ip
 8002b72:	000e      	movs	r6, r1
 8002b74:	9c02      	ldr	r4, [sp, #8]
 8002b76:	9303      	str	r3, [sp, #12]
 8002b78:	9b03      	ldr	r3, [sp, #12]
 8002b7a:	4657      	mov	r7, sl
 8002b7c:	08da      	lsrs	r2, r3, #3
 8002b7e:	e7e7      	b.n	8002b50 <__aeabi_dsub+0x3b4>
 8002b80:	4cc9      	ldr	r4, [pc, #804]	@ (8002ea8 <__aeabi_dsub+0x70c>)
 8002b82:	1aff      	subs	r7, r7, r3
 8002b84:	4014      	ands	r4, r2
 8002b86:	e692      	b.n	80028ae <__aeabi_dsub+0x112>
 8002b88:	4dc8      	ldr	r5, [pc, #800]	@ (8002eac <__aeabi_dsub+0x710>)
 8002b8a:	1c7a      	adds	r2, r7, #1
 8002b8c:	422a      	tst	r2, r5
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_dsub+0x3f6>
 8002b90:	e084      	b.n	8002c9c <__aeabi_dsub+0x500>
 8002b92:	0022      	movs	r2, r4
 8002b94:	4302      	orrs	r2, r0
 8002b96:	2f00      	cmp	r7, #0
 8002b98:	d000      	beq.n	8002b9c <__aeabi_dsub+0x400>
 8002b9a:	e0ef      	b.n	8002d7c <__aeabi_dsub+0x5e0>
 8002b9c:	2a00      	cmp	r2, #0
 8002b9e:	d100      	bne.n	8002ba2 <__aeabi_dsub+0x406>
 8002ba0:	e0e5      	b.n	8002d6e <__aeabi_dsub+0x5d2>
 8002ba2:	4662      	mov	r2, ip
 8002ba4:	9902      	ldr	r1, [sp, #8]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0x410>
 8002baa:	e0c5      	b.n	8002d38 <__aeabi_dsub+0x59c>
 8002bac:	4663      	mov	r3, ip
 8002bae:	18c5      	adds	r5, r0, r3
 8002bb0:	468c      	mov	ip, r1
 8002bb2:	4285      	cmp	r5, r0
 8002bb4:	4180      	sbcs	r0, r0
 8002bb6:	4464      	add	r4, ip
 8002bb8:	4240      	negs	r0, r0
 8002bba:	1824      	adds	r4, r4, r0
 8002bbc:	0223      	lsls	r3, r4, #8
 8002bbe:	d502      	bpl.n	8002bc6 <__aeabi_dsub+0x42a>
 8002bc0:	4bb9      	ldr	r3, [pc, #740]	@ (8002ea8 <__aeabi_dsub+0x70c>)
 8002bc2:	3701      	adds	r7, #1
 8002bc4:	401c      	ands	r4, r3
 8002bc6:	46ba      	mov	sl, r7
 8002bc8:	9503      	str	r5, [sp, #12]
 8002bca:	e7d5      	b.n	8002b78 <__aeabi_dsub+0x3dc>
 8002bcc:	4662      	mov	r2, ip
 8002bce:	1a85      	subs	r5, r0, r2
 8002bd0:	42a8      	cmp	r0, r5
 8002bd2:	4192      	sbcs	r2, r2
 8002bd4:	4252      	negs	r2, r2
 8002bd6:	4691      	mov	r9, r2
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	1ae3      	subs	r3, r4, r3
 8002bdc:	001a      	movs	r2, r3
 8002bde:	464b      	mov	r3, r9
 8002be0:	1ad2      	subs	r2, r2, r3
 8002be2:	0013      	movs	r3, r2
 8002be4:	4691      	mov	r9, r2
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	d46c      	bmi.n	8002cc4 <__aeabi_dsub+0x528>
 8002bea:	464a      	mov	r2, r9
 8002bec:	464c      	mov	r4, r9
 8002bee:	432a      	orrs	r2, r5
 8002bf0:	d000      	beq.n	8002bf4 <__aeabi_dsub+0x458>
 8002bf2:	e63a      	b.n	800286a <__aeabi_dsub+0xce>
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	2400      	movs	r4, #0
 8002bf8:	2500      	movs	r5, #0
 8002bfa:	e678      	b.n	80028ee <__aeabi_dsub+0x152>
 8002bfc:	9902      	ldr	r1, [sp, #8]
 8002bfe:	4653      	mov	r3, sl
 8002c00:	000d      	movs	r5, r1
 8002c02:	3a20      	subs	r2, #32
 8002c04:	40d5      	lsrs	r5, r2
 8002c06:	2b20      	cmp	r3, #32
 8002c08:	d006      	beq.n	8002c18 <__aeabi_dsub+0x47c>
 8002c0a:	2240      	movs	r2, #64	@ 0x40
 8002c0c:	1ad2      	subs	r2, r2, r3
 8002c0e:	000b      	movs	r3, r1
 8002c10:	4093      	lsls	r3, r2
 8002c12:	4662      	mov	r2, ip
 8002c14:	431a      	orrs	r2, r3
 8002c16:	4693      	mov	fp, r2
 8002c18:	465b      	mov	r3, fp
 8002c1a:	1e5a      	subs	r2, r3, #1
 8002c1c:	4193      	sbcs	r3, r2
 8002c1e:	431d      	orrs	r5, r3
 8002c20:	e619      	b.n	8002856 <__aeabi_dsub+0xba>
 8002c22:	4653      	mov	r3, sl
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d100      	bne.n	8002c2c <__aeabi_dsub+0x490>
 8002c2a:	e0c6      	b.n	8002dba <__aeabi_dsub+0x61e>
 8002c2c:	4e9d      	ldr	r6, [pc, #628]	@ (8002ea4 <__aeabi_dsub+0x708>)
 8002c2e:	45b2      	cmp	sl, r6
 8002c30:	d100      	bne.n	8002c34 <__aeabi_dsub+0x498>
 8002c32:	e6bd      	b.n	80029b0 <__aeabi_dsub+0x214>
 8002c34:	4688      	mov	r8, r1
 8002c36:	000e      	movs	r6, r1
 8002c38:	2501      	movs	r5, #1
 8002c3a:	2a38      	cmp	r2, #56	@ 0x38
 8002c3c:	dc10      	bgt.n	8002c60 <__aeabi_dsub+0x4c4>
 8002c3e:	2a1f      	cmp	r2, #31
 8002c40:	dc7f      	bgt.n	8002d42 <__aeabi_dsub+0x5a6>
 8002c42:	2120      	movs	r1, #32
 8002c44:	0025      	movs	r5, r4
 8002c46:	1a89      	subs	r1, r1, r2
 8002c48:	0007      	movs	r7, r0
 8002c4a:	4088      	lsls	r0, r1
 8002c4c:	408d      	lsls	r5, r1
 8002c4e:	40d7      	lsrs	r7, r2
 8002c50:	40d4      	lsrs	r4, r2
 8002c52:	1e41      	subs	r1, r0, #1
 8002c54:	4188      	sbcs	r0, r1
 8002c56:	9b02      	ldr	r3, [sp, #8]
 8002c58:	433d      	orrs	r5, r7
 8002c5a:	1b1b      	subs	r3, r3, r4
 8002c5c:	4305      	orrs	r5, r0
 8002c5e:	9302      	str	r3, [sp, #8]
 8002c60:	4662      	mov	r2, ip
 8002c62:	1b55      	subs	r5, r2, r5
 8002c64:	45ac      	cmp	ip, r5
 8002c66:	4192      	sbcs	r2, r2
 8002c68:	9b02      	ldr	r3, [sp, #8]
 8002c6a:	4252      	negs	r2, r2
 8002c6c:	464f      	mov	r7, r9
 8002c6e:	1a9c      	subs	r4, r3, r2
 8002c70:	e5f6      	b.n	8002860 <__aeabi_dsub+0xc4>
 8002c72:	2d00      	cmp	r5, #0
 8002c74:	d000      	beq.n	8002c78 <__aeabi_dsub+0x4dc>
 8002c76:	e0b7      	b.n	8002de8 <__aeabi_dsub+0x64c>
 8002c78:	2a00      	cmp	r2, #0
 8002c7a:	d100      	bne.n	8002c7e <__aeabi_dsub+0x4e2>
 8002c7c:	e0f0      	b.n	8002e60 <__aeabi_dsub+0x6c4>
 8002c7e:	2601      	movs	r6, #1
 8002c80:	400e      	ands	r6, r1
 8002c82:	4663      	mov	r3, ip
 8002c84:	9802      	ldr	r0, [sp, #8]
 8002c86:	08d9      	lsrs	r1, r3, #3
 8002c88:	0742      	lsls	r2, r0, #29
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	08c4      	lsrs	r4, r0, #3
 8002c8e:	e696      	b.n	80029be <__aeabi_dsub+0x222>
 8002c90:	4c85      	ldr	r4, [pc, #532]	@ (8002ea8 <__aeabi_dsub+0x70c>)
 8002c92:	1aff      	subs	r7, r7, r3
 8002c94:	4014      	ands	r4, r2
 8002c96:	0762      	lsls	r2, r4, #29
 8002c98:	08e4      	lsrs	r4, r4, #3
 8002c9a:	e760      	b.n	8002b5e <__aeabi_dsub+0x3c2>
 8002c9c:	4981      	ldr	r1, [pc, #516]	@ (8002ea4 <__aeabi_dsub+0x708>)
 8002c9e:	428a      	cmp	r2, r1
 8002ca0:	d100      	bne.n	8002ca4 <__aeabi_dsub+0x508>
 8002ca2:	e0c9      	b.n	8002e38 <__aeabi_dsub+0x69c>
 8002ca4:	4663      	mov	r3, ip
 8002ca6:	18c1      	adds	r1, r0, r3
 8002ca8:	4281      	cmp	r1, r0
 8002caa:	4180      	sbcs	r0, r0
 8002cac:	9b02      	ldr	r3, [sp, #8]
 8002cae:	4240      	negs	r0, r0
 8002cb0:	18e3      	adds	r3, r4, r3
 8002cb2:	181b      	adds	r3, r3, r0
 8002cb4:	07dd      	lsls	r5, r3, #31
 8002cb6:	085c      	lsrs	r4, r3, #1
 8002cb8:	2307      	movs	r3, #7
 8002cba:	0849      	lsrs	r1, r1, #1
 8002cbc:	430d      	orrs	r5, r1
 8002cbe:	0017      	movs	r7, r2
 8002cc0:	402b      	ands	r3, r5
 8002cc2:	e710      	b.n	8002ae6 <__aeabi_dsub+0x34a>
 8002cc4:	4663      	mov	r3, ip
 8002cc6:	1a1d      	subs	r5, r3, r0
 8002cc8:	45ac      	cmp	ip, r5
 8002cca:	4192      	sbcs	r2, r2
 8002ccc:	2601      	movs	r6, #1
 8002cce:	9b02      	ldr	r3, [sp, #8]
 8002cd0:	4252      	negs	r2, r2
 8002cd2:	1b1c      	subs	r4, r3, r4
 8002cd4:	4688      	mov	r8, r1
 8002cd6:	1aa4      	subs	r4, r4, r2
 8002cd8:	400e      	ands	r6, r1
 8002cda:	e5c6      	b.n	800286a <__aeabi_dsub+0xce>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	18c5      	adds	r5, r0, r3
 8002ce0:	9b02      	ldr	r3, [sp, #8]
 8002ce2:	4285      	cmp	r5, r0
 8002ce4:	4180      	sbcs	r0, r0
 8002ce6:	469c      	mov	ip, r3
 8002ce8:	4240      	negs	r0, r0
 8002cea:	4464      	add	r4, ip
 8002cec:	1824      	adds	r4, r4, r0
 8002cee:	2701      	movs	r7, #1
 8002cf0:	0223      	lsls	r3, r4, #8
 8002cf2:	d400      	bmi.n	8002cf6 <__aeabi_dsub+0x55a>
 8002cf4:	e6f5      	b.n	8002ae2 <__aeabi_dsub+0x346>
 8002cf6:	2702      	movs	r7, #2
 8002cf8:	e641      	b.n	800297e <__aeabi_dsub+0x1e2>
 8002cfa:	4663      	mov	r3, ip
 8002cfc:	1ac5      	subs	r5, r0, r3
 8002cfe:	42a8      	cmp	r0, r5
 8002d00:	4180      	sbcs	r0, r0
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4240      	negs	r0, r0
 8002d06:	1ae4      	subs	r4, r4, r3
 8002d08:	2701      	movs	r7, #1
 8002d0a:	1a24      	subs	r4, r4, r0
 8002d0c:	e5a8      	b.n	8002860 <__aeabi_dsub+0xc4>
 8002d0e:	9d02      	ldr	r5, [sp, #8]
 8002d10:	4652      	mov	r2, sl
 8002d12:	002b      	movs	r3, r5
 8002d14:	3a20      	subs	r2, #32
 8002d16:	40d3      	lsrs	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	4653      	mov	r3, sl
 8002d1c:	2b20      	cmp	r3, #32
 8002d1e:	d006      	beq.n	8002d2e <__aeabi_dsub+0x592>
 8002d20:	2240      	movs	r2, #64	@ 0x40
 8002d22:	1ad2      	subs	r2, r2, r3
 8002d24:	002b      	movs	r3, r5
 8002d26:	4093      	lsls	r3, r2
 8002d28:	4662      	mov	r2, ip
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	4693      	mov	fp, r2
 8002d2e:	465d      	mov	r5, fp
 8002d30:	1e6b      	subs	r3, r5, #1
 8002d32:	419d      	sbcs	r5, r3
 8002d34:	430d      	orrs	r5, r1
 8002d36:	e615      	b.n	8002964 <__aeabi_dsub+0x1c8>
 8002d38:	0762      	lsls	r2, r4, #29
 8002d3a:	08c0      	lsrs	r0, r0, #3
 8002d3c:	4302      	orrs	r2, r0
 8002d3e:	08e4      	lsrs	r4, r4, #3
 8002d40:	e70d      	b.n	8002b5e <__aeabi_dsub+0x3c2>
 8002d42:	0011      	movs	r1, r2
 8002d44:	0027      	movs	r7, r4
 8002d46:	3920      	subs	r1, #32
 8002d48:	40cf      	lsrs	r7, r1
 8002d4a:	2a20      	cmp	r2, #32
 8002d4c:	d005      	beq.n	8002d5a <__aeabi_dsub+0x5be>
 8002d4e:	2140      	movs	r1, #64	@ 0x40
 8002d50:	1a8a      	subs	r2, r1, r2
 8002d52:	4094      	lsls	r4, r2
 8002d54:	0025      	movs	r5, r4
 8002d56:	4305      	orrs	r5, r0
 8002d58:	9503      	str	r5, [sp, #12]
 8002d5a:	9d03      	ldr	r5, [sp, #12]
 8002d5c:	1e6a      	subs	r2, r5, #1
 8002d5e:	4195      	sbcs	r5, r2
 8002d60:	433d      	orrs	r5, r7
 8002d62:	e77d      	b.n	8002c60 <__aeabi_dsub+0x4c4>
 8002d64:	2a00      	cmp	r2, #0
 8002d66:	d100      	bne.n	8002d6a <__aeabi_dsub+0x5ce>
 8002d68:	e744      	b.n	8002bf4 <__aeabi_dsub+0x458>
 8002d6a:	2601      	movs	r6, #1
 8002d6c:	400e      	ands	r6, r1
 8002d6e:	4663      	mov	r3, ip
 8002d70:	08d9      	lsrs	r1, r3, #3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	075a      	lsls	r2, r3, #29
 8002d76:	430a      	orrs	r2, r1
 8002d78:	08dc      	lsrs	r4, r3, #3
 8002d7a:	e6f0      	b.n	8002b5e <__aeabi_dsub+0x3c2>
 8002d7c:	2a00      	cmp	r2, #0
 8002d7e:	d028      	beq.n	8002dd2 <__aeabi_dsub+0x636>
 8002d80:	4662      	mov	r2, ip
 8002d82:	9f02      	ldr	r7, [sp, #8]
 8002d84:	08c0      	lsrs	r0, r0, #3
 8002d86:	433a      	orrs	r2, r7
 8002d88:	d100      	bne.n	8002d8c <__aeabi_dsub+0x5f0>
 8002d8a:	e6dc      	b.n	8002b46 <__aeabi_dsub+0x3aa>
 8002d8c:	0762      	lsls	r2, r4, #29
 8002d8e:	4310      	orrs	r0, r2
 8002d90:	2280      	movs	r2, #128	@ 0x80
 8002d92:	08e4      	lsrs	r4, r4, #3
 8002d94:	0312      	lsls	r2, r2, #12
 8002d96:	4214      	tst	r4, r2
 8002d98:	d009      	beq.n	8002dae <__aeabi_dsub+0x612>
 8002d9a:	08fd      	lsrs	r5, r7, #3
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d106      	bne.n	8002dae <__aeabi_dsub+0x612>
 8002da0:	4663      	mov	r3, ip
 8002da2:	2601      	movs	r6, #1
 8002da4:	002c      	movs	r4, r5
 8002da6:	08d8      	lsrs	r0, r3, #3
 8002da8:	077b      	lsls	r3, r7, #29
 8002daa:	4318      	orrs	r0, r3
 8002dac:	400e      	ands	r6, r1
 8002dae:	0f42      	lsrs	r2, r0, #29
 8002db0:	00c0      	lsls	r0, r0, #3
 8002db2:	08c0      	lsrs	r0, r0, #3
 8002db4:	0752      	lsls	r2, r2, #29
 8002db6:	4302      	orrs	r2, r0
 8002db8:	e601      	b.n	80029be <__aeabi_dsub+0x222>
 8002dba:	4663      	mov	r3, ip
 8002dbc:	1a1d      	subs	r5, r3, r0
 8002dbe:	45ac      	cmp	ip, r5
 8002dc0:	4192      	sbcs	r2, r2
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	4252      	negs	r2, r2
 8002dc6:	1b1c      	subs	r4, r3, r4
 8002dc8:	000e      	movs	r6, r1
 8002dca:	4688      	mov	r8, r1
 8002dcc:	2701      	movs	r7, #1
 8002dce:	1aa4      	subs	r4, r4, r2
 8002dd0:	e546      	b.n	8002860 <__aeabi_dsub+0xc4>
 8002dd2:	4663      	mov	r3, ip
 8002dd4:	08d9      	lsrs	r1, r3, #3
 8002dd6:	9b02      	ldr	r3, [sp, #8]
 8002dd8:	075a      	lsls	r2, r3, #29
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	08dc      	lsrs	r4, r3, #3
 8002dde:	e5ee      	b.n	80029be <__aeabi_dsub+0x222>
 8002de0:	4663      	mov	r3, ip
 8002de2:	9c02      	ldr	r4, [sp, #8]
 8002de4:	9303      	str	r3, [sp, #12]
 8002de6:	e6c7      	b.n	8002b78 <__aeabi_dsub+0x3dc>
 8002de8:	08c0      	lsrs	r0, r0, #3
 8002dea:	2a00      	cmp	r2, #0
 8002dec:	d100      	bne.n	8002df0 <__aeabi_dsub+0x654>
 8002dee:	e6aa      	b.n	8002b46 <__aeabi_dsub+0x3aa>
 8002df0:	0762      	lsls	r2, r4, #29
 8002df2:	4310      	orrs	r0, r2
 8002df4:	2280      	movs	r2, #128	@ 0x80
 8002df6:	08e4      	lsrs	r4, r4, #3
 8002df8:	0312      	lsls	r2, r2, #12
 8002dfa:	4214      	tst	r4, r2
 8002dfc:	d0d7      	beq.n	8002dae <__aeabi_dsub+0x612>
 8002dfe:	9f02      	ldr	r7, [sp, #8]
 8002e00:	08fd      	lsrs	r5, r7, #3
 8002e02:	4215      	tst	r5, r2
 8002e04:	d1d3      	bne.n	8002dae <__aeabi_dsub+0x612>
 8002e06:	4663      	mov	r3, ip
 8002e08:	2601      	movs	r6, #1
 8002e0a:	08d8      	lsrs	r0, r3, #3
 8002e0c:	077b      	lsls	r3, r7, #29
 8002e0e:	002c      	movs	r4, r5
 8002e10:	4318      	orrs	r0, r3
 8002e12:	400e      	ands	r6, r1
 8002e14:	e7cb      	b.n	8002dae <__aeabi_dsub+0x612>
 8002e16:	000a      	movs	r2, r1
 8002e18:	0027      	movs	r7, r4
 8002e1a:	3a20      	subs	r2, #32
 8002e1c:	40d7      	lsrs	r7, r2
 8002e1e:	2920      	cmp	r1, #32
 8002e20:	d005      	beq.n	8002e2e <__aeabi_dsub+0x692>
 8002e22:	2240      	movs	r2, #64	@ 0x40
 8002e24:	1a52      	subs	r2, r2, r1
 8002e26:	4094      	lsls	r4, r2
 8002e28:	0025      	movs	r5, r4
 8002e2a:	4305      	orrs	r5, r0
 8002e2c:	9503      	str	r5, [sp, #12]
 8002e2e:	9d03      	ldr	r5, [sp, #12]
 8002e30:	1e6a      	subs	r2, r5, #1
 8002e32:	4195      	sbcs	r5, r2
 8002e34:	432f      	orrs	r7, r5
 8002e36:	e610      	b.n	8002a5a <__aeabi_dsub+0x2be>
 8002e38:	0014      	movs	r4, r2
 8002e3a:	2500      	movs	r5, #0
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	e556      	b.n	80028ee <__aeabi_dsub+0x152>
 8002e40:	9b02      	ldr	r3, [sp, #8]
 8002e42:	4460      	add	r0, ip
 8002e44:	4699      	mov	r9, r3
 8002e46:	4560      	cmp	r0, ip
 8002e48:	4192      	sbcs	r2, r2
 8002e4a:	444c      	add	r4, r9
 8002e4c:	4252      	negs	r2, r2
 8002e4e:	0005      	movs	r5, r0
 8002e50:	18a4      	adds	r4, r4, r2
 8002e52:	e74c      	b.n	8002cee <__aeabi_dsub+0x552>
 8002e54:	001a      	movs	r2, r3
 8002e56:	001c      	movs	r4, r3
 8002e58:	432a      	orrs	r2, r5
 8002e5a:	d000      	beq.n	8002e5e <__aeabi_dsub+0x6c2>
 8002e5c:	e6b3      	b.n	8002bc6 <__aeabi_dsub+0x42a>
 8002e5e:	e6c9      	b.n	8002bf4 <__aeabi_dsub+0x458>
 8002e60:	2480      	movs	r4, #128	@ 0x80
 8002e62:	2600      	movs	r6, #0
 8002e64:	0324      	lsls	r4, r4, #12
 8002e66:	e5ae      	b.n	80029c6 <__aeabi_dsub+0x22a>
 8002e68:	2120      	movs	r1, #32
 8002e6a:	2500      	movs	r5, #0
 8002e6c:	1a09      	subs	r1, r1, r0
 8002e6e:	e517      	b.n	80028a0 <__aeabi_dsub+0x104>
 8002e70:	2200      	movs	r2, #0
 8002e72:	2500      	movs	r5, #0
 8002e74:	4c0b      	ldr	r4, [pc, #44]	@ (8002ea4 <__aeabi_dsub+0x708>)
 8002e76:	e53a      	b.n	80028ee <__aeabi_dsub+0x152>
 8002e78:	2d00      	cmp	r5, #0
 8002e7a:	d100      	bne.n	8002e7e <__aeabi_dsub+0x6e2>
 8002e7c:	e5f6      	b.n	8002a6c <__aeabi_dsub+0x2d0>
 8002e7e:	464b      	mov	r3, r9
 8002e80:	1bda      	subs	r2, r3, r7
 8002e82:	4692      	mov	sl, r2
 8002e84:	2f00      	cmp	r7, #0
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x6ee>
 8002e88:	e66f      	b.n	8002b6a <__aeabi_dsub+0x3ce>
 8002e8a:	2a38      	cmp	r2, #56	@ 0x38
 8002e8c:	dc05      	bgt.n	8002e9a <__aeabi_dsub+0x6fe>
 8002e8e:	2680      	movs	r6, #128	@ 0x80
 8002e90:	0436      	lsls	r6, r6, #16
 8002e92:	4334      	orrs	r4, r6
 8002e94:	4688      	mov	r8, r1
 8002e96:	000e      	movs	r6, r1
 8002e98:	e6d1      	b.n	8002c3e <__aeabi_dsub+0x4a2>
 8002e9a:	4688      	mov	r8, r1
 8002e9c:	000e      	movs	r6, r1
 8002e9e:	2501      	movs	r5, #1
 8002ea0:	e6de      	b.n	8002c60 <__aeabi_dsub+0x4c4>
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	000007ff 	.word	0x000007ff
 8002ea8:	ff7fffff 	.word	0xff7fffff
 8002eac:	000007fe 	.word	0x000007fe
 8002eb0:	2d00      	cmp	r5, #0
 8002eb2:	d100      	bne.n	8002eb6 <__aeabi_dsub+0x71a>
 8002eb4:	e668      	b.n	8002b88 <__aeabi_dsub+0x3ec>
 8002eb6:	464b      	mov	r3, r9
 8002eb8:	1bd9      	subs	r1, r3, r7
 8002eba:	2f00      	cmp	r7, #0
 8002ebc:	d101      	bne.n	8002ec2 <__aeabi_dsub+0x726>
 8002ebe:	468a      	mov	sl, r1
 8002ec0:	e5a7      	b.n	8002a12 <__aeabi_dsub+0x276>
 8002ec2:	2701      	movs	r7, #1
 8002ec4:	2938      	cmp	r1, #56	@ 0x38
 8002ec6:	dd00      	ble.n	8002eca <__aeabi_dsub+0x72e>
 8002ec8:	e5c7      	b.n	8002a5a <__aeabi_dsub+0x2be>
 8002eca:	2280      	movs	r2, #128	@ 0x80
 8002ecc:	0412      	lsls	r2, r2, #16
 8002ece:	4314      	orrs	r4, r2
 8002ed0:	e5af      	b.n	8002a32 <__aeabi_dsub+0x296>
 8002ed2:	46c0      	nop			@ (mov r8, r8)

08002ed4 <__aeabi_dcmpun>:
 8002ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ed6:	46c6      	mov	lr, r8
 8002ed8:	031e      	lsls	r6, r3, #12
 8002eda:	0b36      	lsrs	r6, r6, #12
 8002edc:	46b0      	mov	r8, r6
 8002ede:	4e0d      	ldr	r6, [pc, #52]	@ (8002f14 <__aeabi_dcmpun+0x40>)
 8002ee0:	030c      	lsls	r4, r1, #12
 8002ee2:	004d      	lsls	r5, r1, #1
 8002ee4:	005f      	lsls	r7, r3, #1
 8002ee6:	b500      	push	{lr}
 8002ee8:	0b24      	lsrs	r4, r4, #12
 8002eea:	0d6d      	lsrs	r5, r5, #21
 8002eec:	0d7f      	lsrs	r7, r7, #21
 8002eee:	42b5      	cmp	r5, r6
 8002ef0:	d00b      	beq.n	8002f0a <__aeabi_dcmpun+0x36>
 8002ef2:	4908      	ldr	r1, [pc, #32]	@ (8002f14 <__aeabi_dcmpun+0x40>)
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	428f      	cmp	r7, r1
 8002ef8:	d104      	bne.n	8002f04 <__aeabi_dcmpun+0x30>
 8002efa:	4646      	mov	r6, r8
 8002efc:	4316      	orrs	r6, r2
 8002efe:	0030      	movs	r0, r6
 8002f00:	1e43      	subs	r3, r0, #1
 8002f02:	4198      	sbcs	r0, r3
 8002f04:	bc80      	pop	{r7}
 8002f06:	46b8      	mov	r8, r7
 8002f08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f0a:	4304      	orrs	r4, r0
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	2c00      	cmp	r4, #0
 8002f10:	d1f8      	bne.n	8002f04 <__aeabi_dcmpun+0x30>
 8002f12:	e7ee      	b.n	8002ef2 <__aeabi_dcmpun+0x1e>
 8002f14:	000007ff 	.word	0x000007ff

08002f18 <__aeabi_d2iz>:
 8002f18:	000b      	movs	r3, r1
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4d16      	ldr	r5, [pc, #88]	@ (8002f78 <__aeabi_d2iz+0x60>)
 8002f20:	030c      	lsls	r4, r1, #12
 8002f22:	b082      	sub	sp, #8
 8002f24:	0049      	lsls	r1, r1, #1
 8002f26:	2000      	movs	r0, #0
 8002f28:	9200      	str	r2, [sp, #0]
 8002f2a:	9301      	str	r3, [sp, #4]
 8002f2c:	0b24      	lsrs	r4, r4, #12
 8002f2e:	0d49      	lsrs	r1, r1, #21
 8002f30:	0fde      	lsrs	r6, r3, #31
 8002f32:	42a9      	cmp	r1, r5
 8002f34:	dd04      	ble.n	8002f40 <__aeabi_d2iz+0x28>
 8002f36:	4811      	ldr	r0, [pc, #68]	@ (8002f7c <__aeabi_d2iz+0x64>)
 8002f38:	4281      	cmp	r1, r0
 8002f3a:	dd03      	ble.n	8002f44 <__aeabi_d2iz+0x2c>
 8002f3c:	4b10      	ldr	r3, [pc, #64]	@ (8002f80 <__aeabi_d2iz+0x68>)
 8002f3e:	18f0      	adds	r0, r6, r3
 8002f40:	b002      	add	sp, #8
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	2080      	movs	r0, #128	@ 0x80
 8002f46:	0340      	lsls	r0, r0, #13
 8002f48:	4320      	orrs	r0, r4
 8002f4a:	4c0e      	ldr	r4, [pc, #56]	@ (8002f84 <__aeabi_d2iz+0x6c>)
 8002f4c:	1a64      	subs	r4, r4, r1
 8002f4e:	2c1f      	cmp	r4, #31
 8002f50:	dd08      	ble.n	8002f64 <__aeabi_d2iz+0x4c>
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <__aeabi_d2iz+0x70>)
 8002f54:	1a5b      	subs	r3, r3, r1
 8002f56:	40d8      	lsrs	r0, r3
 8002f58:	0003      	movs	r3, r0
 8002f5a:	4258      	negs	r0, r3
 8002f5c:	2e00      	cmp	r6, #0
 8002f5e:	d1ef      	bne.n	8002f40 <__aeabi_d2iz+0x28>
 8002f60:	0018      	movs	r0, r3
 8002f62:	e7ed      	b.n	8002f40 <__aeabi_d2iz+0x28>
 8002f64:	4b09      	ldr	r3, [pc, #36]	@ (8002f8c <__aeabi_d2iz+0x74>)
 8002f66:	9a00      	ldr	r2, [sp, #0]
 8002f68:	469c      	mov	ip, r3
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	4461      	add	r1, ip
 8002f6e:	408b      	lsls	r3, r1
 8002f70:	40e2      	lsrs	r2, r4
 8002f72:	4313      	orrs	r3, r2
 8002f74:	e7f1      	b.n	8002f5a <__aeabi_d2iz+0x42>
 8002f76:	46c0      	nop			@ (mov r8, r8)
 8002f78:	000003fe 	.word	0x000003fe
 8002f7c:	0000041d 	.word	0x0000041d
 8002f80:	7fffffff 	.word	0x7fffffff
 8002f84:	00000433 	.word	0x00000433
 8002f88:	00000413 	.word	0x00000413
 8002f8c:	fffffbed 	.word	0xfffffbed

08002f90 <__aeabi_i2d>:
 8002f90:	b570      	push	{r4, r5, r6, lr}
 8002f92:	2800      	cmp	r0, #0
 8002f94:	d016      	beq.n	8002fc4 <__aeabi_i2d+0x34>
 8002f96:	17c3      	asrs	r3, r0, #31
 8002f98:	18c5      	adds	r5, r0, r3
 8002f9a:	405d      	eors	r5, r3
 8002f9c:	0fc4      	lsrs	r4, r0, #31
 8002f9e:	0028      	movs	r0, r5
 8002fa0:	f000 f8f0 	bl	8003184 <__clzsi2>
 8002fa4:	4b10      	ldr	r3, [pc, #64]	@ (8002fe8 <__aeabi_i2d+0x58>)
 8002fa6:	1a1b      	subs	r3, r3, r0
 8002fa8:	055b      	lsls	r3, r3, #21
 8002faa:	0d5b      	lsrs	r3, r3, #21
 8002fac:	280a      	cmp	r0, #10
 8002fae:	dc14      	bgt.n	8002fda <__aeabi_i2d+0x4a>
 8002fb0:	0002      	movs	r2, r0
 8002fb2:	002e      	movs	r6, r5
 8002fb4:	3215      	adds	r2, #21
 8002fb6:	4096      	lsls	r6, r2
 8002fb8:	220b      	movs	r2, #11
 8002fba:	1a12      	subs	r2, r2, r0
 8002fbc:	40d5      	lsrs	r5, r2
 8002fbe:	032d      	lsls	r5, r5, #12
 8002fc0:	0b2d      	lsrs	r5, r5, #12
 8002fc2:	e003      	b.n	8002fcc <__aeabi_i2d+0x3c>
 8002fc4:	2400      	movs	r4, #0
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2500      	movs	r5, #0
 8002fca:	2600      	movs	r6, #0
 8002fcc:	051b      	lsls	r3, r3, #20
 8002fce:	432b      	orrs	r3, r5
 8002fd0:	07e4      	lsls	r4, r4, #31
 8002fd2:	4323      	orrs	r3, r4
 8002fd4:	0030      	movs	r0, r6
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	bd70      	pop	{r4, r5, r6, pc}
 8002fda:	380b      	subs	r0, #11
 8002fdc:	4085      	lsls	r5, r0
 8002fde:	032d      	lsls	r5, r5, #12
 8002fe0:	2600      	movs	r6, #0
 8002fe2:	0b2d      	lsrs	r5, r5, #12
 8002fe4:	e7f2      	b.n	8002fcc <__aeabi_i2d+0x3c>
 8002fe6:	46c0      	nop			@ (mov r8, r8)
 8002fe8:	0000041e 	.word	0x0000041e

08002fec <__aeabi_f2d>:
 8002fec:	b570      	push	{r4, r5, r6, lr}
 8002fee:	0242      	lsls	r2, r0, #9
 8002ff0:	0043      	lsls	r3, r0, #1
 8002ff2:	0fc4      	lsrs	r4, r0, #31
 8002ff4:	20fe      	movs	r0, #254	@ 0xfe
 8002ff6:	0e1b      	lsrs	r3, r3, #24
 8002ff8:	1c59      	adds	r1, r3, #1
 8002ffa:	0a55      	lsrs	r5, r2, #9
 8002ffc:	4208      	tst	r0, r1
 8002ffe:	d00c      	beq.n	800301a <__aeabi_f2d+0x2e>
 8003000:	21e0      	movs	r1, #224	@ 0xe0
 8003002:	0089      	lsls	r1, r1, #2
 8003004:	468c      	mov	ip, r1
 8003006:	076d      	lsls	r5, r5, #29
 8003008:	0b12      	lsrs	r2, r2, #12
 800300a:	4463      	add	r3, ip
 800300c:	051b      	lsls	r3, r3, #20
 800300e:	4313      	orrs	r3, r2
 8003010:	07e4      	lsls	r4, r4, #31
 8003012:	4323      	orrs	r3, r4
 8003014:	0028      	movs	r0, r5
 8003016:	0019      	movs	r1, r3
 8003018:	bd70      	pop	{r4, r5, r6, pc}
 800301a:	2b00      	cmp	r3, #0
 800301c:	d114      	bne.n	8003048 <__aeabi_f2d+0x5c>
 800301e:	2d00      	cmp	r5, #0
 8003020:	d01b      	beq.n	800305a <__aeabi_f2d+0x6e>
 8003022:	0028      	movs	r0, r5
 8003024:	f000 f8ae 	bl	8003184 <__clzsi2>
 8003028:	280a      	cmp	r0, #10
 800302a:	dc1c      	bgt.n	8003066 <__aeabi_f2d+0x7a>
 800302c:	230b      	movs	r3, #11
 800302e:	002a      	movs	r2, r5
 8003030:	1a1b      	subs	r3, r3, r0
 8003032:	40da      	lsrs	r2, r3
 8003034:	0003      	movs	r3, r0
 8003036:	3315      	adds	r3, #21
 8003038:	409d      	lsls	r5, r3
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <__aeabi_f2d+0x88>)
 800303c:	0312      	lsls	r2, r2, #12
 800303e:	1a1b      	subs	r3, r3, r0
 8003040:	055b      	lsls	r3, r3, #21
 8003042:	0b12      	lsrs	r2, r2, #12
 8003044:	0d5b      	lsrs	r3, r3, #21
 8003046:	e7e1      	b.n	800300c <__aeabi_f2d+0x20>
 8003048:	2d00      	cmp	r5, #0
 800304a:	d009      	beq.n	8003060 <__aeabi_f2d+0x74>
 800304c:	0b13      	lsrs	r3, r2, #12
 800304e:	2280      	movs	r2, #128	@ 0x80
 8003050:	0312      	lsls	r2, r2, #12
 8003052:	431a      	orrs	r2, r3
 8003054:	076d      	lsls	r5, r5, #29
 8003056:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <__aeabi_f2d+0x8c>)
 8003058:	e7d8      	b.n	800300c <__aeabi_f2d+0x20>
 800305a:	2300      	movs	r3, #0
 800305c:	2200      	movs	r2, #0
 800305e:	e7d5      	b.n	800300c <__aeabi_f2d+0x20>
 8003060:	2200      	movs	r2, #0
 8003062:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <__aeabi_f2d+0x8c>)
 8003064:	e7d2      	b.n	800300c <__aeabi_f2d+0x20>
 8003066:	0003      	movs	r3, r0
 8003068:	002a      	movs	r2, r5
 800306a:	3b0b      	subs	r3, #11
 800306c:	409a      	lsls	r2, r3
 800306e:	2500      	movs	r5, #0
 8003070:	e7e3      	b.n	800303a <__aeabi_f2d+0x4e>
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	00000389 	.word	0x00000389
 8003078:	000007ff 	.word	0x000007ff

0800307c <__aeabi_d2f>:
 800307c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800307e:	004b      	lsls	r3, r1, #1
 8003080:	030f      	lsls	r7, r1, #12
 8003082:	0d5b      	lsrs	r3, r3, #21
 8003084:	4c3b      	ldr	r4, [pc, #236]	@ (8003174 <__aeabi_d2f+0xf8>)
 8003086:	0f45      	lsrs	r5, r0, #29
 8003088:	b083      	sub	sp, #12
 800308a:	0a7f      	lsrs	r7, r7, #9
 800308c:	1c5e      	adds	r6, r3, #1
 800308e:	432f      	orrs	r7, r5
 8003090:	9000      	str	r0, [sp, #0]
 8003092:	9101      	str	r1, [sp, #4]
 8003094:	0fca      	lsrs	r2, r1, #31
 8003096:	00c5      	lsls	r5, r0, #3
 8003098:	4226      	tst	r6, r4
 800309a:	d00b      	beq.n	80030b4 <__aeabi_d2f+0x38>
 800309c:	4936      	ldr	r1, [pc, #216]	@ (8003178 <__aeabi_d2f+0xfc>)
 800309e:	185c      	adds	r4, r3, r1
 80030a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80030a2:	dd13      	ble.n	80030cc <__aeabi_d2f+0x50>
 80030a4:	20ff      	movs	r0, #255	@ 0xff
 80030a6:	2300      	movs	r3, #0
 80030a8:	05c0      	lsls	r0, r0, #23
 80030aa:	4318      	orrs	r0, r3
 80030ac:	07d2      	lsls	r2, r2, #31
 80030ae:	4310      	orrs	r0, r2
 80030b0:	b003      	add	sp, #12
 80030b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d102      	bne.n	80030be <__aeabi_d2f+0x42>
 80030b8:	2000      	movs	r0, #0
 80030ba:	2300      	movs	r3, #0
 80030bc:	e7f4      	b.n	80030a8 <__aeabi_d2f+0x2c>
 80030be:	433d      	orrs	r5, r7
 80030c0:	d0f0      	beq.n	80030a4 <__aeabi_d2f+0x28>
 80030c2:	2380      	movs	r3, #128	@ 0x80
 80030c4:	03db      	lsls	r3, r3, #15
 80030c6:	20ff      	movs	r0, #255	@ 0xff
 80030c8:	433b      	orrs	r3, r7
 80030ca:	e7ed      	b.n	80030a8 <__aeabi_d2f+0x2c>
 80030cc:	2c00      	cmp	r4, #0
 80030ce:	dd14      	ble.n	80030fa <__aeabi_d2f+0x7e>
 80030d0:	9b00      	ldr	r3, [sp, #0]
 80030d2:	00ff      	lsls	r7, r7, #3
 80030d4:	019b      	lsls	r3, r3, #6
 80030d6:	1e58      	subs	r0, r3, #1
 80030d8:	4183      	sbcs	r3, r0
 80030da:	0f69      	lsrs	r1, r5, #29
 80030dc:	433b      	orrs	r3, r7
 80030de:	430b      	orrs	r3, r1
 80030e0:	0759      	lsls	r1, r3, #29
 80030e2:	d041      	beq.n	8003168 <__aeabi_d2f+0xec>
 80030e4:	210f      	movs	r1, #15
 80030e6:	4019      	ands	r1, r3
 80030e8:	2904      	cmp	r1, #4
 80030ea:	d028      	beq.n	800313e <__aeabi_d2f+0xc2>
 80030ec:	3304      	adds	r3, #4
 80030ee:	0159      	lsls	r1, r3, #5
 80030f0:	d525      	bpl.n	800313e <__aeabi_d2f+0xc2>
 80030f2:	3401      	adds	r4, #1
 80030f4:	2300      	movs	r3, #0
 80030f6:	b2e0      	uxtb	r0, r4
 80030f8:	e7d6      	b.n	80030a8 <__aeabi_d2f+0x2c>
 80030fa:	0021      	movs	r1, r4
 80030fc:	3117      	adds	r1, #23
 80030fe:	dbdb      	blt.n	80030b8 <__aeabi_d2f+0x3c>
 8003100:	2180      	movs	r1, #128	@ 0x80
 8003102:	201e      	movs	r0, #30
 8003104:	0409      	lsls	r1, r1, #16
 8003106:	4339      	orrs	r1, r7
 8003108:	1b00      	subs	r0, r0, r4
 800310a:	281f      	cmp	r0, #31
 800310c:	dd1b      	ble.n	8003146 <__aeabi_d2f+0xca>
 800310e:	2602      	movs	r6, #2
 8003110:	4276      	negs	r6, r6
 8003112:	1b34      	subs	r4, r6, r4
 8003114:	000e      	movs	r6, r1
 8003116:	40e6      	lsrs	r6, r4
 8003118:	0034      	movs	r4, r6
 800311a:	2820      	cmp	r0, #32
 800311c:	d004      	beq.n	8003128 <__aeabi_d2f+0xac>
 800311e:	4817      	ldr	r0, [pc, #92]	@ (800317c <__aeabi_d2f+0x100>)
 8003120:	4684      	mov	ip, r0
 8003122:	4463      	add	r3, ip
 8003124:	4099      	lsls	r1, r3
 8003126:	430d      	orrs	r5, r1
 8003128:	002b      	movs	r3, r5
 800312a:	1e59      	subs	r1, r3, #1
 800312c:	418b      	sbcs	r3, r1
 800312e:	4323      	orrs	r3, r4
 8003130:	0759      	lsls	r1, r3, #29
 8003132:	d015      	beq.n	8003160 <__aeabi_d2f+0xe4>
 8003134:	210f      	movs	r1, #15
 8003136:	2400      	movs	r4, #0
 8003138:	4019      	ands	r1, r3
 800313a:	2904      	cmp	r1, #4
 800313c:	d117      	bne.n	800316e <__aeabi_d2f+0xf2>
 800313e:	019b      	lsls	r3, r3, #6
 8003140:	0a5b      	lsrs	r3, r3, #9
 8003142:	b2e0      	uxtb	r0, r4
 8003144:	e7b0      	b.n	80030a8 <__aeabi_d2f+0x2c>
 8003146:	4c0e      	ldr	r4, [pc, #56]	@ (8003180 <__aeabi_d2f+0x104>)
 8003148:	191c      	adds	r4, r3, r4
 800314a:	002b      	movs	r3, r5
 800314c:	40a5      	lsls	r5, r4
 800314e:	40c3      	lsrs	r3, r0
 8003150:	40a1      	lsls	r1, r4
 8003152:	1e68      	subs	r0, r5, #1
 8003154:	4185      	sbcs	r5, r0
 8003156:	4329      	orrs	r1, r5
 8003158:	430b      	orrs	r3, r1
 800315a:	2400      	movs	r4, #0
 800315c:	0759      	lsls	r1, r3, #29
 800315e:	d1c1      	bne.n	80030e4 <__aeabi_d2f+0x68>
 8003160:	019b      	lsls	r3, r3, #6
 8003162:	2000      	movs	r0, #0
 8003164:	0a5b      	lsrs	r3, r3, #9
 8003166:	e79f      	b.n	80030a8 <__aeabi_d2f+0x2c>
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	b2e0      	uxtb	r0, r4
 800316c:	e79c      	b.n	80030a8 <__aeabi_d2f+0x2c>
 800316e:	3304      	adds	r3, #4
 8003170:	e7e5      	b.n	800313e <__aeabi_d2f+0xc2>
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	000007fe 	.word	0x000007fe
 8003178:	fffffc80 	.word	0xfffffc80
 800317c:	fffffca2 	.word	0xfffffca2
 8003180:	fffffc82 	.word	0xfffffc82

08003184 <__clzsi2>:
 8003184:	211c      	movs	r1, #28
 8003186:	2301      	movs	r3, #1
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	4298      	cmp	r0, r3
 800318c:	d301      	bcc.n	8003192 <__clzsi2+0xe>
 800318e:	0c00      	lsrs	r0, r0, #16
 8003190:	3910      	subs	r1, #16
 8003192:	0a1b      	lsrs	r3, r3, #8
 8003194:	4298      	cmp	r0, r3
 8003196:	d301      	bcc.n	800319c <__clzsi2+0x18>
 8003198:	0a00      	lsrs	r0, r0, #8
 800319a:	3908      	subs	r1, #8
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	4298      	cmp	r0, r3
 80031a0:	d301      	bcc.n	80031a6 <__clzsi2+0x22>
 80031a2:	0900      	lsrs	r0, r0, #4
 80031a4:	3904      	subs	r1, #4
 80031a6:	a202      	add	r2, pc, #8	@ (adr r2, 80031b0 <__clzsi2+0x2c>)
 80031a8:	5c10      	ldrb	r0, [r2, r0]
 80031aa:	1840      	adds	r0, r0, r1
 80031ac:	4770      	bx	lr
 80031ae:	46c0      	nop			@ (mov r8, r8)
 80031b0:	02020304 	.word	0x02020304
 80031b4:	01010101 	.word	0x01010101
	...

080031c0 <InitilizeInertialMeasurementSystem>:
    quat deltaRotation = qPolar(rotationVector);
    ims.rotation = qMultiply(deltaRotation, ims.rotation);
    ims.rotation = qNormalize(ims.rotation);
}

void InitilizeInertialMeasurementSystem() {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b094      	sub	sp, #80	@ 0x50
 80031c4:	af00      	add	r7, sp, #0
    InertialMeasurementSystem sys = {{1, 0, 0}, {0, 1, 0}, {-1, 0, 0}, {0, 0, 0, 1}, {0, 0, 0}, {0, 0, 0}};
 80031c6:	1d3a      	adds	r2, r7, #4
 80031c8:	4b0a      	ldr	r3, [pc, #40]	@ (80031f4 <InitilizeInertialMeasurementSystem+0x34>)
 80031ca:	0010      	movs	r0, r2
 80031cc:	0019      	movs	r1, r3
 80031ce:	234c      	movs	r3, #76	@ 0x4c
 80031d0:	001a      	movs	r2, r3
 80031d2:	f006 fb9c 	bl	800990e <memcpy>
    ims = sys;
 80031d6:	4a08      	ldr	r2, [pc, #32]	@ (80031f8 <InitilizeInertialMeasurementSystem+0x38>)
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	0010      	movs	r0, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	234c      	movs	r3, #76	@ 0x4c
 80031e0:	001a      	movs	r2, r3
 80031e2:	f006 fb94 	bl	800990e <memcpy>
    InitializeSensorManager();
 80031e6:	f000 fe69 	bl	8003ebc <InitializeSensorManager>
}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b014      	add	sp, #80	@ 0x50
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	0800a168 	.word	0x0800a168
 80031f8:	20000098 	.word	0x20000098

080031fc <UpdateSystemEstimate>:

void UpdateSystemEstimate(float deltaTime) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
    UpdateSensorData(deltaTime);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1c18      	adds	r0, r3, #0
 8003208:	f000 ffe0 	bl	80041cc <UpdateSensorData>

    vec3 acceleration = ReadAcceleration();
 800320c:	2314      	movs	r3, #20
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fff5 	bl	8004200 <ReadAcceleration>
    vec3 angularVelocity = ReadAngularVelocity();
 8003216:	2308      	movs	r3, #8
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	0018      	movs	r0, r3
 800321c:	f001 f87a 	bl	8004314 <ReadAngularVelocity>
}
 8003220:	46c0      	nop			@ (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b008      	add	sp, #32
 8003226:	bd80      	pop	{r7, pc}

08003228 <GetEstimate>:

InertialMeasurementSystem GetEstimate(){
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	return ims;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <GetEstimate+0x20>)
 8003234:	0010      	movs	r0, r2
 8003236:	0019      	movs	r1, r3
 8003238:	234c      	movs	r3, #76	@ 0x4c
 800323a:	001a      	movs	r2, r3
 800323c:	f006 fb67 	bl	800990e <memcpy>
}
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	46bd      	mov	sp, r7
 8003244:	b002      	add	sp, #8
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000098 	.word	0x20000098

0800324c <vQuat>:
vec3 vInv(vec3 a) {
    vec3 result = {-a.x, -a.y, -a.z};
    return result;
}

vec3 vQuat(quat a) {
 800324c:	b084      	sub	sp, #16
 800324e:	b590      	push	{r4, r7, lr}
 8003250:	b087      	sub	sp, #28
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
 8003256:	2004      	movs	r0, #4
 8003258:	2428      	movs	r4, #40	@ 0x28
 800325a:	1900      	adds	r0, r0, r4
 800325c:	19c0      	adds	r0, r0, r7
 800325e:	6001      	str	r1, [r0, #0]
 8003260:	6042      	str	r2, [r0, #4]
 8003262:	6083      	str	r3, [r0, #8]
    vec3 result = {a.x, a.y, a.z};
 8003264:	2304      	movs	r3, #4
 8003266:	0021      	movs	r1, r4
 8003268:	185b      	adds	r3, r3, r1
 800326a:	19db      	adds	r3, r3, r7
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	200c      	movs	r0, #12
 8003270:	183b      	adds	r3, r7, r0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	2304      	movs	r3, #4
 8003276:	185b      	adds	r3, r3, r1
 8003278:	19db      	adds	r3, r3, r7
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	183b      	adds	r3, r7, r0
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	2304      	movs	r3, #4
 8003282:	185b      	adds	r3, r3, r1
 8003284:	19db      	adds	r3, r3, r7
 8003286:	689a      	ldr	r2, [r3, #8]
 8003288:	183b      	adds	r3, r7, r0
 800328a:	609a      	str	r2, [r3, #8]
    return result;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	183a      	adds	r2, r7, r0
 8003290:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003292:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	46bd      	mov	sp, r7
 8003298:	b007      	add	sp, #28
 800329a:	bc90      	pop	{r4, r7}
 800329c:	bc08      	pop	{r3}
 800329e:	b004      	add	sp, #16
 80032a0:	4718      	bx	r3

080032a2 <vPolar>:

vec3 vPolar(float a, float b, float c) {
 80032a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a4:	b089      	sub	sp, #36	@ 0x24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
    vec3 result = {c * sin(a) * cos(b), c * sin(a) * sin(b), c * cos(a)};
 80032b0:	6838      	ldr	r0, [r7, #0]
 80032b2:	f7ff fe9b 	bl	8002fec <__aeabi_f2d>
 80032b6:	0004      	movs	r4, r0
 80032b8:	000d      	movs	r5, r1
 80032ba:	68b8      	ldr	r0, [r7, #8]
 80032bc:	f7ff fe96 	bl	8002fec <__aeabi_f2d>
 80032c0:	0002      	movs	r2, r0
 80032c2:	000b      	movs	r3, r1
 80032c4:	0010      	movs	r0, r2
 80032c6:	0019      	movs	r1, r3
 80032c8:	f003 fce6 	bl	8006c98 <sin>
 80032cc:	0002      	movs	r2, r0
 80032ce:	000b      	movs	r3, r1
 80032d0:	0020      	movs	r0, r4
 80032d2:	0029      	movs	r1, r5
 80032d4:	f7fe ff9a 	bl	800220c <__aeabi_dmul>
 80032d8:	0002      	movs	r2, r0
 80032da:	000b      	movs	r3, r1
 80032dc:	0014      	movs	r4, r2
 80032de:	001d      	movs	r5, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff fe83 	bl	8002fec <__aeabi_f2d>
 80032e6:	0002      	movs	r2, r0
 80032e8:	000b      	movs	r3, r1
 80032ea:	0010      	movs	r0, r2
 80032ec:	0019      	movs	r1, r3
 80032ee:	f003 fc8f 	bl	8006c10 <cos>
 80032f2:	0002      	movs	r2, r0
 80032f4:	000b      	movs	r3, r1
 80032f6:	0020      	movs	r0, r4
 80032f8:	0029      	movs	r1, r5
 80032fa:	f7fe ff87 	bl	800220c <__aeabi_dmul>
 80032fe:	0002      	movs	r2, r0
 8003300:	000b      	movs	r3, r1
 8003302:	0010      	movs	r0, r2
 8003304:	0019      	movs	r1, r3
 8003306:	f7ff feb9 	bl	800307c <__aeabi_d2f>
 800330a:	1c02      	adds	r2, r0, #0
 800330c:	2614      	movs	r6, #20
 800330e:	19bb      	adds	r3, r7, r6
 8003310:	601a      	str	r2, [r3, #0]
 8003312:	6838      	ldr	r0, [r7, #0]
 8003314:	f7ff fe6a 	bl	8002fec <__aeabi_f2d>
 8003318:	0004      	movs	r4, r0
 800331a:	000d      	movs	r5, r1
 800331c:	68b8      	ldr	r0, [r7, #8]
 800331e:	f7ff fe65 	bl	8002fec <__aeabi_f2d>
 8003322:	0002      	movs	r2, r0
 8003324:	000b      	movs	r3, r1
 8003326:	0010      	movs	r0, r2
 8003328:	0019      	movs	r1, r3
 800332a:	f003 fcb5 	bl	8006c98 <sin>
 800332e:	0002      	movs	r2, r0
 8003330:	000b      	movs	r3, r1
 8003332:	0020      	movs	r0, r4
 8003334:	0029      	movs	r1, r5
 8003336:	f7fe ff69 	bl	800220c <__aeabi_dmul>
 800333a:	0002      	movs	r2, r0
 800333c:	000b      	movs	r3, r1
 800333e:	0014      	movs	r4, r2
 8003340:	001d      	movs	r5, r3
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff fe52 	bl	8002fec <__aeabi_f2d>
 8003348:	0002      	movs	r2, r0
 800334a:	000b      	movs	r3, r1
 800334c:	0010      	movs	r0, r2
 800334e:	0019      	movs	r1, r3
 8003350:	f003 fca2 	bl	8006c98 <sin>
 8003354:	0002      	movs	r2, r0
 8003356:	000b      	movs	r3, r1
 8003358:	0020      	movs	r0, r4
 800335a:	0029      	movs	r1, r5
 800335c:	f7fe ff56 	bl	800220c <__aeabi_dmul>
 8003360:	0002      	movs	r2, r0
 8003362:	000b      	movs	r3, r1
 8003364:	0010      	movs	r0, r2
 8003366:	0019      	movs	r1, r3
 8003368:	f7ff fe88 	bl	800307c <__aeabi_d2f>
 800336c:	1c02      	adds	r2, r0, #0
 800336e:	19bb      	adds	r3, r7, r6
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	6838      	ldr	r0, [r7, #0]
 8003374:	f7ff fe3a 	bl	8002fec <__aeabi_f2d>
 8003378:	0004      	movs	r4, r0
 800337a:	000d      	movs	r5, r1
 800337c:	68b8      	ldr	r0, [r7, #8]
 800337e:	f7ff fe35 	bl	8002fec <__aeabi_f2d>
 8003382:	0002      	movs	r2, r0
 8003384:	000b      	movs	r3, r1
 8003386:	0010      	movs	r0, r2
 8003388:	0019      	movs	r1, r3
 800338a:	f003 fc41 	bl	8006c10 <cos>
 800338e:	0002      	movs	r2, r0
 8003390:	000b      	movs	r3, r1
 8003392:	0020      	movs	r0, r4
 8003394:	0029      	movs	r1, r5
 8003396:	f7fe ff39 	bl	800220c <__aeabi_dmul>
 800339a:	0002      	movs	r2, r0
 800339c:	000b      	movs	r3, r1
 800339e:	0010      	movs	r0, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	f7ff fe6b 	bl	800307c <__aeabi_d2f>
 80033a6:	1c02      	adds	r2, r0, #0
 80033a8:	19bb      	adds	r3, r7, r6
 80033aa:	609a      	str	r2, [r3, #8]
    return result;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	19ba      	adds	r2, r7, r6
 80033b0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80033b2:	c313      	stmia	r3!, {r0, r1, r4}
}
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	46bd      	mov	sp, r7
 80033b8:	b009      	add	sp, #36	@ 0x24
 80033ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033bc <vAdd>:

vec3 vAdd(vec3 const a, vec3 const b) {
 80033bc:	b5b0      	push	{r4, r5, r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	0038      	movs	r0, r7
 80033c6:	6001      	str	r1, [r0, #0]
 80033c8:	6042      	str	r2, [r0, #4]
 80033ca:	6083      	str	r3, [r0, #8]
    vec3 result = {a.x + b.x, a.y + b.y, a.z + b.z};
 80033cc:	003b      	movs	r3, r7
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	2530      	movs	r5, #48	@ 0x30
 80033d2:	197b      	adds	r3, r7, r5
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1c19      	adds	r1, r3, #0
 80033d8:	1c10      	adds	r0, r2, #0
 80033da:	f7fd f8bb 	bl	8000554 <__aeabi_fadd>
 80033de:	1c03      	adds	r3, r0, #0
 80033e0:	1c1a      	adds	r2, r3, #0
 80033e2:	2414      	movs	r4, #20
 80033e4:	193b      	adds	r3, r7, r4
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	003b      	movs	r3, r7
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	197b      	adds	r3, r7, r5
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	1c19      	adds	r1, r3, #0
 80033f2:	1c10      	adds	r0, r2, #0
 80033f4:	f7fd f8ae 	bl	8000554 <__aeabi_fadd>
 80033f8:	1c03      	adds	r3, r0, #0
 80033fa:	1c1a      	adds	r2, r3, #0
 80033fc:	193b      	adds	r3, r7, r4
 80033fe:	605a      	str	r2, [r3, #4]
 8003400:	003b      	movs	r3, r7
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	197b      	adds	r3, r7, r5
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	1c19      	adds	r1, r3, #0
 800340a:	1c10      	adds	r0, r2, #0
 800340c:	f7fd f8a2 	bl	8000554 <__aeabi_fadd>
 8003410:	1c03      	adds	r3, r0, #0
 8003412:	1c1a      	adds	r2, r3, #0
 8003414:	193b      	adds	r3, r7, r4
 8003416:	609a      	str	r2, [r3, #8]
    return result;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	193a      	adds	r2, r7, r4
 800341c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800341e:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	46bd      	mov	sp, r7
 8003424:	b008      	add	sp, #32
 8003426:	bdb0      	pop	{r4, r5, r7, pc}

08003428 <vSubtract>:

vec3 vSubtract(vec3 const a, vec3 const b) {
 8003428:	b5b0      	push	{r4, r5, r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	0038      	movs	r0, r7
 8003432:	6001      	str	r1, [r0, #0]
 8003434:	6042      	str	r2, [r0, #4]
 8003436:	6083      	str	r3, [r0, #8]
    vec3 result = {a.x - b.x, a.y - b.y, a.z - b.z};
 8003438:	003b      	movs	r3, r7
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2530      	movs	r5, #48	@ 0x30
 800343e:	197b      	adds	r3, r7, r5
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1c19      	adds	r1, r3, #0
 8003444:	1c10      	adds	r0, r2, #0
 8003446:	f7fd fd33 	bl	8000eb0 <__aeabi_fsub>
 800344a:	1c03      	adds	r3, r0, #0
 800344c:	1c1a      	adds	r2, r3, #0
 800344e:	2414      	movs	r4, #20
 8003450:	193b      	adds	r3, r7, r4
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	003b      	movs	r3, r7
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	197b      	adds	r3, r7, r5
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	1c19      	adds	r1, r3, #0
 800345e:	1c10      	adds	r0, r2, #0
 8003460:	f7fd fd26 	bl	8000eb0 <__aeabi_fsub>
 8003464:	1c03      	adds	r3, r0, #0
 8003466:	1c1a      	adds	r2, r3, #0
 8003468:	193b      	adds	r3, r7, r4
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	003b      	movs	r3, r7
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	197b      	adds	r3, r7, r5
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	1c19      	adds	r1, r3, #0
 8003476:	1c10      	adds	r0, r2, #0
 8003478:	f7fd fd1a 	bl	8000eb0 <__aeabi_fsub>
 800347c:	1c03      	adds	r3, r0, #0
 800347e:	1c1a      	adds	r2, r3, #0
 8003480:	193b      	adds	r3, r7, r4
 8003482:	609a      	str	r2, [r3, #8]
    return result;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	193a      	adds	r2, r7, r4
 8003488:	ca13      	ldmia	r2!, {r0, r1, r4}
 800348a:	c313      	stmia	r3!, {r0, r1, r4}
}
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	46bd      	mov	sp, r7
 8003490:	b008      	add	sp, #32
 8003492:	bdb0      	pop	{r4, r5, r7, pc}

08003494 <vScale>:

vec3 vScale(float const a, vec3 const b) {
 8003494:	b082      	sub	sp, #8
 8003496:	b5b0      	push	{r4, r5, r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
 80034a0:	2428      	movs	r4, #40	@ 0x28
 80034a2:	1939      	adds	r1, r7, r4
 80034a4:	600a      	str	r2, [r1, #0]
 80034a6:	604b      	str	r3, [r1, #4]
    vec3 result = {a * b.x, a * b.y, a * b.z};
 80034a8:	193b      	adds	r3, r7, r4
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6839      	ldr	r1, [r7, #0]
 80034ae:	1c18      	adds	r0, r3, #0
 80034b0:	f7fd fbc0 	bl	8000c34 <__aeabi_fmul>
 80034b4:	1c03      	adds	r3, r0, #0
 80034b6:	1c1a      	adds	r2, r3, #0
 80034b8:	250c      	movs	r5, #12
 80034ba:	197b      	adds	r3, r7, r5
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	193b      	adds	r3, r7, r4
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	6839      	ldr	r1, [r7, #0]
 80034c4:	1c18      	adds	r0, r3, #0
 80034c6:	f7fd fbb5 	bl	8000c34 <__aeabi_fmul>
 80034ca:	1c03      	adds	r3, r0, #0
 80034cc:	1c1a      	adds	r2, r3, #0
 80034ce:	197b      	adds	r3, r7, r5
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	193b      	adds	r3, r7, r4
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	1c18      	adds	r0, r3, #0
 80034da:	f7fd fbab 	bl	8000c34 <__aeabi_fmul>
 80034de:	1c03      	adds	r3, r0, #0
 80034e0:	1c1a      	adds	r2, r3, #0
 80034e2:	197b      	adds	r3, r7, r5
 80034e4:	609a      	str	r2, [r3, #8]
    return result;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	197a      	adds	r2, r7, r5
 80034ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80034ec:	c313      	stmia	r3!, {r0, r1, r4}
}
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b006      	add	sp, #24
 80034f4:	bcb0      	pop	{r4, r5, r7}
 80034f6:	bc08      	pop	{r3}
 80034f8:	b002      	add	sp, #8
 80034fa:	4718      	bx	r3

080034fc <vDivide>:

vec3 vDivide(float const a, vec3 const b) {
 80034fc:	b082      	sub	sp, #8
 80034fe:	b5b0      	push	{r4, r5, r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	6039      	str	r1, [r7, #0]
 8003508:	2428      	movs	r4, #40	@ 0x28
 800350a:	1939      	adds	r1, r7, r4
 800350c:	600a      	str	r2, [r1, #0]
 800350e:	604b      	str	r3, [r1, #4]
    vec3 result = {b.x / a, b.y / a, b.z / a};
 8003510:	193b      	adds	r3, r7, r4
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6839      	ldr	r1, [r7, #0]
 8003516:	1c18      	adds	r0, r3, #0
 8003518:	f7fd f9a6 	bl	8000868 <__aeabi_fdiv>
 800351c:	1c03      	adds	r3, r0, #0
 800351e:	1c1a      	adds	r2, r3, #0
 8003520:	250c      	movs	r5, #12
 8003522:	197b      	adds	r3, r7, r5
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	193b      	adds	r3, r7, r4
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	6839      	ldr	r1, [r7, #0]
 800352c:	1c18      	adds	r0, r3, #0
 800352e:	f7fd f99b 	bl	8000868 <__aeabi_fdiv>
 8003532:	1c03      	adds	r3, r0, #0
 8003534:	1c1a      	adds	r2, r3, #0
 8003536:	197b      	adds	r3, r7, r5
 8003538:	605a      	str	r2, [r3, #4]
 800353a:	193b      	adds	r3, r7, r4
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	1c18      	adds	r0, r3, #0
 8003542:	f7fd f991 	bl	8000868 <__aeabi_fdiv>
 8003546:	1c03      	adds	r3, r0, #0
 8003548:	1c1a      	adds	r2, r3, #0
 800354a:	197b      	adds	r3, r7, r5
 800354c:	609a      	str	r2, [r3, #8]
    return result;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	197a      	adds	r2, r7, r5
 8003552:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003554:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	46bd      	mov	sp, r7
 800355a:	b006      	add	sp, #24
 800355c:	bcb0      	pop	{r4, r5, r7}
 800355e:	bc08      	pop	{r3}
 8003560:	b002      	add	sp, #8
 8003562:	4718      	bx	r3

08003564 <qReal>:
vec3 vNormalize(vec3 const a) {
    if (vLength(a) == 0) return a;
    return vDivide(vLength(a), a);
}

quat qReal(float const a) {
 8003564:	b590      	push	{r4, r7, lr}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
    quat result = {0, 0, 0, a};
 800356e:	2108      	movs	r1, #8
 8003570:	187b      	adds	r3, r7, r1
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	187b      	adds	r3, r7, r1
 8003578:	2200      	movs	r2, #0
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	187b      	adds	r3, r7, r1
 800357e:	2200      	movs	r2, #0
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	187b      	adds	r3, r7, r1
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	60da      	str	r2, [r3, #12]
    return result;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	187a      	adds	r2, r7, r1
 800358c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800358e:	c313      	stmia	r3!, {r0, r1, r4}
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	601a      	str	r2, [r3, #0]
}
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	46bd      	mov	sp, r7
 8003598:	b007      	add	sp, #28
 800359a:	bd90      	pop	{r4, r7, pc}

0800359c <qAdd>:
quat qInvert(quat const a) {
    quat result = {-a.x, -a.y, -a.z, -a.w};
    return result;
}

quat qAdd(quat const a, quat const b) {
 800359c:	b084      	sub	sp, #16
 800359e:	b5b0      	push	{r4, r5, r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
 80035a6:	2004      	movs	r0, #4
 80035a8:	2428      	movs	r4, #40	@ 0x28
 80035aa:	1900      	adds	r0, r0, r4
 80035ac:	19c0      	adds	r0, r0, r7
 80035ae:	6001      	str	r1, [r0, #0]
 80035b0:	6042      	str	r2, [r0, #4]
 80035b2:	6083      	str	r3, [r0, #8]
    quat result = {a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w};
 80035b4:	2304      	movs	r3, #4
 80035b6:	191b      	adds	r3, r3, r4
 80035b8:	19db      	adds	r3, r3, r7
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	2314      	movs	r3, #20
 80035be:	191b      	adds	r3, r3, r4
 80035c0:	19db      	adds	r3, r3, r7
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	1c19      	adds	r1, r3, #0
 80035c6:	1c10      	adds	r0, r2, #0
 80035c8:	f7fc ffc4 	bl	8000554 <__aeabi_fadd>
 80035cc:	1c03      	adds	r3, r0, #0
 80035ce:	1c1a      	adds	r2, r3, #0
 80035d0:	2508      	movs	r5, #8
 80035d2:	197b      	adds	r3, r7, r5
 80035d4:	601a      	str	r2, [r3, #0]
 80035d6:	2304      	movs	r3, #4
 80035d8:	191b      	adds	r3, r3, r4
 80035da:	19db      	adds	r3, r3, r7
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	2314      	movs	r3, #20
 80035e0:	191b      	adds	r3, r3, r4
 80035e2:	19db      	adds	r3, r3, r7
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	1c19      	adds	r1, r3, #0
 80035e8:	1c10      	adds	r0, r2, #0
 80035ea:	f7fc ffb3 	bl	8000554 <__aeabi_fadd>
 80035ee:	1c03      	adds	r3, r0, #0
 80035f0:	1c1a      	adds	r2, r3, #0
 80035f2:	197b      	adds	r3, r7, r5
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	2304      	movs	r3, #4
 80035f8:	191b      	adds	r3, r3, r4
 80035fa:	19db      	adds	r3, r3, r7
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	2314      	movs	r3, #20
 8003600:	191b      	adds	r3, r3, r4
 8003602:	19db      	adds	r3, r3, r7
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	1c19      	adds	r1, r3, #0
 8003608:	1c10      	adds	r0, r2, #0
 800360a:	f7fc ffa3 	bl	8000554 <__aeabi_fadd>
 800360e:	1c03      	adds	r3, r0, #0
 8003610:	1c1a      	adds	r2, r3, #0
 8003612:	197b      	adds	r3, r7, r5
 8003614:	609a      	str	r2, [r3, #8]
 8003616:	2304      	movs	r3, #4
 8003618:	191b      	adds	r3, r3, r4
 800361a:	19db      	adds	r3, r3, r7
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	2314      	movs	r3, #20
 8003620:	191b      	adds	r3, r3, r4
 8003622:	19db      	adds	r3, r3, r7
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	1c19      	adds	r1, r3, #0
 8003628:	1c10      	adds	r0, r2, #0
 800362a:	f7fc ff93 	bl	8000554 <__aeabi_fadd>
 800362e:	1c03      	adds	r3, r0, #0
 8003630:	1c1a      	adds	r2, r3, #0
 8003632:	197b      	adds	r3, r7, r5
 8003634:	60da      	str	r2, [r3, #12]
    return result;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	197a      	adds	r2, r7, r5
 800363a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800363c:	c313      	stmia	r3!, {r0, r1, r4}
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	601a      	str	r2, [r3, #0]
}
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	46bd      	mov	sp, r7
 8003646:	b006      	add	sp, #24
 8003648:	bcb0      	pop	{r4, r5, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	b004      	add	sp, #16
 800364e:	4718      	bx	r3

08003650 <qSubtract>:

quat qSubtract(quat const a, quat const b) {
 8003650:	b084      	sub	sp, #16
 8003652:	b5b0      	push	{r4, r5, r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	2004      	movs	r0, #4
 800365c:	2428      	movs	r4, #40	@ 0x28
 800365e:	1900      	adds	r0, r0, r4
 8003660:	19c0      	adds	r0, r0, r7
 8003662:	6001      	str	r1, [r0, #0]
 8003664:	6042      	str	r2, [r0, #4]
 8003666:	6083      	str	r3, [r0, #8]
    quat result = {a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w};
 8003668:	2304      	movs	r3, #4
 800366a:	191b      	adds	r3, r3, r4
 800366c:	19db      	adds	r3, r3, r7
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	2314      	movs	r3, #20
 8003672:	191b      	adds	r3, r3, r4
 8003674:	19db      	adds	r3, r3, r7
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	1c19      	adds	r1, r3, #0
 800367a:	1c10      	adds	r0, r2, #0
 800367c:	f7fd fc18 	bl	8000eb0 <__aeabi_fsub>
 8003680:	1c03      	adds	r3, r0, #0
 8003682:	1c1a      	adds	r2, r3, #0
 8003684:	2508      	movs	r5, #8
 8003686:	197b      	adds	r3, r7, r5
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	2304      	movs	r3, #4
 800368c:	191b      	adds	r3, r3, r4
 800368e:	19db      	adds	r3, r3, r7
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	2314      	movs	r3, #20
 8003694:	191b      	adds	r3, r3, r4
 8003696:	19db      	adds	r3, r3, r7
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	1c19      	adds	r1, r3, #0
 800369c:	1c10      	adds	r0, r2, #0
 800369e:	f7fd fc07 	bl	8000eb0 <__aeabi_fsub>
 80036a2:	1c03      	adds	r3, r0, #0
 80036a4:	1c1a      	adds	r2, r3, #0
 80036a6:	197b      	adds	r3, r7, r5
 80036a8:	605a      	str	r2, [r3, #4]
 80036aa:	2304      	movs	r3, #4
 80036ac:	191b      	adds	r3, r3, r4
 80036ae:	19db      	adds	r3, r3, r7
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	2314      	movs	r3, #20
 80036b4:	191b      	adds	r3, r3, r4
 80036b6:	19db      	adds	r3, r3, r7
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	1c19      	adds	r1, r3, #0
 80036bc:	1c10      	adds	r0, r2, #0
 80036be:	f7fd fbf7 	bl	8000eb0 <__aeabi_fsub>
 80036c2:	1c03      	adds	r3, r0, #0
 80036c4:	1c1a      	adds	r2, r3, #0
 80036c6:	197b      	adds	r3, r7, r5
 80036c8:	609a      	str	r2, [r3, #8]
 80036ca:	2304      	movs	r3, #4
 80036cc:	191b      	adds	r3, r3, r4
 80036ce:	19db      	adds	r3, r3, r7
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	2314      	movs	r3, #20
 80036d4:	191b      	adds	r3, r3, r4
 80036d6:	19db      	adds	r3, r3, r7
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	1c19      	adds	r1, r3, #0
 80036dc:	1c10      	adds	r0, r2, #0
 80036de:	f7fd fbe7 	bl	8000eb0 <__aeabi_fsub>
 80036e2:	1c03      	adds	r3, r0, #0
 80036e4:	1c1a      	adds	r2, r3, #0
 80036e6:	197b      	adds	r3, r7, r5
 80036e8:	60da      	str	r2, [r3, #12]
    return result;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	197a      	adds	r2, r7, r5
 80036ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80036f0:	c313      	stmia	r3!, {r0, r1, r4}
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b006      	add	sp, #24
 80036fc:	bcb0      	pop	{r4, r5, r7}
 80036fe:	bc08      	pop	{r3}
 8003700:	b004      	add	sp, #16
 8003702:	4718      	bx	r3

08003704 <qScale>:

quat qScale(float const a, quat const b) {
 8003704:	b082      	sub	sp, #8
 8003706:	b5b0      	push	{r4, r5, r7, lr}
 8003708:	b086      	sub	sp, #24
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
 8003710:	2428      	movs	r4, #40	@ 0x28
 8003712:	1939      	adds	r1, r7, r4
 8003714:	600a      	str	r2, [r1, #0]
 8003716:	604b      	str	r3, [r1, #4]
    quat result = {a * b.x, a * b.y, a * b.z, a * b.w};
 8003718:	193b      	adds	r3, r7, r4
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	1c18      	adds	r0, r3, #0
 8003720:	f7fd fa88 	bl	8000c34 <__aeabi_fmul>
 8003724:	1c03      	adds	r3, r0, #0
 8003726:	1c1a      	adds	r2, r3, #0
 8003728:	2508      	movs	r5, #8
 800372a:	197b      	adds	r3, r7, r5
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	193b      	adds	r3, r7, r4
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	6839      	ldr	r1, [r7, #0]
 8003734:	1c18      	adds	r0, r3, #0
 8003736:	f7fd fa7d 	bl	8000c34 <__aeabi_fmul>
 800373a:	1c03      	adds	r3, r0, #0
 800373c:	1c1a      	adds	r2, r3, #0
 800373e:	197b      	adds	r3, r7, r5
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	193b      	adds	r3, r7, r4
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	6839      	ldr	r1, [r7, #0]
 8003748:	1c18      	adds	r0, r3, #0
 800374a:	f7fd fa73 	bl	8000c34 <__aeabi_fmul>
 800374e:	1c03      	adds	r3, r0, #0
 8003750:	1c1a      	adds	r2, r3, #0
 8003752:	197b      	adds	r3, r7, r5
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	193b      	adds	r3, r7, r4
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	6839      	ldr	r1, [r7, #0]
 800375c:	1c18      	adds	r0, r3, #0
 800375e:	f7fd fa69 	bl	8000c34 <__aeabi_fmul>
 8003762:	1c03      	adds	r3, r0, #0
 8003764:	1c1a      	adds	r2, r3, #0
 8003766:	197b      	adds	r3, r7, r5
 8003768:	60da      	str	r2, [r3, #12]
    return result;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	197a      	adds	r2, r7, r5
 800376e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003770:	c313      	stmia	r3!, {r0, r1, r4}
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	601a      	str	r2, [r3, #0]
}
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	46bd      	mov	sp, r7
 800377a:	b006      	add	sp, #24
 800377c:	bcb0      	pop	{r4, r5, r7}
 800377e:	bc08      	pop	{r3}
 8003780:	b002      	add	sp, #8
 8003782:	4718      	bx	r3

08003784 <qDot>:
quat qDivide(float const a, quat const b) {
    quat result = {b.x / a, b.y / a, b.z / a, b.w / a};
    return result;
}

float qDot(quat const a, quat const b) {
 8003784:	b5b0      	push	{r4, r5, r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	003c      	movs	r4, r7
 800378c:	6020      	str	r0, [r4, #0]
 800378e:	6061      	str	r1, [r4, #4]
 8003790:	60a2      	str	r2, [r4, #8]
 8003792:	60e3      	str	r3, [r4, #12]
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
 8003794:	003b      	movs	r3, r7
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	2520      	movs	r5, #32
 800379a:	197b      	adds	r3, r7, r5
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1c19      	adds	r1, r3, #0
 80037a0:	1c10      	adds	r0, r2, #0
 80037a2:	f7fd fa47 	bl	8000c34 <__aeabi_fmul>
 80037a6:	1c03      	adds	r3, r0, #0
 80037a8:	1c1c      	adds	r4, r3, #0
 80037aa:	003b      	movs	r3, r7
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	197b      	adds	r3, r7, r5
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	1c19      	adds	r1, r3, #0
 80037b4:	1c10      	adds	r0, r2, #0
 80037b6:	f7fd fa3d 	bl	8000c34 <__aeabi_fmul>
 80037ba:	1c03      	adds	r3, r0, #0
 80037bc:	1c19      	adds	r1, r3, #0
 80037be:	1c20      	adds	r0, r4, #0
 80037c0:	f7fc fec8 	bl	8000554 <__aeabi_fadd>
 80037c4:	1c03      	adds	r3, r0, #0
 80037c6:	1c1c      	adds	r4, r3, #0
 80037c8:	003b      	movs	r3, r7
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	197b      	adds	r3, r7, r5
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	1c19      	adds	r1, r3, #0
 80037d2:	1c10      	adds	r0, r2, #0
 80037d4:	f7fd fa2e 	bl	8000c34 <__aeabi_fmul>
 80037d8:	1c03      	adds	r3, r0, #0
 80037da:	1c19      	adds	r1, r3, #0
 80037dc:	1c20      	adds	r0, r4, #0
 80037de:	f7fc feb9 	bl	8000554 <__aeabi_fadd>
 80037e2:	1c03      	adds	r3, r0, #0
 80037e4:	1c1c      	adds	r4, r3, #0
 80037e6:	003b      	movs	r3, r7
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	197b      	adds	r3, r7, r5
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	1c19      	adds	r1, r3, #0
 80037f0:	1c10      	adds	r0, r2, #0
 80037f2:	f7fd fa1f 	bl	8000c34 <__aeabi_fmul>
 80037f6:	1c03      	adds	r3, r0, #0
 80037f8:	1c19      	adds	r1, r3, #0
 80037fa:	1c20      	adds	r0, r4, #0
 80037fc:	f7fc feaa 	bl	8000554 <__aeabi_fadd>
 8003800:	1c03      	adds	r3, r0, #0
}
 8003802:	1c18      	adds	r0, r3, #0
 8003804:	46bd      	mov	sp, r7
 8003806:	b004      	add	sp, #16
 8003808:	bdb0      	pop	{r4, r5, r7, pc}

0800380a <qCross>:
quat qNormalize(quat const a) {
    if (qLength(a) == 0) return a;
    return qDivide(qLength(a), a);
}

quat qCross(quat const a, quat const b) {
 800380a:	b084      	sub	sp, #16
 800380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380e:	b087      	sub	sp, #28
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	2004      	movs	r0, #4
 8003816:	2528      	movs	r5, #40	@ 0x28
 8003818:	1940      	adds	r0, r0, r5
 800381a:	2408      	movs	r4, #8
 800381c:	46a4      	mov	ip, r4
 800381e:	44bc      	add	ip, r7
 8003820:	4460      	add	r0, ip
 8003822:	6001      	str	r1, [r0, #0]
 8003824:	6042      	str	r2, [r0, #4]
 8003826:	6083      	str	r3, [r0, #8]
    quat result = {a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x, 0};
 8003828:	2304      	movs	r3, #4
 800382a:	195b      	adds	r3, r3, r5
 800382c:	2208      	movs	r2, #8
 800382e:	4694      	mov	ip, r2
 8003830:	44bc      	add	ip, r7
 8003832:	4463      	add	r3, ip
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	2314      	movs	r3, #20
 8003838:	195b      	adds	r3, r3, r5
 800383a:	2108      	movs	r1, #8
 800383c:	468c      	mov	ip, r1
 800383e:	44bc      	add	ip, r7
 8003840:	4463      	add	r3, ip
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	1c19      	adds	r1, r3, #0
 8003846:	1c10      	adds	r0, r2, #0
 8003848:	f7fd f9f4 	bl	8000c34 <__aeabi_fmul>
 800384c:	1c03      	adds	r3, r0, #0
 800384e:	1c1c      	adds	r4, r3, #0
 8003850:	2304      	movs	r3, #4
 8003852:	195b      	adds	r3, r3, r5
 8003854:	2208      	movs	r2, #8
 8003856:	4694      	mov	ip, r2
 8003858:	44bc      	add	ip, r7
 800385a:	4463      	add	r3, ip
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	2314      	movs	r3, #20
 8003860:	195b      	adds	r3, r3, r5
 8003862:	2108      	movs	r1, #8
 8003864:	468c      	mov	ip, r1
 8003866:	44bc      	add	ip, r7
 8003868:	4463      	add	r3, ip
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	1c19      	adds	r1, r3, #0
 800386e:	1c10      	adds	r0, r2, #0
 8003870:	f7fd f9e0 	bl	8000c34 <__aeabi_fmul>
 8003874:	1c03      	adds	r3, r0, #0
 8003876:	1c19      	adds	r1, r3, #0
 8003878:	1c20      	adds	r0, r4, #0
 800387a:	f7fd fb19 	bl	8000eb0 <__aeabi_fsub>
 800387e:	1c03      	adds	r3, r0, #0
 8003880:	1c1a      	adds	r2, r3, #0
 8003882:	2608      	movs	r6, #8
 8003884:	19bb      	adds	r3, r7, r6
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	2304      	movs	r3, #4
 800388a:	195b      	adds	r3, r3, r5
 800388c:	2208      	movs	r2, #8
 800388e:	4694      	mov	ip, r2
 8003890:	44bc      	add	ip, r7
 8003892:	4463      	add	r3, ip
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	2314      	movs	r3, #20
 8003898:	195b      	adds	r3, r3, r5
 800389a:	2108      	movs	r1, #8
 800389c:	468c      	mov	ip, r1
 800389e:	44bc      	add	ip, r7
 80038a0:	4463      	add	r3, ip
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	1c19      	adds	r1, r3, #0
 80038a6:	1c10      	adds	r0, r2, #0
 80038a8:	f7fd f9c4 	bl	8000c34 <__aeabi_fmul>
 80038ac:	1c03      	adds	r3, r0, #0
 80038ae:	1c1c      	adds	r4, r3, #0
 80038b0:	2304      	movs	r3, #4
 80038b2:	195b      	adds	r3, r3, r5
 80038b4:	2208      	movs	r2, #8
 80038b6:	4694      	mov	ip, r2
 80038b8:	44bc      	add	ip, r7
 80038ba:	4463      	add	r3, ip
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	2314      	movs	r3, #20
 80038c0:	195b      	adds	r3, r3, r5
 80038c2:	2108      	movs	r1, #8
 80038c4:	468c      	mov	ip, r1
 80038c6:	44bc      	add	ip, r7
 80038c8:	4463      	add	r3, ip
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	1c19      	adds	r1, r3, #0
 80038ce:	1c10      	adds	r0, r2, #0
 80038d0:	f7fd f9b0 	bl	8000c34 <__aeabi_fmul>
 80038d4:	1c03      	adds	r3, r0, #0
 80038d6:	1c19      	adds	r1, r3, #0
 80038d8:	1c20      	adds	r0, r4, #0
 80038da:	f7fd fae9 	bl	8000eb0 <__aeabi_fsub>
 80038de:	1c03      	adds	r3, r0, #0
 80038e0:	1c1a      	adds	r2, r3, #0
 80038e2:	19bb      	adds	r3, r7, r6
 80038e4:	605a      	str	r2, [r3, #4]
 80038e6:	2304      	movs	r3, #4
 80038e8:	195b      	adds	r3, r3, r5
 80038ea:	2208      	movs	r2, #8
 80038ec:	4694      	mov	ip, r2
 80038ee:	44bc      	add	ip, r7
 80038f0:	4463      	add	r3, ip
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	2314      	movs	r3, #20
 80038f6:	195b      	adds	r3, r3, r5
 80038f8:	2108      	movs	r1, #8
 80038fa:	468c      	mov	ip, r1
 80038fc:	44bc      	add	ip, r7
 80038fe:	4463      	add	r3, ip
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	1c19      	adds	r1, r3, #0
 8003904:	1c10      	adds	r0, r2, #0
 8003906:	f7fd f995 	bl	8000c34 <__aeabi_fmul>
 800390a:	1c03      	adds	r3, r0, #0
 800390c:	1c1c      	adds	r4, r3, #0
 800390e:	2304      	movs	r3, #4
 8003910:	195b      	adds	r3, r3, r5
 8003912:	2208      	movs	r2, #8
 8003914:	4694      	mov	ip, r2
 8003916:	44bc      	add	ip, r7
 8003918:	4463      	add	r3, ip
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	2314      	movs	r3, #20
 800391e:	195b      	adds	r3, r3, r5
 8003920:	2108      	movs	r1, #8
 8003922:	468c      	mov	ip, r1
 8003924:	44bc      	add	ip, r7
 8003926:	4463      	add	r3, ip
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	1c19      	adds	r1, r3, #0
 800392c:	1c10      	adds	r0, r2, #0
 800392e:	f7fd f981 	bl	8000c34 <__aeabi_fmul>
 8003932:	1c03      	adds	r3, r0, #0
 8003934:	1c19      	adds	r1, r3, #0
 8003936:	1c20      	adds	r0, r4, #0
 8003938:	f7fd faba 	bl	8000eb0 <__aeabi_fsub>
 800393c:	1c03      	adds	r3, r0, #0
 800393e:	1c1a      	adds	r2, r3, #0
 8003940:	19bb      	adds	r3, r7, r6
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	19bb      	adds	r3, r7, r6
 8003946:	2200      	movs	r2, #0
 8003948:	60da      	str	r2, [r3, #12]
    return result;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	19ba      	adds	r2, r7, r6
 800394e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003950:	c313      	stmia	r3!, {r0, r1, r4}
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	601a      	str	r2, [r3, #0]
}
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	46bd      	mov	sp, r7
 800395a:	b007      	add	sp, #28
 800395c:	bcf0      	pop	{r4, r5, r6, r7}
 800395e:	bc08      	pop	{r3}
 8003960:	b004      	add	sp, #16
 8003962:	4718      	bx	r3

08003964 <qMultiply>:

quat qMultiply(quat const a, quat const b) {
 8003964:	b084      	sub	sp, #16
 8003966:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003968:	b09d      	sub	sp, #116	@ 0x74
 800396a:	af06      	add	r7, sp, #24
 800396c:	6178      	str	r0, [r7, #20]
 800396e:	2004      	movs	r0, #4
 8003970:	2470      	movs	r4, #112	@ 0x70
 8003972:	1900      	adds	r0, r0, r4
 8003974:	19c0      	adds	r0, r0, r7
 8003976:	6001      	str	r1, [r0, #0]
 8003978:	6042      	str	r2, [r0, #4]
 800397a:	6083      	str	r3, [r0, #8]
    quat result = qCross(a, b);
 800397c:	2318      	movs	r3, #24
 800397e:	18f8      	adds	r0, r7, r3
 8003980:	2304      	movs	r3, #4
 8003982:	191a      	adds	r2, r3, r4
 8003984:	19d3      	adds	r3, r2, r7
 8003986:	2214      	movs	r2, #20
 8003988:	1911      	adds	r1, r2, r4
 800398a:	19c9      	adds	r1, r1, r7
 800398c:	2204      	movs	r2, #4
 800398e:	446a      	add	r2, sp
 8003990:	c970      	ldmia	r1!, {r4, r5, r6}
 8003992:	c270      	stmia	r2!, {r4, r5, r6}
 8003994:	6809      	ldr	r1, [r1, #0]
 8003996:	6011      	str	r1, [r2, #0]
 8003998:	466a      	mov	r2, sp
 800399a:	68d9      	ldr	r1, [r3, #12]
 800399c:	6011      	str	r1, [r2, #0]
 800399e:	6819      	ldr	r1, [r3, #0]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f7ff ff31 	bl	800380a <qCross>
    result = qAdd(result, qScale(a.w, b));
 80039a8:	2304      	movs	r3, #4
 80039aa:	2270      	movs	r2, #112	@ 0x70
 80039ac:	1899      	adds	r1, r3, r2
 80039ae:	19cb      	adds	r3, r1, r7
 80039b0:	68dc      	ldr	r4, [r3, #12]
 80039b2:	2128      	movs	r1, #40	@ 0x28
 80039b4:	1878      	adds	r0, r7, r1
 80039b6:	2314      	movs	r3, #20
 80039b8:	189d      	adds	r5, r3, r2
 80039ba:	19eb      	adds	r3, r5, r7
 80039bc:	466a      	mov	r2, sp
 80039be:	0011      	movs	r1, r2
 80039c0:	001d      	movs	r5, r3
 80039c2:	3508      	adds	r5, #8
 80039c4:	002a      	movs	r2, r5
 80039c6:	ca60      	ldmia	r2!, {r5, r6}
 80039c8:	c160      	stmia	r1!, {r5, r6}
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	1c21      	adds	r1, r4, #0
 80039d0:	f7ff fe98 	bl	8003704 <qScale>
 80039d4:	2318      	movs	r3, #24
 80039d6:	18fc      	adds	r4, r7, r3
 80039d8:	46bc      	mov	ip, r7
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	2128      	movs	r1, #40	@ 0x28
 80039de:	1879      	adds	r1, r7, r1
 80039e0:	2204      	movs	r2, #4
 80039e2:	446a      	add	r2, sp
 80039e4:	c961      	ldmia	r1!, {r0, r5, r6}
 80039e6:	c261      	stmia	r2!, {r0, r5, r6}
 80039e8:	6809      	ldr	r1, [r1, #0]
 80039ea:	6011      	str	r1, [r2, #0]
 80039ec:	466a      	mov	r2, sp
 80039ee:	68d9      	ldr	r1, [r3, #12]
 80039f0:	6011      	str	r1, [r2, #0]
 80039f2:	6819      	ldr	r1, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4660      	mov	r0, ip
 80039fa:	f7ff fdcf 	bl	800359c <qAdd>
 80039fe:	003a      	movs	r2, r7
 8003a00:	0023      	movs	r3, r4
 8003a02:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a04:	c313      	stmia	r3!, {r0, r1, r4}
 8003a06:	6812      	ldr	r2, [r2, #0]
 8003a08:	601a      	str	r2, [r3, #0]
    result = qAdd(result, qScale(b.w, a));
 8003a0a:	2314      	movs	r3, #20
 8003a0c:	2270      	movs	r2, #112	@ 0x70
 8003a0e:	1899      	adds	r1, r3, r2
 8003a10:	19cb      	adds	r3, r1, r7
 8003a12:	68dc      	ldr	r4, [r3, #12]
 8003a14:	2138      	movs	r1, #56	@ 0x38
 8003a16:	1878      	adds	r0, r7, r1
 8003a18:	2304      	movs	r3, #4
 8003a1a:	189e      	adds	r6, r3, r2
 8003a1c:	19f3      	adds	r3, r6, r7
 8003a1e:	466a      	mov	r2, sp
 8003a20:	0011      	movs	r1, r2
 8003a22:	001e      	movs	r6, r3
 8003a24:	3608      	adds	r6, #8
 8003a26:	0032      	movs	r2, r6
 8003a28:	ca60      	ldmia	r2!, {r5, r6}
 8003a2a:	c160      	stmia	r1!, {r5, r6}
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	1c21      	adds	r1, r4, #0
 8003a32:	f7ff fe67 	bl	8003704 <qScale>
 8003a36:	2318      	movs	r3, #24
 8003a38:	18fc      	adds	r4, r7, r3
 8003a3a:	46bc      	mov	ip, r7
 8003a3c:	18fb      	adds	r3, r7, r3
 8003a3e:	2538      	movs	r5, #56	@ 0x38
 8003a40:	1979      	adds	r1, r7, r5
 8003a42:	2204      	movs	r2, #4
 8003a44:	446a      	add	r2, sp
 8003a46:	c961      	ldmia	r1!, {r0, r5, r6}
 8003a48:	c261      	stmia	r2!, {r0, r5, r6}
 8003a4a:	6809      	ldr	r1, [r1, #0]
 8003a4c:	6011      	str	r1, [r2, #0]
 8003a4e:	466a      	mov	r2, sp
 8003a50:	68d9      	ldr	r1, [r3, #12]
 8003a52:	6011      	str	r1, [r2, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	4660      	mov	r0, ip
 8003a5c:	f7ff fd9e 	bl	800359c <qAdd>
 8003a60:	003a      	movs	r2, r7
 8003a62:	0023      	movs	r3, r4
 8003a64:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003a66:	c313      	stmia	r3!, {r0, r1, r4}
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	601a      	str	r2, [r3, #0]
    result = qSubtract(result, qReal(qDot(a, b)));
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	2170      	movs	r1, #112	@ 0x70
 8003a70:	185a      	adds	r2, r3, r1
 8003a72:	19d3      	adds	r3, r2, r7
 8003a74:	2214      	movs	r2, #20
 8003a76:	1852      	adds	r2, r2, r1
 8003a78:	19d1      	adds	r1, r2, r7
 8003a7a:	466a      	mov	r2, sp
 8003a7c:	c931      	ldmia	r1!, {r0, r4, r5}
 8003a7e:	c231      	stmia	r2!, {r0, r4, r5}
 8003a80:	6809      	ldr	r1, [r1, #0]
 8003a82:	6011      	str	r1, [r2, #0]
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f7ff fe7a 	bl	8003784 <qDot>
 8003a90:	1c02      	adds	r2, r0, #0
 8003a92:	2548      	movs	r5, #72	@ 0x48
 8003a94:	197b      	adds	r3, r7, r5
 8003a96:	1c11      	adds	r1, r2, #0
 8003a98:	0018      	movs	r0, r3
 8003a9a:	f7ff fd63 	bl	8003564 <qReal>
 8003a9e:	2318      	movs	r3, #24
 8003aa0:	18fc      	adds	r4, r7, r3
 8003aa2:	46bc      	mov	ip, r7
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	1979      	adds	r1, r7, r5
 8003aa8:	2204      	movs	r2, #4
 8003aaa:	446a      	add	r2, sp
 8003aac:	c961      	ldmia	r1!, {r0, r5, r6}
 8003aae:	c261      	stmia	r2!, {r0, r5, r6}
 8003ab0:	6809      	ldr	r1, [r1, #0]
 8003ab2:	6011      	str	r1, [r2, #0]
 8003ab4:	466a      	mov	r2, sp
 8003ab6:	68d9      	ldr	r1, [r3, #12]
 8003ab8:	6011      	str	r1, [r2, #0]
 8003aba:	6819      	ldr	r1, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4660      	mov	r0, ip
 8003ac2:	f7ff fdc5 	bl	8003650 <qSubtract>
 8003ac6:	003a      	movs	r2, r7
 8003ac8:	0023      	movs	r3, r4
 8003aca:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003acc:	c313      	stmia	r3!, {r0, r1, r4}
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
    return result;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2218      	movs	r2, #24
 8003ad6:	18ba      	adds	r2, r7, r2
 8003ad8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ada:	c313      	stmia	r3!, {r0, r1, r4}
 8003adc:	6812      	ldr	r2, [r2, #0]
 8003ade:	601a      	str	r2, [r3, #0]
}
 8003ae0:	6978      	ldr	r0, [r7, #20]
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b017      	add	sp, #92	@ 0x5c
 8003ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ae8:	bc08      	pop	{r3}
 8003aea:	b004      	add	sp, #16
 8003aec:	4718      	bx	r3

08003aee <qConjugate>:

quat qConjugate(quat const a) {
 8003aee:	b084      	sub	sp, #16
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	2004      	movs	r0, #4
 8003afa:	2428      	movs	r4, #40	@ 0x28
 8003afc:	1900      	adds	r0, r0, r4
 8003afe:	19c0      	adds	r0, r0, r7
 8003b00:	6001      	str	r1, [r0, #0]
 8003b02:	6042      	str	r2, [r0, #4]
 8003b04:	6083      	str	r3, [r0, #8]
    quat result = {-a.x, -a.y, -a.z, a.w};
 8003b06:	2304      	movs	r3, #4
 8003b08:	0021      	movs	r1, r4
 8003b0a:	185b      	adds	r3, r3, r1
 8003b0c:	19db      	adds	r3, r3, r7
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2280      	movs	r2, #128	@ 0x80
 8003b12:	0612      	lsls	r2, r2, #24
 8003b14:	405a      	eors	r2, r3
 8003b16:	2008      	movs	r0, #8
 8003b18:	183b      	adds	r3, r7, r0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	185b      	adds	r3, r3, r1
 8003b20:	19db      	adds	r3, r3, r7
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2280      	movs	r2, #128	@ 0x80
 8003b26:	0612      	lsls	r2, r2, #24
 8003b28:	405a      	eors	r2, r3
 8003b2a:	183b      	adds	r3, r7, r0
 8003b2c:	605a      	str	r2, [r3, #4]
 8003b2e:	2304      	movs	r3, #4
 8003b30:	185b      	adds	r3, r3, r1
 8003b32:	19db      	adds	r3, r3, r7
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	0612      	lsls	r2, r2, #24
 8003b3a:	405a      	eors	r2, r3
 8003b3c:	183b      	adds	r3, r7, r0
 8003b3e:	609a      	str	r2, [r3, #8]
 8003b40:	2304      	movs	r3, #4
 8003b42:	185b      	adds	r3, r3, r1
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	183b      	adds	r3, r7, r0
 8003b4a:	60da      	str	r2, [r3, #12]
    return result;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	183a      	adds	r2, r7, r0
 8003b50:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b52:	c313      	stmia	r3!, {r0, r1, r4}
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b007      	add	sp, #28
 8003b5e:	bc90      	pop	{r4, r7}
 8003b60:	bc08      	pop	{r3}
 8003b62:	b004      	add	sp, #16
 8003b64:	4718      	bx	r3

08003b66 <qRotateVector>:
    vec3 normal = vNormalize(axis);
    float angle = vLength(axis);
    return qAdd(qScale(sin(angle), qVector(normal)), qReal(cos(angle)));
}

vec3 qRotateVector(vec3 const a, quat const b) {
 8003b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b68:	b09f      	sub	sp, #124	@ 0x7c
 8003b6a:	af06      	add	r7, sp, #24
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	0038      	movs	r0, r7
 8003b70:	6001      	str	r1, [r0, #0]
 8003b72:	6042      	str	r2, [r0, #4]
 8003b74:	6083      	str	r3, [r0, #8]
    quat c = {a.x, a.y, a.z, 0};
 8003b76:	003b      	movs	r3, r7
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2130      	movs	r1, #48	@ 0x30
 8003b7c:	187b      	adds	r3, r7, r1
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	003b      	movs	r3, r7
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	003b      	movs	r3, r7
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	187b      	adds	r3, r7, r1
 8003b8e:	609a      	str	r2, [r3, #8]
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	2200      	movs	r2, #0
 8003b94:	60da      	str	r2, [r3, #12]
    quat result = qMultiply(qMultiply(b, c), qConjugate(b));
 8003b96:	2340      	movs	r3, #64	@ 0x40
 8003b98:	18f8      	adds	r0, r7, r3
 8003b9a:	2278      	movs	r2, #120	@ 0x78
 8003b9c:	18bb      	adds	r3, r7, r2
 8003b9e:	1879      	adds	r1, r7, r1
 8003ba0:	2204      	movs	r2, #4
 8003ba2:	446a      	add	r2, sp
 8003ba4:	c970      	ldmia	r1!, {r4, r5, r6}
 8003ba6:	c270      	stmia	r2!, {r4, r5, r6}
 8003ba8:	6809      	ldr	r1, [r1, #0]
 8003baa:	6011      	str	r1, [r2, #0]
 8003bac:	466a      	mov	r2, sp
 8003bae:	68d9      	ldr	r1, [r3, #12]
 8003bb0:	6011      	str	r1, [r2, #0]
 8003bb2:	6819      	ldr	r1, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f7ff fed4 	bl	8003964 <qMultiply>
 8003bbc:	2450      	movs	r4, #80	@ 0x50
 8003bbe:	1938      	adds	r0, r7, r4
 8003bc0:	2278      	movs	r2, #120	@ 0x78
 8003bc2:	18bb      	adds	r3, r7, r2
 8003bc4:	466a      	mov	r2, sp
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	6011      	str	r1, [r2, #0]
 8003bca:	6819      	ldr	r1, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f7ff ff8d 	bl	8003aee <qConjugate>
 8003bd4:	2120      	movs	r1, #32
 8003bd6:	1878      	adds	r0, r7, r1
 8003bd8:	2340      	movs	r3, #64	@ 0x40
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	1939      	adds	r1, r7, r4
 8003bde:	2204      	movs	r2, #4
 8003be0:	446a      	add	r2, sp
 8003be2:	c970      	ldmia	r1!, {r4, r5, r6}
 8003be4:	c270      	stmia	r2!, {r4, r5, r6}
 8003be6:	6809      	ldr	r1, [r1, #0]
 8003be8:	6011      	str	r1, [r2, #0]
 8003bea:	466a      	mov	r2, sp
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	6011      	str	r1, [r2, #0]
 8003bf0:	6819      	ldr	r1, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f7ff feb5 	bl	8003964 <qMultiply>
    vec3 res = {result.x, result.y, result.z};
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	187b      	adds	r3, r7, r1
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2014      	movs	r0, #20
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	183b      	adds	r3, r7, r0
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	183b      	adds	r3, r7, r0
 8003c14:	609a      	str	r2, [r3, #8]
    return res;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	183a      	adds	r2, r7, r0
 8003c1a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003c1c:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	46bd      	mov	sp, r7
 8003c22:	b019      	add	sp, #100	@ 0x64
 8003c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c26 <mApply>:

quat qPolarRotation(vec3 const rotator, quat const rotation) {
	return qMultiply(qPolar(rotator), rotation);
}

vec3 mApply(matrix const a, vec3 b) {
 8003c26:	b084      	sub	sp, #16
 8003c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c2a:	b097      	sub	sp, #92	@ 0x5c
 8003c2c:	af04      	add	r7, sp, #16
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	2004      	movs	r0, #4
 8003c32:	2460      	movs	r4, #96	@ 0x60
 8003c34:	1900      	adds	r0, r0, r4
 8003c36:	19c0      	adds	r0, r0, r7
 8003c38:	6001      	str	r1, [r0, #0]
 8003c3a:	6042      	str	r2, [r0, #4]
 8003c3c:	6083      	str	r3, [r0, #8]
    vec3 result = vAdd(vAdd(vScale(b.x, a.a), vScale(b.y, a.b)), vScale(b.z, a.c));
 8003c3e:	2328      	movs	r3, #40	@ 0x28
 8003c40:	0022      	movs	r2, r4
 8003c42:	189b      	adds	r3, r3, r2
 8003c44:	19db      	adds	r3, r3, r7
 8003c46:	681c      	ldr	r4, [r3, #0]
 8003c48:	2618      	movs	r6, #24
 8003c4a:	19b8      	adds	r0, r7, r6
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	0015      	movs	r5, r2
 8003c50:	189b      	adds	r3, r3, r2
 8003c52:	19db      	adds	r3, r3, r7
 8003c54:	466a      	mov	r2, sp
 8003c56:	6899      	ldr	r1, [r3, #8]
 8003c58:	6011      	str	r1, [r2, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	1c21      	adds	r1, r4, #0
 8003c60:	f7ff fc18 	bl	8003494 <vScale>
 8003c64:	2328      	movs	r3, #40	@ 0x28
 8003c66:	002a      	movs	r2, r5
 8003c68:	189b      	adds	r3, r3, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	685c      	ldr	r4, [r3, #4]
 8003c6e:	2524      	movs	r5, #36	@ 0x24
 8003c70:	1978      	adds	r0, r7, r5
 8003c72:	2304      	movs	r3, #4
 8003c74:	189b      	adds	r3, r3, r2
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	466a      	mov	r2, sp
 8003c7a:	6959      	ldr	r1, [r3, #20]
 8003c7c:	6011      	str	r1, [r2, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	1c21      	adds	r1, r4, #0
 8003c84:	f7ff fc06 	bl	8003494 <vScale>
 8003c88:	2330      	movs	r3, #48	@ 0x30
 8003c8a:	18f8      	adds	r0, r7, r3
 8003c8c:	19bb      	adds	r3, r7, r6
 8003c8e:	1979      	adds	r1, r7, r5
 8003c90:	466a      	mov	r2, sp
 8003c92:	c970      	ldmia	r1!, {r4, r5, r6}
 8003c94:	c270      	stmia	r2!, {r4, r5, r6}
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f7ff fb8e 	bl	80033bc <vAdd>
 8003ca0:	2328      	movs	r3, #40	@ 0x28
 8003ca2:	2260      	movs	r2, #96	@ 0x60
 8003ca4:	1899      	adds	r1, r3, r2
 8003ca6:	19cb      	adds	r3, r1, r7
 8003ca8:	689c      	ldr	r4, [r3, #8]
 8003caa:	253c      	movs	r5, #60	@ 0x3c
 8003cac:	1978      	adds	r0, r7, r5
 8003cae:	2304      	movs	r3, #4
 8003cb0:	189a      	adds	r2, r3, r2
 8003cb2:	19d3      	adds	r3, r2, r7
 8003cb4:	466a      	mov	r2, sp
 8003cb6:	6a19      	ldr	r1, [r3, #32]
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	699a      	ldr	r2, [r3, #24]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	1c21      	adds	r1, r4, #0
 8003cc0:	f7ff fbe8 	bl	8003494 <vScale>
 8003cc4:	220c      	movs	r2, #12
 8003cc6:	18b8      	adds	r0, r7, r2
 8003cc8:	2330      	movs	r3, #48	@ 0x30
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	1979      	adds	r1, r7, r5
 8003cce:	466a      	mov	r2, sp
 8003cd0:	c970      	ldmia	r1!, {r4, r5, r6}
 8003cd2:	c270      	stmia	r2!, {r4, r5, r6}
 8003cd4:	6819      	ldr	r1, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f7ff fb6f 	bl	80033bc <vAdd>
    return result;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	220c      	movs	r2, #12
 8003ce2:	18ba      	adds	r2, r7, r2
 8003ce4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ce6:	c313      	stmia	r3!, {r0, r1, r4}
}
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b013      	add	sp, #76	@ 0x4c
 8003cee:	bcf0      	pop	{r4, r5, r6, r7}
 8003cf0:	bc08      	pop	{r3}
 8003cf2:	b004      	add	sp, #16
 8003cf4:	4718      	bx	r3
	...

08003cf8 <normalDestribution>:
#include "SimulatedSensorManager.h"

float sensorTime;
sensorValues sensorData;

float normalDestribution(float average, float standardDeviation, int iterations) {
 8003cf8:	b5b0      	push	{r4, r5, r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	607a      	str	r2, [r7, #4]
    float result = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < iterations; i++) {
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]
 8003d0c:	e015      	b.n	8003d3a <normalDestribution+0x42>
        result += (float) rand() / RAND_MAX;
 8003d0e:	f005 fab9 	bl	8009284 <rand>
 8003d12:	0003      	movs	r3, r0
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7fd fa85 	bl	8001224 <__aeabi_i2f>
 8003d1a:	1c03      	adds	r3, r0, #0
 8003d1c:	219e      	movs	r1, #158	@ 0x9e
 8003d1e:	05c9      	lsls	r1, r1, #23
 8003d20:	1c18      	adds	r0, r3, #0
 8003d22:	f7fc fda1 	bl	8000868 <__aeabi_fdiv>
 8003d26:	1c03      	adds	r3, r0, #0
 8003d28:	1c19      	adds	r1, r3, #0
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7fc fc12 	bl	8000554 <__aeabi_fadd>
 8003d30:	1c03      	adds	r3, r0, #0
 8003d32:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < iterations; i++) {
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3301      	adds	r3, #1
 8003d38:	613b      	str	r3, [r7, #16]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	dbe5      	blt.n	8003d0e <normalDestribution+0x16>
    }
    result -= 0.5 * iterations;
 8003d42:	6978      	ldr	r0, [r7, #20]
 8003d44:	f7ff f952 	bl	8002fec <__aeabi_f2d>
 8003d48:	0004      	movs	r4, r0
 8003d4a:	000d      	movs	r5, r1
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f7ff f91f 	bl	8002f90 <__aeabi_i2d>
 8003d52:	2200      	movs	r2, #0
 8003d54:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <normalDestribution+0xf0>)
 8003d56:	f7fe fa59 	bl	800220c <__aeabi_dmul>
 8003d5a:	0002      	movs	r2, r0
 8003d5c:	000b      	movs	r3, r1
 8003d5e:	0020      	movs	r0, r4
 8003d60:	0029      	movs	r1, r5
 8003d62:	f7fe fd1b 	bl	800279c <__aeabi_dsub>
 8003d66:	0002      	movs	r2, r0
 8003d68:	000b      	movs	r3, r1
 8003d6a:	0010      	movs	r0, r2
 8003d6c:	0019      	movs	r1, r3
 8003d6e:	f7ff f985 	bl	800307c <__aeabi_d2f>
 8003d72:	1c03      	adds	r3, r0, #0
 8003d74:	617b      	str	r3, [r7, #20]
    result *= standardDeviation / (sqrt(iterations) * STANDARD_DEVIATION_CONSTANT);
 8003d76:	68b8      	ldr	r0, [r7, #8]
 8003d78:	f7ff f938 	bl	8002fec <__aeabi_f2d>
 8003d7c:	0004      	movs	r4, r0
 8003d7e:	000d      	movs	r5, r1
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff f905 	bl	8002f90 <__aeabi_i2d>
 8003d86:	0002      	movs	r2, r0
 8003d88:	000b      	movs	r3, r1
 8003d8a:	0010      	movs	r0, r2
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	f002 ff19 	bl	8006bc4 <sqrt>
 8003d92:	4a16      	ldr	r2, [pc, #88]	@ (8003dec <normalDestribution+0xf4>)
 8003d94:	4b16      	ldr	r3, [pc, #88]	@ (8003df0 <normalDestribution+0xf8>)
 8003d96:	f7fe fa39 	bl	800220c <__aeabi_dmul>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	000b      	movs	r3, r1
 8003d9e:	0020      	movs	r0, r4
 8003da0:	0029      	movs	r1, r5
 8003da2:	f7fd fdef 	bl	8001984 <__aeabi_ddiv>
 8003da6:	0002      	movs	r2, r0
 8003da8:	000b      	movs	r3, r1
 8003daa:	0014      	movs	r4, r2
 8003dac:	001d      	movs	r5, r3
 8003dae:	6978      	ldr	r0, [r7, #20]
 8003db0:	f7ff f91c 	bl	8002fec <__aeabi_f2d>
 8003db4:	0002      	movs	r2, r0
 8003db6:	000b      	movs	r3, r1
 8003db8:	0020      	movs	r0, r4
 8003dba:	0029      	movs	r1, r5
 8003dbc:	f7fe fa26 	bl	800220c <__aeabi_dmul>
 8003dc0:	0002      	movs	r2, r0
 8003dc2:	000b      	movs	r3, r1
 8003dc4:	0010      	movs	r0, r2
 8003dc6:	0019      	movs	r1, r3
 8003dc8:	f7ff f958 	bl	800307c <__aeabi_d2f>
 8003dcc:	1c03      	adds	r3, r0, #0
 8003dce:	617b      	str	r3, [r7, #20]
    result += average;
 8003dd0:	68f9      	ldr	r1, [r7, #12]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7fc fbbe 	bl	8000554 <__aeabi_fadd>
 8003dd8:	1c03      	adds	r3, r0, #0
 8003dda:	617b      	str	r3, [r7, #20]
    return result;
 8003ddc:	697b      	ldr	r3, [r7, #20]
}
 8003dde:	1c18      	adds	r0, r3, #0
 8003de0:	46bd      	mov	sp, r7
 8003de2:	b006      	add	sp, #24
 8003de4:	bdb0      	pop	{r4, r5, r7, pc}
 8003de6:	46c0      	nop			@ (mov r8, r8)
 8003de8:	3fe00000 	.word	0x3fe00000
 8003dec:	b50b0f28 	.word	0xb50b0f28
 8003df0:	3fd279a6 	.word	0x3fd279a6

08003df4 <randomVector>:

vec3 randomVector(float averageMagnitude, float standardDeviation) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
    float mainAngle = acos(2 * (float) rand() / RAND_MAX - 1);
 8003e00:	f005 fa40 	bl	8009284 <rand>
 8003e04:	0003      	movs	r3, r0
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7fd fa0c 	bl	8001224 <__aeabi_i2f>
 8003e0c:	1c03      	adds	r3, r0, #0
 8003e0e:	1c19      	adds	r1, r3, #0
 8003e10:	1c18      	adds	r0, r3, #0
 8003e12:	f7fc fb9f 	bl	8000554 <__aeabi_fadd>
 8003e16:	1c03      	adds	r3, r0, #0
 8003e18:	219e      	movs	r1, #158	@ 0x9e
 8003e1a:	05c9      	lsls	r1, r1, #23
 8003e1c:	1c18      	adds	r0, r3, #0
 8003e1e:	f7fc fd23 	bl	8000868 <__aeabi_fdiv>
 8003e22:	1c03      	adds	r3, r0, #0
 8003e24:	21fe      	movs	r1, #254	@ 0xfe
 8003e26:	0589      	lsls	r1, r1, #22
 8003e28:	1c18      	adds	r0, r3, #0
 8003e2a:	f7fd f841 	bl	8000eb0 <__aeabi_fsub>
 8003e2e:	1c03      	adds	r3, r0, #0
 8003e30:	1c18      	adds	r0, r3, #0
 8003e32:	f7ff f8db 	bl	8002fec <__aeabi_f2d>
 8003e36:	0002      	movs	r2, r0
 8003e38:	000b      	movs	r3, r1
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	0019      	movs	r1, r3
 8003e3e:	f002 fdf3 	bl	8006a28 <acos>
 8003e42:	0002      	movs	r2, r0
 8003e44:	000b      	movs	r3, r1
 8003e46:	0010      	movs	r0, r2
 8003e48:	0019      	movs	r1, r3
 8003e4a:	f7ff f917 	bl	800307c <__aeabi_d2f>
 8003e4e:	1c03      	adds	r3, r0, #0
 8003e50:	61fb      	str	r3, [r7, #28]
    float secondAngle = 2 * PI * rand() / RAND_MAX;
 8003e52:	f005 fa17 	bl	8009284 <rand>
 8003e56:	0003      	movs	r3, r0
 8003e58:	0018      	movs	r0, r3
 8003e5a:	f7ff f899 	bl	8002f90 <__aeabi_i2d>
 8003e5e:	4a13      	ldr	r2, [pc, #76]	@ (8003eac <randomVector+0xb8>)
 8003e60:	4b13      	ldr	r3, [pc, #76]	@ (8003eb0 <randomVector+0xbc>)
 8003e62:	f7fe f9d3 	bl	800220c <__aeabi_dmul>
 8003e66:	0002      	movs	r2, r0
 8003e68:	000b      	movs	r3, r1
 8003e6a:	0010      	movs	r0, r2
 8003e6c:	0019      	movs	r1, r3
 8003e6e:	4a11      	ldr	r2, [pc, #68]	@ (8003eb4 <randomVector+0xc0>)
 8003e70:	4b11      	ldr	r3, [pc, #68]	@ (8003eb8 <randomVector+0xc4>)
 8003e72:	f7fd fd87 	bl	8001984 <__aeabi_ddiv>
 8003e76:	0002      	movs	r2, r0
 8003e78:	000b      	movs	r3, r1
 8003e7a:	0010      	movs	r0, r2
 8003e7c:	0019      	movs	r1, r3
 8003e7e:	f7ff f8fd 	bl	800307c <__aeabi_d2f>
 8003e82:	1c03      	adds	r3, r0, #0
 8003e84:	61bb      	str	r3, [r7, #24]
    float magnitude = normalDestribution(averageMagnitude, standardDeviation, 10);
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	220a      	movs	r2, #10
 8003e8c:	1c18      	adds	r0, r3, #0
 8003e8e:	f7ff ff33 	bl	8003cf8 <normalDestribution>
 8003e92:	1c03      	adds	r3, r0, #0
 8003e94:	617b      	str	r3, [r7, #20]
    return vPolar(mainAngle, secondAngle, magnitude);
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	69f9      	ldr	r1, [r7, #28]
 8003e9e:	f7ff fa00 	bl	80032a2 <vPolar>
}
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b008      	add	sp, #32
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	46c0      	nop			@ (mov r8, r8)
 8003eac:	54442eea 	.word	0x54442eea
 8003eb0:	401921fb 	.word	0x401921fb
 8003eb4:	ffc00000 	.word	0xffc00000
 8003eb8:	41dfffff 	.word	0x41dfffff

08003ebc <InitializeSensorManager>:

void InitializeSensorManager() {
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b097      	sub	sp, #92	@ 0x5c
 8003ec0:	af00      	add	r7, sp, #0
    // initialize the decalibration values for accelerometer
	sensorTime = 0;
 8003ec2:	4bb6      	ldr	r3, [pc, #728]	@ (800419c <InitializeSensorManager+0x2e0>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
    sensorData.accelerometerBias = randomVector(0, ACCELEROMETER_BIAS);
 8003ec8:	4cb5      	ldr	r4, [pc, #724]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 8003eca:	003b      	movs	r3, r7
 8003ecc:	4ab5      	ldr	r2, [pc, #724]	@ (80041a4 <InitializeSensorManager+0x2e8>)
 8003ece:	2100      	movs	r1, #0
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f7ff ff8f 	bl	8003df4 <randomVector>
 8003ed6:	003a      	movs	r2, r7
 8003ed8:	0023      	movs	r3, r4
 8003eda:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003edc:	c313      	stmia	r3!, {r0, r1, r4}
    matrix accelerometerCrossAxis = 
    {{1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10)},
 8003ede:	49b2      	ldr	r1, [pc, #712]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	220a      	movs	r2, #10
 8003ee4:	1c18      	adds	r0, r3, #0
 8003ee6:	f7ff ff07 	bl	8003cf8 <normalDestribution>
 8003eea:	1c03      	adds	r3, r0, #0
 8003eec:	1c18      	adds	r0, r3, #0
 8003eee:	f7ff f87d 	bl	8002fec <__aeabi_f2d>
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2380      	movs	r3, #128	@ 0x80
 8003ef6:	05db      	lsls	r3, r3, #23
 8003ef8:	f002 fdf6 	bl	8006ae8 <pow>
 8003efc:	0002      	movs	r2, r0
 8003efe:	000b      	movs	r3, r1
 8003f00:	2000      	movs	r0, #0
 8003f02:	49aa      	ldr	r1, [pc, #680]	@ (80041ac <InitializeSensorManager+0x2f0>)
 8003f04:	f7fe fc4a 	bl	800279c <__aeabi_dsub>
 8003f08:	0002      	movs	r2, r0
 8003f0a:	000b      	movs	r3, r1
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	f7ff f8b4 	bl	800307c <__aeabi_d2f>
 8003f14:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003f16:	2434      	movs	r4, #52	@ 0x34
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	601a      	str	r2, [r3, #0]
    {{1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10)},
 8003f1c:	49a2      	ldr	r1, [pc, #648]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003f1e:	2300      	movs	r3, #0
 8003f20:	220a      	movs	r2, #10
 8003f22:	1c18      	adds	r0, r3, #0
 8003f24:	f7ff fee8 	bl	8003cf8 <normalDestribution>
 8003f28:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003f2a:	193b      	adds	r3, r7, r4
 8003f2c:	605a      	str	r2, [r3, #4]
    {{1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10)},
 8003f2e:	499e      	ldr	r1, [pc, #632]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003f30:	2300      	movs	r3, #0
 8003f32:	220a      	movs	r2, #10
 8003f34:	1c18      	adds	r0, r3, #0
 8003f36:	f7ff fedf 	bl	8003cf8 <normalDestribution>
 8003f3a:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003f3c:	193b      	adds	r3, r7, r4
 8003f3e:	609a      	str	r2, [r3, #8]
    {normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10)},
 8003f40:	4999      	ldr	r1, [pc, #612]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003f42:	2300      	movs	r3, #0
 8003f44:	220a      	movs	r2, #10
 8003f46:	1c18      	adds	r0, r3, #0
 8003f48:	f7ff fed6 	bl	8003cf8 <normalDestribution>
 8003f4c:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003f4e:	193b      	adds	r3, r7, r4
 8003f50:	60da      	str	r2, [r3, #12]
    {normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10)},
 8003f52:	4995      	ldr	r1, [pc, #596]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003f54:	2300      	movs	r3, #0
 8003f56:	220a      	movs	r2, #10
 8003f58:	1c18      	adds	r0, r3, #0
 8003f5a:	f7ff fecd 	bl	8003cf8 <normalDestribution>
 8003f5e:	1c03      	adds	r3, r0, #0
 8003f60:	1c18      	adds	r0, r3, #0
 8003f62:	f7ff f843 	bl	8002fec <__aeabi_f2d>
 8003f66:	2200      	movs	r2, #0
 8003f68:	2380      	movs	r3, #128	@ 0x80
 8003f6a:	05db      	lsls	r3, r3, #23
 8003f6c:	f002 fdbc 	bl	8006ae8 <pow>
 8003f70:	0002      	movs	r2, r0
 8003f72:	000b      	movs	r3, r1
 8003f74:	2000      	movs	r0, #0
 8003f76:	498d      	ldr	r1, [pc, #564]	@ (80041ac <InitializeSensorManager+0x2f0>)
 8003f78:	f7fe fc10 	bl	800279c <__aeabi_dsub>
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	000b      	movs	r3, r1
 8003f80:	0010      	movs	r0, r2
 8003f82:	0019      	movs	r1, r3
 8003f84:	f7ff f87a 	bl	800307c <__aeabi_d2f>
 8003f88:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	611a      	str	r2, [r3, #16]
    {normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10)},
 8003f8e:	4986      	ldr	r1, [pc, #536]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003f90:	2300      	movs	r3, #0
 8003f92:	220a      	movs	r2, #10
 8003f94:	1c18      	adds	r0, r3, #0
 8003f96:	f7ff feaf 	bl	8003cf8 <normalDestribution>
 8003f9a:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003f9c:	193b      	adds	r3, r7, r4
 8003f9e:	615a      	str	r2, [r3, #20]
    {normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2)}};
 8003fa0:	4981      	ldr	r1, [pc, #516]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	1c18      	adds	r0, r3, #0
 8003fa8:	f7ff fea6 	bl	8003cf8 <normalDestribution>
 8003fac:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003fae:	193b      	adds	r3, r7, r4
 8003fb0:	619a      	str	r2, [r3, #24]
    {normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2)}};
 8003fb2:	497d      	ldr	r1, [pc, #500]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	220a      	movs	r2, #10
 8003fb8:	1c18      	adds	r0, r3, #0
 8003fba:	f7ff fe9d 	bl	8003cf8 <normalDestribution>
 8003fbe:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003fc0:	193b      	adds	r3, r7, r4
 8003fc2:	61da      	str	r2, [r3, #28]
    {normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, ACCELEROMETER_CROSS_AXIS, 10), 2)}};
 8003fc4:	4978      	ldr	r1, [pc, #480]	@ (80041a8 <InitializeSensorManager+0x2ec>)
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	220a      	movs	r2, #10
 8003fca:	1c18      	adds	r0, r3, #0
 8003fcc:	f7ff fe94 	bl	8003cf8 <normalDestribution>
 8003fd0:	1c03      	adds	r3, r0, #0
 8003fd2:	1c18      	adds	r0, r3, #0
 8003fd4:	f7ff f80a 	bl	8002fec <__aeabi_f2d>
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2380      	movs	r3, #128	@ 0x80
 8003fdc:	05db      	lsls	r3, r3, #23
 8003fde:	f002 fd83 	bl	8006ae8 <pow>
 8003fe2:	0002      	movs	r2, r0
 8003fe4:	000b      	movs	r3, r1
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	4970      	ldr	r1, [pc, #448]	@ (80041ac <InitializeSensorManager+0x2f0>)
 8003fea:	f7fe fbd7 	bl	800279c <__aeabi_dsub>
 8003fee:	0002      	movs	r2, r0
 8003ff0:	000b      	movs	r3, r1
 8003ff2:	0010      	movs	r0, r2
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	f7ff f841 	bl	800307c <__aeabi_d2f>
 8003ffa:	1c02      	adds	r2, r0, #0
    matrix accelerometerCrossAxis = 
 8003ffc:	193b      	adds	r3, r7, r4
 8003ffe:	621a      	str	r2, [r3, #32]
    sensorData.accelerometerCrossAxis = accelerometerCrossAxis;
 8004000:	4b67      	ldr	r3, [pc, #412]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 8004002:	193a      	adds	r2, r7, r4
 8004004:	330c      	adds	r3, #12
 8004006:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004008:	c313      	stmia	r3!, {r0, r1, r4}
 800400a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800400c:	c313      	stmia	r3!, {r0, r1, r4}
 800400e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004010:	c313      	stmia	r3!, {r0, r1, r4}
    // initialize the decalibration values for gyroscope
    sensorData.gyroscopeBias = randomVector(0, GYROSCOPE_BIAS);
 8004012:	4c63      	ldr	r4, [pc, #396]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 8004014:	003b      	movs	r3, r7
 8004016:	4a66      	ldr	r2, [pc, #408]	@ (80041b0 <InitializeSensorManager+0x2f4>)
 8004018:	2100      	movs	r1, #0
 800401a:	0018      	movs	r0, r3
 800401c:	f7ff feea 	bl	8003df4 <randomVector>
 8004020:	003a      	movs	r2, r7
 8004022:	0023      	movs	r3, r4
 8004024:	3330      	adds	r3, #48	@ 0x30
 8004026:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004028:	c313      	stmia	r3!, {r0, r1, r4}
    matrix gyroscopeCrossAxis = 
    {{1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10)},
 800402a:	4962      	ldr	r1, [pc, #392]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 800402c:	2300      	movs	r3, #0
 800402e:	220a      	movs	r2, #10
 8004030:	1c18      	adds	r0, r3, #0
 8004032:	f7ff fe61 	bl	8003cf8 <normalDestribution>
 8004036:	1c03      	adds	r3, r0, #0
 8004038:	1c18      	adds	r0, r3, #0
 800403a:	f7fe ffd7 	bl	8002fec <__aeabi_f2d>
 800403e:	2200      	movs	r2, #0
 8004040:	2380      	movs	r3, #128	@ 0x80
 8004042:	05db      	lsls	r3, r3, #23
 8004044:	f002 fd50 	bl	8006ae8 <pow>
 8004048:	0002      	movs	r2, r0
 800404a:	000b      	movs	r3, r1
 800404c:	2000      	movs	r0, #0
 800404e:	4957      	ldr	r1, [pc, #348]	@ (80041ac <InitializeSensorManager+0x2f0>)
 8004050:	f7fe fba4 	bl	800279c <__aeabi_dsub>
 8004054:	0002      	movs	r2, r0
 8004056:	000b      	movs	r3, r1
 8004058:	0010      	movs	r0, r2
 800405a:	0019      	movs	r1, r3
 800405c:	f7ff f80e 	bl	800307c <__aeabi_d2f>
 8004060:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 8004062:	2410      	movs	r4, #16
 8004064:	193b      	adds	r3, r7, r4
 8004066:	601a      	str	r2, [r3, #0]
    {{1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10)},
 8004068:	4952      	ldr	r1, [pc, #328]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 800406a:	2300      	movs	r3, #0
 800406c:	220a      	movs	r2, #10
 800406e:	1c18      	adds	r0, r3, #0
 8004070:	f7ff fe42 	bl	8003cf8 <normalDestribution>
 8004074:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 8004076:	193b      	adds	r3, r7, r4
 8004078:	605a      	str	r2, [r3, #4]
    {{1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10)},
 800407a:	494e      	ldr	r1, [pc, #312]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 800407c:	2300      	movs	r3, #0
 800407e:	220a      	movs	r2, #10
 8004080:	1c18      	adds	r0, r3, #0
 8004082:	f7ff fe39 	bl	8003cf8 <normalDestribution>
 8004086:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 8004088:	193b      	adds	r3, r7, r4
 800408a:	609a      	str	r2, [r3, #8]
    {normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10)},
 800408c:	4949      	ldr	r1, [pc, #292]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 800408e:	2300      	movs	r3, #0
 8004090:	220a      	movs	r2, #10
 8004092:	1c18      	adds	r0, r3, #0
 8004094:	f7ff fe30 	bl	8003cf8 <normalDestribution>
 8004098:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 800409a:	193b      	adds	r3, r7, r4
 800409c:	60da      	str	r2, [r3, #12]
    {normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10)},
 800409e:	4945      	ldr	r1, [pc, #276]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 80040a0:	2300      	movs	r3, #0
 80040a2:	220a      	movs	r2, #10
 80040a4:	1c18      	adds	r0, r3, #0
 80040a6:	f7ff fe27 	bl	8003cf8 <normalDestribution>
 80040aa:	1c03      	adds	r3, r0, #0
 80040ac:	1c18      	adds	r0, r3, #0
 80040ae:	f7fe ff9d 	bl	8002fec <__aeabi_f2d>
 80040b2:	2200      	movs	r2, #0
 80040b4:	2380      	movs	r3, #128	@ 0x80
 80040b6:	05db      	lsls	r3, r3, #23
 80040b8:	f002 fd16 	bl	8006ae8 <pow>
 80040bc:	0002      	movs	r2, r0
 80040be:	000b      	movs	r3, r1
 80040c0:	2000      	movs	r0, #0
 80040c2:	493a      	ldr	r1, [pc, #232]	@ (80041ac <InitializeSensorManager+0x2f0>)
 80040c4:	f7fe fb6a 	bl	800279c <__aeabi_dsub>
 80040c8:	0002      	movs	r2, r0
 80040ca:	000b      	movs	r3, r1
 80040cc:	0010      	movs	r0, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	f7fe ffd4 	bl	800307c <__aeabi_d2f>
 80040d4:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 80040d6:	193b      	adds	r3, r7, r4
 80040d8:	611a      	str	r2, [r3, #16]
    {normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10)},
 80040da:	4936      	ldr	r1, [pc, #216]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 80040dc:	2300      	movs	r3, #0
 80040de:	220a      	movs	r2, #10
 80040e0:	1c18      	adds	r0, r3, #0
 80040e2:	f7ff fe09 	bl	8003cf8 <normalDestribution>
 80040e6:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 80040e8:	193b      	adds	r3, r7, r4
 80040ea:	615a      	str	r2, [r3, #20]
    {normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2)}};
 80040ec:	4931      	ldr	r1, [pc, #196]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 80040ee:	2300      	movs	r3, #0
 80040f0:	220a      	movs	r2, #10
 80040f2:	1c18      	adds	r0, r3, #0
 80040f4:	f7ff fe00 	bl	8003cf8 <normalDestribution>
 80040f8:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 80040fa:	193b      	adds	r3, r7, r4
 80040fc:	619a      	str	r2, [r3, #24]
    {normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2)}};
 80040fe:	492d      	ldr	r1, [pc, #180]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 8004100:	2300      	movs	r3, #0
 8004102:	220a      	movs	r2, #10
 8004104:	1c18      	adds	r0, r3, #0
 8004106:	f7ff fdf7 	bl	8003cf8 <normalDestribution>
 800410a:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 800410c:	193b      	adds	r3, r7, r4
 800410e:	61da      	str	r2, [r3, #28]
    {normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 1 - pow(normalDestribution(0, GYROSCOPE_CROSS_AXIS, 10), 2)}};
 8004110:	4928      	ldr	r1, [pc, #160]	@ (80041b4 <InitializeSensorManager+0x2f8>)
 8004112:	2300      	movs	r3, #0
 8004114:	220a      	movs	r2, #10
 8004116:	1c18      	adds	r0, r3, #0
 8004118:	f7ff fdee 	bl	8003cf8 <normalDestribution>
 800411c:	1c03      	adds	r3, r0, #0
 800411e:	1c18      	adds	r0, r3, #0
 8004120:	f7fe ff64 	bl	8002fec <__aeabi_f2d>
 8004124:	2200      	movs	r2, #0
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	05db      	lsls	r3, r3, #23
 800412a:	f002 fcdd 	bl	8006ae8 <pow>
 800412e:	0002      	movs	r2, r0
 8004130:	000b      	movs	r3, r1
 8004132:	2000      	movs	r0, #0
 8004134:	491d      	ldr	r1, [pc, #116]	@ (80041ac <InitializeSensorManager+0x2f0>)
 8004136:	f7fe fb31 	bl	800279c <__aeabi_dsub>
 800413a:	0002      	movs	r2, r0
 800413c:	000b      	movs	r3, r1
 800413e:	0010      	movs	r0, r2
 8004140:	0019      	movs	r1, r3
 8004142:	f7fe ff9b 	bl	800307c <__aeabi_d2f>
 8004146:	1c02      	adds	r2, r0, #0
    matrix gyroscopeCrossAxis = 
 8004148:	193b      	adds	r3, r7, r4
 800414a:	621a      	str	r2, [r3, #32]
    sensorData.gyroscopeCrossAxis = gyroscopeCrossAxis;
 800414c:	4b14      	ldr	r3, [pc, #80]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 800414e:	193a      	adds	r2, r7, r4
 8004150:	333c      	adds	r3, #60	@ 0x3c
 8004152:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004154:	c313      	stmia	r3!, {r0, r1, r4}
 8004156:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004158:	c313      	stmia	r3!, {r0, r1, r4}
 800415a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800415c:	c313      	stmia	r3!, {r0, r1, r4}
    // initialize the decalibration values for barometer
    sensorData.barometerBias = normalDestribution(0, BAROMETER_BIAS, 10);
 800415e:	4916      	ldr	r1, [pc, #88]	@ (80041b8 <InitializeSensorManager+0x2fc>)
 8004160:	2300      	movs	r3, #0
 8004162:	220a      	movs	r2, #10
 8004164:	1c18      	adds	r0, r3, #0
 8004166:	f7ff fdc7 	bl	8003cf8 <normalDestribution>
 800416a:	1c02      	adds	r2, r0, #0
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 800416e:	661a      	str	r2, [r3, #96]	@ 0x60
    sensorData.groundPressure = normalDestribution(NORMAL_GROUND_PRESSURE, GROUND_PRESSURE_RMS, 10);
 8004170:	4912      	ldr	r1, [pc, #72]	@ (80041bc <InitializeSensorManager+0x300>)
 8004172:	4b13      	ldr	r3, [pc, #76]	@ (80041c0 <InitializeSensorManager+0x304>)
 8004174:	220a      	movs	r2, #10
 8004176:	1c18      	adds	r0, r3, #0
 8004178:	f7ff fdbe 	bl	8003cf8 <normalDestribution>
 800417c:	1c02      	adds	r2, r0, #0
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 8004180:	665a      	str	r2, [r3, #100]	@ 0x64
    sensorData.groundTemperature = normalDestribution(GROUND_TEMPERATRURE, GROUND_TEMEPERATURE_RMS, 10);
 8004182:	4910      	ldr	r1, [pc, #64]	@ (80041c4 <InitializeSensorManager+0x308>)
 8004184:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <InitializeSensorManager+0x30c>)
 8004186:	220a      	movs	r2, #10
 8004188:	1c18      	adds	r0, r3, #0
 800418a:	f7ff fdb5 	bl	8003cf8 <normalDestribution>
 800418e:	1c02      	adds	r2, r0, #0
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <InitializeSensorManager+0x2e4>)
 8004192:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b017      	add	sp, #92	@ 0x5c
 800419a:	bd90      	pop	{r4, r7, pc}
 800419c:	200000e4 	.word	0x200000e4
 80041a0:	200000e8 	.word	0x200000e8
 80041a4:	3e48b439 	.word	0x3e48b439
 80041a8:	3c23d70a 	.word	0x3c23d70a
 80041ac:	3ff00000 	.word	0x3ff00000
 80041b0:	3c0f0846 	.word	0x3c0f0846
 80041b4:	3b03126f 	.word	0x3b03126f
 80041b8:	4205554d 	.word	0x4205554d
 80041bc:	43160000 	.word	0x43160000
 80041c0:	47c5e680 	.word	0x47c5e680
 80041c4:	40400000 	.word	0x40400000
 80041c8:	41c80000 	.word	0x41c80000

080041cc <UpdateSensorData>:

void UpdateSensorData(float dt) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    sensorTime += dt;
 80041d4:	4b09      	ldr	r3, [pc, #36]	@ (80041fc <UpdateSensorData+0x30>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	1c18      	adds	r0, r3, #0
 80041dc:	f7fc f9ba 	bl	8000554 <__aeabi_fadd>
 80041e0:	1c03      	adds	r3, r0, #0
 80041e2:	1c1a      	adds	r2, r3, #0
 80041e4:	4b05      	ldr	r3, [pc, #20]	@ (80041fc <UpdateSensorData+0x30>)
 80041e6:	601a      	str	r2, [r3, #0]
    UpdateTrajectory(sensorTime);
 80041e8:	4b04      	ldr	r3, [pc, #16]	@ (80041fc <UpdateSensorData+0x30>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	1c18      	adds	r0, r3, #0
 80041ee:	f000 f921 	bl	8004434 <UpdateTrajectory>
}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			@ (mov r8, r8)
 80041fc:	200000e4 	.word	0x200000e4

08004200 <ReadAcceleration>:

vec3 ReadAcceleration() {
 8004200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004202:	b0c3      	sub	sp, #268	@ 0x10c
 8004204:	af0a      	add	r7, sp, #40	@ 0x28
 8004206:	6178      	str	r0, [r7, #20]
    vec3 gravity = {0, 0, 0 * -9.81};
 8004208:	2424      	movs	r4, #36	@ 0x24
 800420a:	193b      	adds	r3, r7, r4
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	193b      	adds	r3, r7, r4
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	193b      	adds	r3, r7, r4
 8004218:	2280      	movs	r2, #128	@ 0x80
 800421a:	0612      	lsls	r2, r2, #24
 800421c:	609a      	str	r2, [r3, #8]
    vec3 result = qRotateVector(vAdd(GetTrajectory().acceleration, gravity), GetTrajectory().rotation);
 800421e:	2530      	movs	r5, #48	@ 0x30
 8004220:	197b      	adds	r3, r7, r5
 8004222:	0018      	movs	r0, r3
 8004224:	f000 fa64 	bl	80046f0 <GetTrajectory>
 8004228:	237c      	movs	r3, #124	@ 0x7c
 800422a:	18f8      	adds	r0, r7, r3
 800422c:	197b      	adds	r3, r7, r5
 800422e:	1939      	adds	r1, r7, r4
 8004230:	466a      	mov	r2, sp
 8004232:	c970      	ldmia	r1!, {r4, r5, r6}
 8004234:	c270      	stmia	r2!, {r4, r5, r6}
 8004236:	6999      	ldr	r1, [r3, #24]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	f7ff f8be 	bl	80033bc <vAdd>
 8004240:	2488      	movs	r4, #136	@ 0x88
 8004242:	193b      	adds	r3, r7, r4
 8004244:	0018      	movs	r0, r3
 8004246:	f000 fa53 	bl	80046f0 <GetTrajectory>
 800424a:	2218      	movs	r2, #24
 800424c:	18b8      	adds	r0, r7, r2
 800424e:	237c      	movs	r3, #124	@ 0x7c
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	193a      	adds	r2, r7, r4
 8004254:	4669      	mov	r1, sp
 8004256:	3224      	adds	r2, #36	@ 0x24
 8004258:	ca70      	ldmia	r2!, {r4, r5, r6}
 800425a:	c170      	stmia	r1!, {r4, r5, r6}
 800425c:	6812      	ldr	r2, [r2, #0]
 800425e:	600a      	str	r2, [r1, #0]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f7ff fc7e 	bl	8003b66 <qRotateVector>
    result = mApply(sensorData.accelerometerCrossAxis, result);
 800426a:	2218      	movs	r2, #24
 800426c:	18bc      	adds	r4, r7, r2
 800426e:	46bc      	mov	ip, r7
 8004270:	4b26      	ldr	r3, [pc, #152]	@ (800430c <ReadAcceleration+0x10c>)
 8004272:	18b9      	adds	r1, r7, r2
 8004274:	2218      	movs	r2, #24
 8004276:	446a      	add	r2, sp
 8004278:	c961      	ldmia	r1!, {r0, r5, r6}
 800427a:	c261      	stmia	r2!, {r0, r5, r6}
 800427c:	466a      	mov	r2, sp
 800427e:	0011      	movs	r1, r2
 8004280:	001d      	movs	r5, r3
 8004282:	3518      	adds	r5, #24
 8004284:	002a      	movs	r2, r5
 8004286:	ca61      	ldmia	r2!, {r0, r5, r6}
 8004288:	c161      	stmia	r1!, {r0, r5, r6}
 800428a:	ca61      	ldmia	r2!, {r0, r5, r6}
 800428c:	c161      	stmia	r1!, {r0, r5, r6}
 800428e:	68d9      	ldr	r1, [r3, #12]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	4660      	mov	r0, ip
 8004296:	f7ff fcc6 	bl	8003c26 <mApply>
 800429a:	003a      	movs	r2, r7
 800429c:	0023      	movs	r3, r4
 800429e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042a0:	c313      	stmia	r3!, {r0, r1, r4}
    result = vAdd(result, sensorData.accelerometerBias);
 80042a2:	2318      	movs	r3, #24
 80042a4:	18fc      	adds	r4, r7, r3
 80042a6:	46bc      	mov	ip, r7
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	4918      	ldr	r1, [pc, #96]	@ (800430c <ReadAcceleration+0x10c>)
 80042ac:	466a      	mov	r2, sp
 80042ae:	c961      	ldmia	r1!, {r0, r5, r6}
 80042b0:	c261      	stmia	r2!, {r0, r5, r6}
 80042b2:	6819      	ldr	r1, [r3, #0]
 80042b4:	685a      	ldr	r2, [r3, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	4660      	mov	r0, ip
 80042ba:	f7ff f87f 	bl	80033bc <vAdd>
 80042be:	003a      	movs	r2, r7
 80042c0:	0023      	movs	r3, r4
 80042c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042c4:	c313      	stmia	r3!, {r0, r1, r4}
    result = vAdd(result, randomVector(0, ACCELEROMETER_NOISE_RMS));
 80042c6:	25d4      	movs	r5, #212	@ 0xd4
 80042c8:	197b      	adds	r3, r7, r5
 80042ca:	4a11      	ldr	r2, [pc, #68]	@ (8004310 <ReadAcceleration+0x110>)
 80042cc:	2100      	movs	r1, #0
 80042ce:	0018      	movs	r0, r3
 80042d0:	f7ff fd90 	bl	8003df4 <randomVector>
 80042d4:	2318      	movs	r3, #24
 80042d6:	18fc      	adds	r4, r7, r3
 80042d8:	46bc      	mov	ip, r7
 80042da:	18fb      	adds	r3, r7, r3
 80042dc:	1979      	adds	r1, r7, r5
 80042de:	466a      	mov	r2, sp
 80042e0:	c961      	ldmia	r1!, {r0, r5, r6}
 80042e2:	c261      	stmia	r2!, {r0, r5, r6}
 80042e4:	6819      	ldr	r1, [r3, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4660      	mov	r0, ip
 80042ec:	f7ff f866 	bl	80033bc <vAdd>
 80042f0:	003a      	movs	r2, r7
 80042f2:	0023      	movs	r3, r4
 80042f4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80042f6:	c313      	stmia	r3!, {r0, r1, r4}
    return result;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2218      	movs	r2, #24
 80042fc:	18ba      	adds	r2, r7, r2
 80042fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004300:	c313      	stmia	r3!, {r0, r1, r4}
}
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	46bd      	mov	sp, r7
 8004306:	b039      	add	sp, #228	@ 0xe4
 8004308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430a:	46c0      	nop			@ (mov r8, r8)
 800430c:	200000e8 	.word	0x200000e8
 8004310:	3d2ee632 	.word	0x3d2ee632

08004314 <ReadAngularVelocity>:

vec3 ReadAngularVelocity() {
 8004314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004316:	b0ab      	sub	sp, #172	@ 0xac
 8004318:	af0a      	add	r7, sp, #40	@ 0x28
 800431a:	6178      	str	r0, [r7, #20]
    vec3 result = GetTrajectory().angularVelocity;
 800431c:	2428      	movs	r4, #40	@ 0x28
 800431e:	193b      	adds	r3, r7, r4
 8004320:	0018      	movs	r0, r3
 8004322:	f000 f9e5 	bl	80046f0 <GetTrajectory>
 8004326:	251c      	movs	r5, #28
 8004328:	197a      	adds	r2, r7, r5
 800432a:	193b      	adds	r3, r7, r4
 800432c:	3334      	adds	r3, #52	@ 0x34
 800432e:	cb13      	ldmia	r3!, {r0, r1, r4}
 8004330:	c213      	stmia	r2!, {r0, r1, r4}
    result = mApply(sensorData.gyroscopeCrossAxis, result);
 8004332:	1978      	adds	r0, r7, r5
 8004334:	4b23      	ldr	r3, [pc, #140]	@ (80043c4 <ReadAngularVelocity+0xb0>)
 8004336:	1979      	adds	r1, r7, r5
 8004338:	2218      	movs	r2, #24
 800433a:	446a      	add	r2, sp
 800433c:	c970      	ldmia	r1!, {r4, r5, r6}
 800433e:	c270      	stmia	r2!, {r4, r5, r6}
 8004340:	466a      	mov	r2, sp
 8004342:	0011      	movs	r1, r2
 8004344:	001a      	movs	r2, r3
 8004346:	3248      	adds	r2, #72	@ 0x48
 8004348:	ca70      	ldmia	r2!, {r4, r5, r6}
 800434a:	c170      	stmia	r1!, {r4, r5, r6}
 800434c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800434e:	c170      	stmia	r1!, {r4, r5, r6}
 8004350:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8004352:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004356:	f7ff fc66 	bl	8003c26 <mApply>
    result = vAdd(result, sensorData.gyroscopeBias);
 800435a:	231c      	movs	r3, #28
 800435c:	18fc      	adds	r4, r7, r3
 800435e:	46bc      	mov	ip, r7
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	4a18      	ldr	r2, [pc, #96]	@ (80043c4 <ReadAngularVelocity+0xb0>)
 8004364:	4669      	mov	r1, sp
 8004366:	3230      	adds	r2, #48	@ 0x30
 8004368:	ca61      	ldmia	r2!, {r0, r5, r6}
 800436a:	c161      	stmia	r1!, {r0, r5, r6}
 800436c:	6819      	ldr	r1, [r3, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	4660      	mov	r0, ip
 8004374:	f7ff f822 	bl	80033bc <vAdd>
 8004378:	003a      	movs	r2, r7
 800437a:	0023      	movs	r3, r4
 800437c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800437e:	c313      	stmia	r3!, {r0, r1, r4}
    result = vAdd(result, randomVector(0, GYROSCOPE_NOISE_RMS));
 8004380:	2574      	movs	r5, #116	@ 0x74
 8004382:	197b      	adds	r3, r7, r5
 8004384:	4a10      	ldr	r2, [pc, #64]	@ (80043c8 <ReadAngularVelocity+0xb4>)
 8004386:	2100      	movs	r1, #0
 8004388:	0018      	movs	r0, r3
 800438a:	f7ff fd33 	bl	8003df4 <randomVector>
 800438e:	231c      	movs	r3, #28
 8004390:	18fc      	adds	r4, r7, r3
 8004392:	46bc      	mov	ip, r7
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	1979      	adds	r1, r7, r5
 8004398:	466a      	mov	r2, sp
 800439a:	c961      	ldmia	r1!, {r0, r5, r6}
 800439c:	c261      	stmia	r2!, {r0, r5, r6}
 800439e:	6819      	ldr	r1, [r3, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	4660      	mov	r0, ip
 80043a6:	f7ff f809 	bl	80033bc <vAdd>
 80043aa:	003a      	movs	r2, r7
 80043ac:	0023      	movs	r3, r4
 80043ae:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043b0:	c313      	stmia	r3!, {r0, r1, r4}
    return result;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	221c      	movs	r2, #28
 80043b6:	18ba      	adds	r2, r7, r2
 80043b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043ba:	c313      	stmia	r3!, {r0, r1, r4}
}
 80043bc:	6978      	ldr	r0, [r7, #20]
 80043be:	46bd      	mov	sp, r7
 80043c0:	b021      	add	sp, #132	@ 0x84
 80043c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c4:	200000e8 	.word	0x200000e8
 80043c8:	3b3cbe62 	.word	0x3b3cbe62

080043cc <PositionFunction>:
#include "TrajectorySimulator.h"

trajectoryLocation trajectory = {{0,0,0},{0,0,0},{0,0,0},{0,0,0,0},{0,0,0},{0,0,0}};

vec3 PositionFunction(float time) {
 80043cc:	b590      	push	{r4, r7, lr}
 80043ce:	b087      	sub	sp, #28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
    vec3 result = {0, 0, 0};
 80043d6:	210c      	movs	r1, #12
 80043d8:	187b      	adds	r3, r7, r1
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	187b      	adds	r3, r7, r1
 80043e0:	2200      	movs	r2, #0
 80043e2:	605a      	str	r2, [r3, #4]
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	2200      	movs	r2, #0
 80043e8:	609a      	str	r2, [r3, #8]
    return result;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	187a      	adds	r2, r7, r1
 80043ee:	ca13      	ldmia	r2!, {r0, r1, r4}
 80043f0:	c313      	stmia	r3!, {r0, r1, r4}
}
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b007      	add	sp, #28
 80043f8:	bd90      	pop	{r4, r7, pc}

080043fa <RotationFunction>:

quat RotationFunction(float time) {
 80043fa:	b590      	push	{r4, r7, lr}
 80043fc:	b087      	sub	sp, #28
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
    quat result = {1, 0, 0, 0};
 8004404:	2108      	movs	r1, #8
 8004406:	187b      	adds	r3, r7, r1
 8004408:	22fe      	movs	r2, #254	@ 0xfe
 800440a:	0592      	lsls	r2, r2, #22
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	187b      	adds	r3, r7, r1
 8004410:	2200      	movs	r2, #0
 8004412:	605a      	str	r2, [r3, #4]
 8004414:	187b      	adds	r3, r7, r1
 8004416:	2200      	movs	r2, #0
 8004418:	609a      	str	r2, [r3, #8]
 800441a:	187b      	adds	r3, r7, r1
 800441c:	2200      	movs	r2, #0
 800441e:	60da      	str	r2, [r3, #12]
    return result;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	187a      	adds	r2, r7, r1
 8004424:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004426:	c313      	stmia	r3!, {r0, r1, r4}
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	601a      	str	r2, [r3, #0]
}
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	46bd      	mov	sp, r7
 8004430:	b007      	add	sp, #28
 8004432:	bd90      	pop	{r4, r7, pc}

08004434 <UpdateTrajectory>:

void UpdateTrajectory(float time) {
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004436:	b0bd      	sub	sp, #244	@ 0xf4
 8004438:	af06      	add	r7, sp, #24
 800443a:	6178      	str	r0, [r7, #20]
    trajectory.position = PositionFunction(time);
 800443c:	4ca6      	ldr	r4, [pc, #664]	@ (80046d8 <UpdateTrajectory+0x2a4>)
 800443e:	003b      	movs	r3, r7
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	1c11      	adds	r1, r2, #0
 8004444:	0018      	movs	r0, r3
 8004446:	f7ff ffc1 	bl	80043cc <PositionFunction>
 800444a:	003a      	movs	r2, r7
 800444c:	0023      	movs	r3, r4
 800444e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004450:	c313      	stmia	r3!, {r0, r1, r4}
    trajectory.velocity = vDivide(DELTA_TIME, vSubtract(PositionFunction(time + DELTA_TIME), PositionFunction(time)));
 8004452:	6978      	ldr	r0, [r7, #20]
 8004454:	f7fe fdca 	bl	8002fec <__aeabi_f2d>
 8004458:	4aa0      	ldr	r2, [pc, #640]	@ (80046dc <UpdateTrajectory+0x2a8>)
 800445a:	4ba1      	ldr	r3, [pc, #644]	@ (80046e0 <UpdateTrajectory+0x2ac>)
 800445c:	f7fc ff2e 	bl	80012bc <__aeabi_dadd>
 8004460:	0002      	movs	r2, r0
 8004462:	000b      	movs	r3, r1
 8004464:	0010      	movs	r0, r2
 8004466:	0019      	movs	r1, r3
 8004468:	f7fe fe08 	bl	800307c <__aeabi_d2f>
 800446c:	1c02      	adds	r2, r0, #0
 800446e:	242c      	movs	r4, #44	@ 0x2c
 8004470:	193b      	adds	r3, r7, r4
 8004472:	1c11      	adds	r1, r2, #0
 8004474:	0018      	movs	r0, r3
 8004476:	f7ff ffa9 	bl	80043cc <PositionFunction>
 800447a:	2538      	movs	r5, #56	@ 0x38
 800447c:	197b      	adds	r3, r7, r5
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	1c11      	adds	r1, r2, #0
 8004482:	0018      	movs	r0, r3
 8004484:	f7ff ffa2 	bl	80043cc <PositionFunction>
 8004488:	2344      	movs	r3, #68	@ 0x44
 800448a:	18f8      	adds	r0, r7, r3
 800448c:	193b      	adds	r3, r7, r4
 800448e:	1979      	adds	r1, r7, r5
 8004490:	466a      	mov	r2, sp
 8004492:	c970      	ldmia	r1!, {r4, r5, r6}
 8004494:	c270      	stmia	r2!, {r4, r5, r6}
 8004496:	6819      	ldr	r1, [r3, #0]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f7fe ffc4 	bl	8003428 <vSubtract>
 80044a0:	4c8d      	ldr	r4, [pc, #564]	@ (80046d8 <UpdateTrajectory+0x2a4>)
 80044a2:	0038      	movs	r0, r7
 80044a4:	2344      	movs	r3, #68	@ 0x44
 80044a6:	18fb      	adds	r3, r7, r3
 80044a8:	4d8e      	ldr	r5, [pc, #568]	@ (80046e4 <UpdateTrajectory+0x2b0>)
 80044aa:	466a      	mov	r2, sp
 80044ac:	6899      	ldr	r1, [r3, #8]
 80044ae:	6011      	str	r1, [r2, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	1c29      	adds	r1, r5, #0
 80044b6:	f7ff f821 	bl	80034fc <vDivide>
 80044ba:	003a      	movs	r2, r7
 80044bc:	0023      	movs	r3, r4
 80044be:	330c      	adds	r3, #12
 80044c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80044c2:	c313      	stmia	r3!, {r0, r1, r4}
    trajectory.acceleration = vDivide(DELTA_TIME * DELTA_TIME, vAdd(vSubtract(PositionFunction(time + 2 * DELTA_TIME), vScale(2, PositionFunction(time + DELTA_TIME))), PositionFunction(time)));
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f7fe fd91 	bl	8002fec <__aeabi_f2d>
 80044ca:	4a84      	ldr	r2, [pc, #528]	@ (80046dc <UpdateTrajectory+0x2a8>)
 80044cc:	4b86      	ldr	r3, [pc, #536]	@ (80046e8 <UpdateTrajectory+0x2b4>)
 80044ce:	f7fc fef5 	bl	80012bc <__aeabi_dadd>
 80044d2:	0002      	movs	r2, r0
 80044d4:	000b      	movs	r3, r1
 80044d6:	0010      	movs	r0, r2
 80044d8:	0019      	movs	r1, r3
 80044da:	f7fe fdcf 	bl	800307c <__aeabi_d2f>
 80044de:	1c02      	adds	r2, r0, #0
 80044e0:	2550      	movs	r5, #80	@ 0x50
 80044e2:	197b      	adds	r3, r7, r5
 80044e4:	1c11      	adds	r1, r2, #0
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff ff70 	bl	80043cc <PositionFunction>
 80044ec:	6978      	ldr	r0, [r7, #20]
 80044ee:	f7fe fd7d 	bl	8002fec <__aeabi_f2d>
 80044f2:	4a7a      	ldr	r2, [pc, #488]	@ (80046dc <UpdateTrajectory+0x2a8>)
 80044f4:	4b7a      	ldr	r3, [pc, #488]	@ (80046e0 <UpdateTrajectory+0x2ac>)
 80044f6:	f7fc fee1 	bl	80012bc <__aeabi_dadd>
 80044fa:	0002      	movs	r2, r0
 80044fc:	000b      	movs	r3, r1
 80044fe:	0010      	movs	r0, r2
 8004500:	0019      	movs	r1, r3
 8004502:	f7fe fdbb 	bl	800307c <__aeabi_d2f>
 8004506:	1c02      	adds	r2, r0, #0
 8004508:	245c      	movs	r4, #92	@ 0x5c
 800450a:	193b      	adds	r3, r7, r4
 800450c:	1c11      	adds	r1, r2, #0
 800450e:	0018      	movs	r0, r3
 8004510:	f7ff ff5c 	bl	80043cc <PositionFunction>
 8004514:	2668      	movs	r6, #104	@ 0x68
 8004516:	19b8      	adds	r0, r7, r6
 8004518:	193b      	adds	r3, r7, r4
 800451a:	2480      	movs	r4, #128	@ 0x80
 800451c:	05e4      	lsls	r4, r4, #23
 800451e:	466a      	mov	r2, sp
 8004520:	6899      	ldr	r1, [r3, #8]
 8004522:	6011      	str	r1, [r2, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	1c21      	adds	r1, r4, #0
 800452a:	f7fe ffb3 	bl	8003494 <vScale>
 800452e:	2374      	movs	r3, #116	@ 0x74
 8004530:	18f8      	adds	r0, r7, r3
 8004532:	197b      	adds	r3, r7, r5
 8004534:	19b9      	adds	r1, r7, r6
 8004536:	466a      	mov	r2, sp
 8004538:	c970      	ldmia	r1!, {r4, r5, r6}
 800453a:	c270      	stmia	r2!, {r4, r5, r6}
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f7fe ff71 	bl	8003428 <vSubtract>
 8004546:	2480      	movs	r4, #128	@ 0x80
 8004548:	193b      	adds	r3, r7, r4
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	1c11      	adds	r1, r2, #0
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff ff3c 	bl	80043cc <PositionFunction>
 8004554:	228c      	movs	r2, #140	@ 0x8c
 8004556:	18b8      	adds	r0, r7, r2
 8004558:	2374      	movs	r3, #116	@ 0x74
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	1939      	adds	r1, r7, r4
 800455e:	466a      	mov	r2, sp
 8004560:	c970      	ldmia	r1!, {r4, r5, r6}
 8004562:	c270      	stmia	r2!, {r4, r5, r6}
 8004564:	6819      	ldr	r1, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f7fe ff27 	bl	80033bc <vAdd>
 800456e:	4c5a      	ldr	r4, [pc, #360]	@ (80046d8 <UpdateTrajectory+0x2a4>)
 8004570:	0038      	movs	r0, r7
 8004572:	228c      	movs	r2, #140	@ 0x8c
 8004574:	18bb      	adds	r3, r7, r2
 8004576:	4d5d      	ldr	r5, [pc, #372]	@ (80046ec <UpdateTrajectory+0x2b8>)
 8004578:	466a      	mov	r2, sp
 800457a:	6899      	ldr	r1, [r3, #8]
 800457c:	6011      	str	r1, [r2, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	1c29      	adds	r1, r5, #0
 8004584:	f7fe ffba 	bl	80034fc <vDivide>
 8004588:	003a      	movs	r2, r7
 800458a:	0023      	movs	r3, r4
 800458c:	3318      	adds	r3, #24
 800458e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004590:	c313      	stmia	r3!, {r0, r1, r4}

    trajectory.rotation = RotationFunction(time);
 8004592:	4c51      	ldr	r4, [pc, #324]	@ (80046d8 <UpdateTrajectory+0x2a4>)
 8004594:	003b      	movs	r3, r7
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	1c11      	adds	r1, r2, #0
 800459a:	0018      	movs	r0, r3
 800459c:	f7ff ff2d 	bl	80043fa <RotationFunction>
 80045a0:	003a      	movs	r2, r7
 80045a2:	0023      	movs	r3, r4
 80045a4:	3324      	adds	r3, #36	@ 0x24
 80045a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80045a8:	c313      	stmia	r3!, {r0, r1, r4}
 80045aa:	6812      	ldr	r2, [r2, #0]
 80045ac:	601a      	str	r2, [r3, #0]
    quat rotationChange = qMultiply(RotationFunction(time + DELTA_TIME), qConjugate(RotationFunction(time)));
 80045ae:	6978      	ldr	r0, [r7, #20]
 80045b0:	f7fe fd1c 	bl	8002fec <__aeabi_f2d>
 80045b4:	4a49      	ldr	r2, [pc, #292]	@ (80046dc <UpdateTrajectory+0x2a8>)
 80045b6:	4b4a      	ldr	r3, [pc, #296]	@ (80046e0 <UpdateTrajectory+0x2ac>)
 80045b8:	f7fc fe80 	bl	80012bc <__aeabi_dadd>
 80045bc:	0002      	movs	r2, r0
 80045be:	000b      	movs	r3, r1
 80045c0:	0010      	movs	r0, r2
 80045c2:	0019      	movs	r1, r3
 80045c4:	f7fe fd5a 	bl	800307c <__aeabi_d2f>
 80045c8:	1c02      	adds	r2, r0, #0
 80045ca:	2498      	movs	r4, #152	@ 0x98
 80045cc:	193b      	adds	r3, r7, r4
 80045ce:	1c11      	adds	r1, r2, #0
 80045d0:	0018      	movs	r0, r3
 80045d2:	f7ff ff12 	bl	80043fa <RotationFunction>
 80045d6:	25a8      	movs	r5, #168	@ 0xa8
 80045d8:	197b      	adds	r3, r7, r5
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	1c11      	adds	r1, r2, #0
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff ff0b 	bl	80043fa <RotationFunction>
 80045e4:	23b8      	movs	r3, #184	@ 0xb8
 80045e6:	18f8      	adds	r0, r7, r3
 80045e8:	197b      	adds	r3, r7, r5
 80045ea:	466a      	mov	r2, sp
 80045ec:	68d9      	ldr	r1, [r3, #12]
 80045ee:	6011      	str	r1, [r2, #0]
 80045f0:	6819      	ldr	r1, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f7ff fa7a 	bl	8003aee <qConjugate>
 80045fa:	261c      	movs	r6, #28
 80045fc:	19b8      	adds	r0, r7, r6
 80045fe:	193b      	adds	r3, r7, r4
 8004600:	22b8      	movs	r2, #184	@ 0xb8
 8004602:	18b9      	adds	r1, r7, r2
 8004604:	2204      	movs	r2, #4
 8004606:	446a      	add	r2, sp
 8004608:	c970      	ldmia	r1!, {r4, r5, r6}
 800460a:	c270      	stmia	r2!, {r4, r5, r6}
 800460c:	6809      	ldr	r1, [r1, #0]
 800460e:	6011      	str	r1, [r2, #0]
 8004610:	466a      	mov	r2, sp
 8004612:	68d9      	ldr	r1, [r3, #12]
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	6819      	ldr	r1, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f7ff f9a2 	bl	8003964 <qMultiply>
    float angle = acos(rotationChange.w);
 8004620:	261c      	movs	r6, #28
 8004622:	19bb      	adds	r3, r7, r6
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	1c18      	adds	r0, r3, #0
 8004628:	f7fe fce0 	bl	8002fec <__aeabi_f2d>
 800462c:	0002      	movs	r2, r0
 800462e:	000b      	movs	r3, r1
 8004630:	0010      	movs	r0, r2
 8004632:	0019      	movs	r1, r3
 8004634:	f002 f9f8 	bl	8006a28 <acos>
 8004638:	0002      	movs	r2, r0
 800463a:	000b      	movs	r3, r1
 800463c:	0010      	movs	r0, r2
 800463e:	0019      	movs	r1, r3
 8004640:	f7fe fd1c 	bl	800307c <__aeabi_d2f>
 8004644:	1c03      	adds	r3, r0, #0
 8004646:	22d4      	movs	r2, #212	@ 0xd4
 8004648:	18b9      	adds	r1, r7, r2
 800464a:	600b      	str	r3, [r1, #0]
    trajectory.angularVelocity = vScale(angle / sin(angle) / DELTA_TIME ,vQuat(rotationChange));
 800464c:	18bb      	adds	r3, r7, r2
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	f7fe fccc 	bl	8002fec <__aeabi_f2d>
 8004654:	0004      	movs	r4, r0
 8004656:	000d      	movs	r5, r1
 8004658:	22d4      	movs	r2, #212	@ 0xd4
 800465a:	18bb      	adds	r3, r7, r2
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	f7fe fcc5 	bl	8002fec <__aeabi_f2d>
 8004662:	0002      	movs	r2, r0
 8004664:	000b      	movs	r3, r1
 8004666:	0010      	movs	r0, r2
 8004668:	0019      	movs	r1, r3
 800466a:	f002 fb15 	bl	8006c98 <sin>
 800466e:	0002      	movs	r2, r0
 8004670:	000b      	movs	r3, r1
 8004672:	0020      	movs	r0, r4
 8004674:	0029      	movs	r1, r5
 8004676:	f7fd f985 	bl	8001984 <__aeabi_ddiv>
 800467a:	0002      	movs	r2, r0
 800467c:	000b      	movs	r3, r1
 800467e:	0010      	movs	r0, r2
 8004680:	0019      	movs	r1, r3
 8004682:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <UpdateTrajectory+0x2a8>)
 8004684:	4b16      	ldr	r3, [pc, #88]	@ (80046e0 <UpdateTrajectory+0x2ac>)
 8004686:	f7fd f97d 	bl	8001984 <__aeabi_ddiv>
 800468a:	0002      	movs	r2, r0
 800468c:	000b      	movs	r3, r1
 800468e:	0010      	movs	r0, r2
 8004690:	0019      	movs	r1, r3
 8004692:	f7fe fcf3 	bl	800307c <__aeabi_d2f>
 8004696:	1c05      	adds	r5, r0, #0
 8004698:	23c8      	movs	r3, #200	@ 0xc8
 800469a:	18f8      	adds	r0, r7, r3
 800469c:	19bb      	adds	r3, r7, r6
 800469e:	466a      	mov	r2, sp
 80046a0:	68d9      	ldr	r1, [r3, #12]
 80046a2:	6011      	str	r1, [r2, #0]
 80046a4:	6819      	ldr	r1, [r3, #0]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f7fe fdcf 	bl	800324c <vQuat>
 80046ae:	4c0a      	ldr	r4, [pc, #40]	@ (80046d8 <UpdateTrajectory+0x2a4>)
 80046b0:	0038      	movs	r0, r7
 80046b2:	23c8      	movs	r3, #200	@ 0xc8
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	466a      	mov	r2, sp
 80046b8:	6899      	ldr	r1, [r3, #8]
 80046ba:	6011      	str	r1, [r2, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	1c29      	adds	r1, r5, #0
 80046c2:	f7fe fee7 	bl	8003494 <vScale>
 80046c6:	003a      	movs	r2, r7
 80046c8:	0023      	movs	r3, r4
 80046ca:	3334      	adds	r3, #52	@ 0x34
 80046cc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80046ce:	c313      	stmia	r3!, {r0, r1, r4}
}
 80046d0:	46c0      	nop			@ (mov r8, r8)
 80046d2:	46bd      	mov	sp, r7
 80046d4:	b037      	add	sp, #220	@ 0xdc
 80046d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046d8:	20000154 	.word	0x20000154
 80046dc:	eb1c432d 	.word	0xeb1c432d
 80046e0:	3f1a36e2 	.word	0x3f1a36e2
 80046e4:	38d1b717 	.word	0x38d1b717
 80046e8:	3f2a36e2 	.word	0x3f2a36e2
 80046ec:	322bcc77 	.word	0x322bcc77

080046f0 <GetTrajectory>:

trajectoryLocation GetTrajectory() {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	return trajectory;
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <GetTrajectory+0x20>)
 80046fc:	0010      	movs	r0, r2
 80046fe:	0019      	movs	r1, r3
 8004700:	234c      	movs	r3, #76	@ 0x4c
 8004702:	001a      	movs	r2, r3
 8004704:	f005 f903 	bl	800990e <memcpy>
}
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	46bd      	mov	sp, r7
 800470c:	b002      	add	sp, #8
 800470e:	bd80      	pop	{r7, pc}
 8004710:	20000154 	.word	0x20000154

08004714 <UARTSendString>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void UARTSendString(char* message, uint8_t length){
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	000a      	movs	r2, r1
 800471e:	1cfb      	adds	r3, r7, #3
 8004720:	701a      	strb	r2, [r3, #0]
	if (HAL_UART_Transmit(&huart2, (uint8_t*)message, length, 100) != HAL_OK) {
 8004722:	1cfb      	adds	r3, r7, #3
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	b29a      	uxth	r2, r3
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	4804      	ldr	r0, [pc, #16]	@ (800473c <UARTSendString+0x28>)
 800472c:	2364      	movs	r3, #100	@ 0x64
 800472e:	f001 fd29 	bl	8006184 <HAL_UART_Transmit>

	}
}
 8004732:	46c0      	nop			@ (mov r8, r8)
 8004734:	46bd      	mov	sp, r7
 8004736:	b002      	add	sp, #8
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	200001a0 	.word	0x200001a0

08004740 <UARTSendInt>:

void UARTSendInt(int number) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b088      	sub	sp, #32
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
	if (number < 0) {
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	da07      	bge.n	800475e <UARTSendInt+0x1e>
	    UARTSendString("-", 1);
 800474e:	4b29      	ldr	r3, [pc, #164]	@ (80047f4 <UARTSendInt+0xb4>)
 8004750:	2101      	movs	r1, #1
 8004752:	0018      	movs	r0, r3
 8004754:	f7ff ffde 	bl	8004714 <UARTSendString>
	    number = -number;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	425b      	negs	r3, r3
 800475c:	607b      	str	r3, [r7, #4]
	}

	int num_digits = 0;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
	int temp = number;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	61bb      	str	r3, [r7, #24]

	  // Count the number of digits (works for non-negative numbers)
	while (temp > 0) {
 8004766:	e009      	b.n	800477c <UARTSendInt+0x3c>
	    temp /= 10;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	210a      	movs	r1, #10
 800476c:	0018      	movs	r0, r3
 800476e:	f7fb fd5f 	bl	8000230 <__divsi3>
 8004772:	0003      	movs	r3, r0
 8004774:	61bb      	str	r3, [r7, #24]
	    num_digits++;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3301      	adds	r3, #1
 800477a:	61fb      	str	r3, [r7, #28]
	while (temp > 0) {
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	2b00      	cmp	r3, #0
 8004780:	dcf2      	bgt.n	8004768 <UARTSendInt+0x28>
	}

	char* buffer = (char*)malloc(num_digits * sizeof(char));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	0018      	movs	r0, r3
 8004786:	f004 fcc1 	bl	800910c <malloc>
 800478a:	0003      	movs	r3, r0
 800478c:	613b      	str	r3, [r7, #16]

	  // Handle zero (special case)
	if (number == 0) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <UARTSendInt+0x60>
	    UARTSendString("0", 1);
 8004794:	4b18      	ldr	r3, [pc, #96]	@ (80047f8 <UARTSendInt+0xb8>)
 8004796:	2101      	movs	r1, #1
 8004798:	0018      	movs	r0, r3
 800479a:	f7ff ffbb 	bl	8004714 <UARTSendString>
	    return;
 800479e:	e026      	b.n	80047ee <UARTSendInt+0xae>
	}

	  // Fill the buffer with digits (right-to-left conversion)
	for (int i = num_digits - 1; i >= 0; i--) {
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3b01      	subs	r3, #1
 80047a4:	617b      	str	r3, [r7, #20]
 80047a6:	e018      	b.n	80047da <UARTSendInt+0x9a>
	    int digit = number % 10;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	210a      	movs	r1, #10
 80047ac:	0018      	movs	r0, r3
 80047ae:	f7fb fe25 	bl	80003fc <__aeabi_idivmod>
 80047b2:	000b      	movs	r3, r1
 80047b4:	60fb      	str	r3, [r7, #12]
	    buffer[i] = 0x30 + digit;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	18cb      	adds	r3, r1, r3
 80047c0:	3230      	adds	r2, #48	@ 0x30
 80047c2:	b2d2      	uxtb	r2, r2
 80047c4:	701a      	strb	r2, [r3, #0]
	    number /= 10;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	210a      	movs	r1, #10
 80047ca:	0018      	movs	r0, r3
 80047cc:	f7fb fd30 	bl	8000230 <__divsi3>
 80047d0:	0003      	movs	r3, r0
 80047d2:	607b      	str	r3, [r7, #4]
	for (int i = num_digits - 1; i >= 0; i--) {
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	dae3      	bge.n	80047a8 <UARTSendInt+0x68>
	}
	UARTSendString(buffer, (uint8_t)num_digits);
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	b2da      	uxtb	r2, r3
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	0011      	movs	r1, r2
 80047e8:	0018      	movs	r0, r3
 80047ea:	f7ff ff93 	bl	8004714 <UARTSendString>
}
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b008      	add	sp, #32
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	0800a1b4 	.word	0x0800a1b4
 80047f8:	0800a1b8 	.word	0x0800a1b8

080047fc <UARTSendFloat>:

void UARTSendFloat(float number, int accuracy){
 80047fc:	b5b0      	push	{r4, r5, r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	if (number < 0) {
 8004806:	2100      	movs	r1, #0
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7fb fe4d 	bl	80004a8 <__aeabi_fcmplt>
 800480e:	1e03      	subs	r3, r0, #0
 8004810:	d009      	beq.n	8004826 <UARTSendFloat+0x2a>
	    UARTSendString("-", 1);
 8004812:	4b60      	ldr	r3, [pc, #384]	@ (8004994 <UARTSendFloat+0x198>)
 8004814:	2101      	movs	r1, #1
 8004816:	0018      	movs	r0, r3
 8004818:	f7ff ff7c 	bl	8004714 <UARTSendString>
	    number = -number;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2280      	movs	r2, #128	@ 0x80
 8004820:	0612      	lsls	r2, r2, #24
 8004822:	4053      	eors	r3, r2
 8004824:	607b      	str	r3, [r7, #4]
	}

	if (isnan(number)) {
 8004826:	6879      	ldr	r1, [r7, #4]
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f7fc fce5 	bl	80011f8 <__aeabi_fcmpun>
 800482e:	1e03      	subs	r3, r0, #0
 8004830:	d005      	beq.n	800483e <UARTSendFloat+0x42>
		UARTSendString("NaN", 3);
 8004832:	4b59      	ldr	r3, [pc, #356]	@ (8004998 <UARTSendFloat+0x19c>)
 8004834:	2103      	movs	r1, #3
 8004836:	0018      	movs	r0, r3
 8004838:	f7ff ff6c 	bl	8004714 <UARTSendString>
		return;
 800483c:	e0a6      	b.n	800498c <UARTSendFloat+0x190>
	}

	if (isinf(number)) {
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	005b      	lsls	r3, r3, #1
 8004842:	085c      	lsrs	r4, r3, #1
 8004844:	2301      	movs	r3, #1
 8004846:	1c1d      	adds	r5, r3, #0
 8004848:	4954      	ldr	r1, [pc, #336]	@ (800499c <UARTSendFloat+0x1a0>)
 800484a:	1c20      	adds	r0, r4, #0
 800484c:	f7fc fcd4 	bl	80011f8 <__aeabi_fcmpun>
 8004850:	1e03      	subs	r3, r0, #0
 8004852:	d107      	bne.n	8004864 <UARTSendFloat+0x68>
 8004854:	4951      	ldr	r1, [pc, #324]	@ (800499c <UARTSendFloat+0x1a0>)
 8004856:	1c20      	adds	r0, r4, #0
 8004858:	f7fb fe30 	bl	80004bc <__aeabi_fcmple>
 800485c:	1e03      	subs	r3, r0, #0
 800485e:	d101      	bne.n	8004864 <UARTSendFloat+0x68>
 8004860:	2300      	movs	r3, #0
 8004862:	1c1d      	adds	r5, r3, #0
 8004864:	b2eb      	uxtb	r3, r5
 8004866:	2201      	movs	r2, #1
 8004868:	4053      	eors	r3, r2
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d004      	beq.n	800487a <UARTSendFloat+0x7e>
		UARTSendString("Inf", 3);
 8004870:	4b4b      	ldr	r3, [pc, #300]	@ (80049a0 <UARTSendFloat+0x1a4>)
 8004872:	2103      	movs	r1, #3
 8004874:	0018      	movs	r0, r3
 8004876:	f7ff ff4d 	bl	8004714 <UARTSendString>
	}

	int exponent = (int)floor(log10(number));
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe fbb6 	bl	8002fec <__aeabi_f2d>
 8004880:	0002      	movs	r2, r0
 8004882:	000b      	movs	r3, r1
 8004884:	0010      	movs	r0, r2
 8004886:	0019      	movs	r1, r3
 8004888:	f002 f8f8 	bl	8006a7c <log10>
 800488c:	0002      	movs	r2, r0
 800488e:	000b      	movs	r3, r1
 8004890:	0010      	movs	r0, r2
 8004892:	0019      	movs	r1, r3
 8004894:	f002 fb3a 	bl	8006f0c <floor>
 8004898:	0002      	movs	r2, r0
 800489a:	000b      	movs	r3, r1
 800489c:	0010      	movs	r0, r2
 800489e:	0019      	movs	r1, r3
 80048a0:	f7fe fb3a 	bl	8002f18 <__aeabi_d2iz>
 80048a4:	0003      	movs	r3, r0
 80048a6:	617b      	str	r3, [r7, #20]
	int mantissaLeading = (int)(number * pow(10, -exponent));
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fe fb9f 	bl	8002fec <__aeabi_f2d>
 80048ae:	0004      	movs	r4, r0
 80048b0:	000d      	movs	r5, r1
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	425b      	negs	r3, r3
 80048b6:	0018      	movs	r0, r3
 80048b8:	f7fe fb6a 	bl	8002f90 <__aeabi_i2d>
 80048bc:	0002      	movs	r2, r0
 80048be:	000b      	movs	r3, r1
 80048c0:	2000      	movs	r0, #0
 80048c2:	4938      	ldr	r1, [pc, #224]	@ (80049a4 <UARTSendFloat+0x1a8>)
 80048c4:	f002 f910 	bl	8006ae8 <pow>
 80048c8:	0002      	movs	r2, r0
 80048ca:	000b      	movs	r3, r1
 80048cc:	0020      	movs	r0, r4
 80048ce:	0029      	movs	r1, r5
 80048d0:	f7fd fc9c 	bl	800220c <__aeabi_dmul>
 80048d4:	0002      	movs	r2, r0
 80048d6:	000b      	movs	r3, r1
 80048d8:	0010      	movs	r0, r2
 80048da:	0019      	movs	r1, r3
 80048dc:	f7fe fb1c 	bl	8002f18 <__aeabi_d2iz>
 80048e0:	0003      	movs	r3, r0
 80048e2:	613b      	str	r3, [r7, #16]
	int mantissaRest = (int)((number * pow(10, -exponent) - mantissaLeading) * pow(10, accuracy));
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f7fe fb81 	bl	8002fec <__aeabi_f2d>
 80048ea:	0004      	movs	r4, r0
 80048ec:	000d      	movs	r5, r1
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	425b      	negs	r3, r3
 80048f2:	0018      	movs	r0, r3
 80048f4:	f7fe fb4c 	bl	8002f90 <__aeabi_i2d>
 80048f8:	0002      	movs	r2, r0
 80048fa:	000b      	movs	r3, r1
 80048fc:	2000      	movs	r0, #0
 80048fe:	4929      	ldr	r1, [pc, #164]	@ (80049a4 <UARTSendFloat+0x1a8>)
 8004900:	f002 f8f2 	bl	8006ae8 <pow>
 8004904:	0002      	movs	r2, r0
 8004906:	000b      	movs	r3, r1
 8004908:	0020      	movs	r0, r4
 800490a:	0029      	movs	r1, r5
 800490c:	f7fd fc7e 	bl	800220c <__aeabi_dmul>
 8004910:	0002      	movs	r2, r0
 8004912:	000b      	movs	r3, r1
 8004914:	0014      	movs	r4, r2
 8004916:	001d      	movs	r5, r3
 8004918:	6938      	ldr	r0, [r7, #16]
 800491a:	f7fe fb39 	bl	8002f90 <__aeabi_i2d>
 800491e:	0002      	movs	r2, r0
 8004920:	000b      	movs	r3, r1
 8004922:	0020      	movs	r0, r4
 8004924:	0029      	movs	r1, r5
 8004926:	f7fd ff39 	bl	800279c <__aeabi_dsub>
 800492a:	0002      	movs	r2, r0
 800492c:	000b      	movs	r3, r1
 800492e:	0014      	movs	r4, r2
 8004930:	001d      	movs	r5, r3
 8004932:	6838      	ldr	r0, [r7, #0]
 8004934:	f7fe fb2c 	bl	8002f90 <__aeabi_i2d>
 8004938:	0002      	movs	r2, r0
 800493a:	000b      	movs	r3, r1
 800493c:	2000      	movs	r0, #0
 800493e:	4919      	ldr	r1, [pc, #100]	@ (80049a4 <UARTSendFloat+0x1a8>)
 8004940:	f002 f8d2 	bl	8006ae8 <pow>
 8004944:	0002      	movs	r2, r0
 8004946:	000b      	movs	r3, r1
 8004948:	0020      	movs	r0, r4
 800494a:	0029      	movs	r1, r5
 800494c:	f7fd fc5e 	bl	800220c <__aeabi_dmul>
 8004950:	0002      	movs	r2, r0
 8004952:	000b      	movs	r3, r1
 8004954:	0010      	movs	r0, r2
 8004956:	0019      	movs	r1, r3
 8004958:	f7fe fade 	bl	8002f18 <__aeabi_d2iz>
 800495c:	0003      	movs	r3, r0
 800495e:	60fb      	str	r3, [r7, #12]
	UARTSendInt(mantissaLeading);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff feec 	bl	8004740 <UARTSendInt>
	UARTSendString(".", 2);
 8004968:	4b0f      	ldr	r3, [pc, #60]	@ (80049a8 <UARTSendFloat+0x1ac>)
 800496a:	2102      	movs	r1, #2
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff fed1 	bl	8004714 <UARTSendString>
	UARTSendInt(mantissaRest);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	0018      	movs	r0, r3
 8004976:	f7ff fee3 	bl	8004740 <UARTSendInt>
	UARTSendString("E", 1);
 800497a:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <UARTSendFloat+0x1b0>)
 800497c:	2101      	movs	r1, #1
 800497e:	0018      	movs	r0, r3
 8004980:	f7ff fec8 	bl	8004714 <UARTSendString>
	UARTSendInt(exponent);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	0018      	movs	r0, r3
 8004988:	f7ff feda 	bl	8004740 <UARTSendInt>
}
 800498c:	46bd      	mov	sp, r7
 800498e:	b006      	add	sp, #24
 8004990:	bdb0      	pop	{r4, r5, r7, pc}
 8004992:	46c0      	nop			@ (mov r8, r8)
 8004994:	0800a1b4 	.word	0x0800a1b4
 8004998:	0800a1bc 	.word	0x0800a1bc
 800499c:	7f7fffff 	.word	0x7f7fffff
 80049a0:	0800a1c0 	.word	0x0800a1c0
 80049a4:	40240000 	.word	0x40240000
 80049a8:	0800a1c4 	.word	0x0800a1c4
 80049ac:	0800a1c8 	.word	0x0800a1c8

080049b0 <GetTime>:

uint32_t GetTime()
{
 80049b0:	b590      	push	{r4, r7, lr}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
    uint32_t ms = HAL_GetTick();
 80049b6:	f000 fb4d 	bl	8005054 <HAL_GetTick>
 80049ba:	0003      	movs	r3, r0
 80049bc:	607b      	str	r3, [r7, #4]
    uint32_t st = SysTick->VAL;
 80049be:	4b15      	ldr	r3, [pc, #84]	@ (8004a14 <GetTime+0x64>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	603b      	str	r3, [r7, #0]

    if (ms != HAL_GetTick())
 80049c4:	f000 fb46 	bl	8005054 <HAL_GetTick>
 80049c8:	0002      	movs	r2, r0
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d006      	beq.n	80049de <GetTime+0x2e>
    {
        ms = HAL_GetTick();
 80049d0:	f000 fb40 	bl	8005054 <HAL_GetTick>
 80049d4:	0003      	movs	r3, r0
 80049d6:	607b      	str	r3, [r7, #4]
        st = SysTick->VAL;
 80049d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004a14 <GetTime+0x64>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	603b      	str	r3, [r7, #0]
    }

    return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	0013      	movs	r3, r2
 80049e2:	015b      	lsls	r3, r3, #5
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	001c      	movs	r4, r3
 80049ee:	4b09      	ldr	r3, [pc, #36]	@ (8004a14 <GetTime+0x64>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	3301      	adds	r3, #1
 80049f4:	22fa      	movs	r2, #250	@ 0xfa
 80049f6:	0091      	lsls	r1, r2, #2
 80049f8:	0018      	movs	r0, r3
 80049fa:	f7fb fb8f 	bl	800011c <__udivsi3>
 80049fe:	0003      	movs	r3, r0
 8004a00:	0019      	movs	r1, r3
 8004a02:	6838      	ldr	r0, [r7, #0]
 8004a04:	f7fb fb8a 	bl	800011c <__udivsi3>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	1ae3      	subs	r3, r4, r3
}
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	b003      	add	sp, #12
 8004a12:	bd90      	pop	{r4, r7, pc}
 8004a14:	e000e010 	.word	0xe000e010

08004a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b098      	sub	sp, #96	@ 0x60
 8004a1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004a1e:	f000 fabf 	bl	8004fa0 <HAL_Init>

  /* USER CODE BEGIN Init */

  int startTime = GetTime();
 8004a22:	f7ff ffc5 	bl	80049b0 <GetTime>
 8004a26:	0003      	movs	r3, r0
 8004a28:	657b      	str	r3, [r7, #84]	@ 0x54
  int lastTime = startTime;
 8004a2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  int count = 100;
 8004a2e:	2364      	movs	r3, #100	@ 0x64
 8004a30:	65bb      	str	r3, [r7, #88]	@ 0x58
  InitilizeInertialMeasurementSystem();
 8004a32:	f7fe fbc5 	bl	80031c0 <InitilizeInertialMeasurementSystem>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004a36:	f000 f847 	bl	8004ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004a3a:	f000 f8c9 	bl	8004bd0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8004a3e:	f000 f897 	bl	8004b70 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  UARTSendString("\r\n\r\n", 4);
 8004a42:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab8 <main+0xa0>)
 8004a44:	2104      	movs	r1, #4
 8004a46:	0018      	movs	r0, r3
 8004a48:	f7ff fe64 	bl	8004714 <UARTSendString>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (count > 0)
 8004a4c:	e02c      	b.n	8004aa8 <main+0x90>
  {
    /* USER CODE END WHILE */
	count -= 1;
 8004a4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a50:	3b01      	subs	r3, #1
 8004a52:	65bb      	str	r3, [r7, #88]	@ 0x58
	int time = GetTime();
 8004a54:	f7ff ffac 	bl	80049b0 <GetTime>
 8004a58:	0003      	movs	r3, r0
 8004a5a:	653b      	str	r3, [r7, #80]	@ 0x50
	int deltaTime = time - lastTime;
 8004a5c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004a5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
	UpdateSystemEstimate(1E-6 * deltaTime);
 8004a64:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8004a66:	f7fe fa93 	bl	8002f90 <__aeabi_i2d>
 8004a6a:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <main+0xa4>)
 8004a6c:	4b14      	ldr	r3, [pc, #80]	@ (8004ac0 <main+0xa8>)
 8004a6e:	f7fd fbcd 	bl	800220c <__aeabi_dmul>
 8004a72:	0002      	movs	r2, r0
 8004a74:	000b      	movs	r3, r1
 8004a76:	0010      	movs	r0, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	f7fe faff 	bl	800307c <__aeabi_d2f>
 8004a7e:	1c03      	adds	r3, r0, #0
 8004a80:	1c18      	adds	r0, r3, #0
 8004a82:	f7fe fbbb 	bl	80031fc <UpdateSystemEstimate>
	UARTSendFloat(GetEstimate().acceleration.z, 5);
 8004a86:	003b      	movs	r3, r7
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f7fe fbcd 	bl	8003228 <GetEstimate>
 8004a8e:	003b      	movs	r3, r7
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	2105      	movs	r1, #5
 8004a94:	1c18      	adds	r0, r3, #0
 8004a96:	f7ff feb1 	bl	80047fc <UARTSendFloat>
	UARTSendString("\r\n", 2);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ac4 <main+0xac>)
 8004a9c:	2102      	movs	r1, #2
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f7ff fe38 	bl	8004714 <UARTSendString>
	lastTime = time;
 8004aa4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  while (count > 0)
 8004aa8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	dccf      	bgt.n	8004a4e <main+0x36>
 8004aae:	2300      	movs	r3, #0
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b018      	add	sp, #96	@ 0x60
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	0800a1cc 	.word	0x0800a1cc
 8004abc:	a0b5ed8d 	.word	0xa0b5ed8d
 8004ac0:	3eb0c6f7 	.word	0x3eb0c6f7
 8004ac4:	0800a1d4 	.word	0x0800a1d4

08004ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ac8:	b590      	push	{r4, r7, lr}
 8004aca:	b099      	sub	sp, #100	@ 0x64
 8004acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ace:	242c      	movs	r4, #44	@ 0x2c
 8004ad0:	193b      	adds	r3, r7, r4
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	2334      	movs	r3, #52	@ 0x34
 8004ad6:	001a      	movs	r2, r3
 8004ad8:	2100      	movs	r1, #0
 8004ada:	f004 fe83 	bl	80097e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ade:	231c      	movs	r3, #28
 8004ae0:	18fb      	adds	r3, r7, r3
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	2310      	movs	r3, #16
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	2100      	movs	r1, #0
 8004aea:	f004 fe7b 	bl	80097e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004aee:	003b      	movs	r3, r7
 8004af0:	0018      	movs	r0, r3
 8004af2:	231c      	movs	r3, #28
 8004af4:	001a      	movs	r2, r3
 8004af6:	2100      	movs	r1, #0
 8004af8:	f004 fe74 	bl	80097e4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8004afc:	193b      	adds	r3, r7, r4
 8004afe:	2220      	movs	r2, #32
 8004b00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004b02:	193b      	adds	r3, r7, r4
 8004b04:	2201      	movs	r2, #1
 8004b06:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004b08:	193b      	adds	r3, r7, r4
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b0e:	193b      	adds	r3, r7, r4
 8004b10:	0018      	movs	r0, r3
 8004b12:	f000 fcf3 	bl	80054fc <HAL_RCC_OscConfig>
 8004b16:	1e03      	subs	r3, r0, #0
 8004b18:	d001      	beq.n	8004b1e <SystemClock_Config+0x56>
  {
    Error_Handler();
 8004b1a:	f000 f8c3 	bl	8004ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b1e:	211c      	movs	r1, #28
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	2207      	movs	r2, #7
 8004b24:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	2203      	movs	r2, #3
 8004b2a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	2200      	movs	r2, #0
 8004b36:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	f001 f863 	bl	8005c08 <HAL_RCC_ClockConfig>
 8004b42:	1e03      	subs	r3, r0, #0
 8004b44:	d001      	beq.n	8004b4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004b46:	f000 f8ad 	bl	8004ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b4a:	003b      	movs	r3, r7
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b50:	003b      	movs	r3, r7
 8004b52:	2200      	movs	r2, #0
 8004b54:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b56:	003b      	movs	r3, r7
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f001 f9c1 	bl	8005ee0 <HAL_RCCEx_PeriphCLKConfig>
 8004b5e:	1e03      	subs	r3, r0, #0
 8004b60:	d001      	beq.n	8004b66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8004b62:	f000 f89f 	bl	8004ca4 <Error_Handler>
  }
}
 8004b66:	46c0      	nop			@ (mov r8, r8)
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	b019      	add	sp, #100	@ 0x64
 8004b6c:	bd90      	pop	{r4, r7, pc}
	...

08004b70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004b74:	4b14      	ldr	r3, [pc, #80]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b76:	4a15      	ldr	r2, [pc, #84]	@ (8004bcc <MX_USART2_UART_Init+0x5c>)
 8004b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004b7a:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b7c:	2296      	movs	r2, #150	@ 0x96
 8004b7e:	0212      	lsls	r2, r2, #8
 8004b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004b82:	4b11      	ldr	r3, [pc, #68]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004b88:	4b0f      	ldr	r3, [pc, #60]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b96:	220c      	movs	r2, #12
 8004b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ba6:	4b08      	ldr	r3, [pc, #32]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bac:	4b06      	ldr	r3, [pc, #24]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004bb2:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <MX_USART2_UART_Init+0x58>)
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f001 fa91 	bl	80060dc <HAL_UART_Init>
 8004bba:	1e03      	subs	r3, r0, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004bbe:	f000 f871 	bl	8004ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004bc2:	46c0      	nop			@ (mov r8, r8)
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	200001a0 	.word	0x200001a0
 8004bcc:	40004400 	.word	0x40004400

08004bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b089      	sub	sp, #36	@ 0x24
 8004bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd6:	240c      	movs	r4, #12
 8004bd8:	193b      	adds	r3, r7, r4
 8004bda:	0018      	movs	r0, r3
 8004bdc:	2314      	movs	r3, #20
 8004bde:	001a      	movs	r2, r3
 8004be0:	2100      	movs	r1, #0
 8004be2:	f004 fdff 	bl	80097e4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004be6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004be8:	695a      	ldr	r2, [r3, #20]
 8004bea:	4b2c      	ldr	r3, [pc, #176]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004bec:	2180      	movs	r1, #128	@ 0x80
 8004bee:	0309      	lsls	r1, r1, #12
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	615a      	str	r2, [r3, #20]
 8004bf4:	4b29      	ldr	r3, [pc, #164]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004bf6:	695a      	ldr	r2, [r3, #20]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	031b      	lsls	r3, r3, #12
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	60bb      	str	r3, [r7, #8]
 8004c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004c02:	4b26      	ldr	r3, [pc, #152]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004c04:	695a      	ldr	r2, [r3, #20]
 8004c06:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004c08:	2180      	movs	r1, #128	@ 0x80
 8004c0a:	03c9      	lsls	r1, r1, #15
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	615a      	str	r2, [r3, #20]
 8004c10:	4b22      	ldr	r3, [pc, #136]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004c12:	695a      	ldr	r2, [r3, #20]
 8004c14:	2380      	movs	r3, #128	@ 0x80
 8004c16:	03db      	lsls	r3, r3, #15
 8004c18:	4013      	ands	r3, r2
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	4b1e      	ldr	r3, [pc, #120]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004c24:	2180      	movs	r1, #128	@ 0x80
 8004c26:	0289      	lsls	r1, r1, #10
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	615a      	str	r2, [r3, #20]
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004c9c <MX_GPIO_Init+0xcc>)
 8004c2e:	695a      	ldr	r2, [r3, #20]
 8004c30:	2380      	movs	r3, #128	@ 0x80
 8004c32:	029b      	lsls	r3, r3, #10
 8004c34:	4013      	ands	r3, r2
 8004c36:	603b      	str	r3, [r7, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004c3a:	2390      	movs	r3, #144	@ 0x90
 8004c3c:	05db      	lsls	r3, r3, #23
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2120      	movs	r1, #32
 8004c42:	0018      	movs	r0, r3
 8004c44:	f000 fc3c 	bl	80054c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8004c48:	193b      	adds	r3, r7, r4
 8004c4a:	2280      	movs	r2, #128	@ 0x80
 8004c4c:	0192      	lsls	r2, r2, #6
 8004c4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c50:	193b      	adds	r3, r7, r4
 8004c52:	2284      	movs	r2, #132	@ 0x84
 8004c54:	0392      	lsls	r2, r2, #14
 8004c56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c58:	193b      	adds	r3, r7, r4
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8004c5e:	193b      	adds	r3, r7, r4
 8004c60:	4a0f      	ldr	r2, [pc, #60]	@ (8004ca0 <MX_GPIO_Init+0xd0>)
 8004c62:	0019      	movs	r1, r3
 8004c64:	0010      	movs	r0, r2
 8004c66:	f000 fab3 	bl	80051d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8004c6a:	0021      	movs	r1, r4
 8004c6c:	187b      	adds	r3, r7, r1
 8004c6e:	2220      	movs	r2, #32
 8004c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c72:	187b      	adds	r3, r7, r1
 8004c74:	2201      	movs	r2, #1
 8004c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c78:	187b      	adds	r3, r7, r1
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c7e:	187b      	adds	r3, r7, r1
 8004c80:	2200      	movs	r2, #0
 8004c82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8004c84:	187a      	adds	r2, r7, r1
 8004c86:	2390      	movs	r3, #144	@ 0x90
 8004c88:	05db      	lsls	r3, r3, #23
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f000 fa9f 	bl	80051d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b009      	add	sp, #36	@ 0x24
 8004c98:	bd90      	pop	{r4, r7, pc}
 8004c9a:	46c0      	nop			@ (mov r8, r8)
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	48000800 	.word	0x48000800

08004ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ca8:	b672      	cpsid	i
}
 8004caa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004cac:	46c0      	nop			@ (mov r8, r8)
 8004cae:	e7fd      	b.n	8004cac <Error_Handler+0x8>

08004cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf4 <HAL_MspInit+0x44>)
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <HAL_MspInit+0x44>)
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
 8004cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf4 <HAL_MspInit+0x44>)
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	4013      	ands	r3, r2
 8004cca:	607b      	str	r3, [r7, #4]
 8004ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cce:	4b09      	ldr	r3, [pc, #36]	@ (8004cf4 <HAL_MspInit+0x44>)
 8004cd0:	69da      	ldr	r2, [r3, #28]
 8004cd2:	4b08      	ldr	r3, [pc, #32]	@ (8004cf4 <HAL_MspInit+0x44>)
 8004cd4:	2180      	movs	r1, #128	@ 0x80
 8004cd6:	0549      	lsls	r1, r1, #21
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	61da      	str	r2, [r3, #28]
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_MspInit+0x44>)
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	2380      	movs	r3, #128	@ 0x80
 8004ce2:	055b      	lsls	r3, r3, #21
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	603b      	str	r3, [r7, #0]
 8004ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	46bd      	mov	sp, r7
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	46c0      	nop			@ (mov r8, r8)
 8004cf4:	40021000 	.word	0x40021000

08004cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08b      	sub	sp, #44	@ 0x2c
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d00:	2414      	movs	r4, #20
 8004d02:	193b      	adds	r3, r7, r4
 8004d04:	0018      	movs	r0, r3
 8004d06:	2314      	movs	r3, #20
 8004d08:	001a      	movs	r2, r3
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	f004 fd6a 	bl	80097e4 <memset>
  if(huart->Instance==USART2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1c      	ldr	r2, [pc, #112]	@ (8004d88 <HAL_UART_MspInit+0x90>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d132      	bne.n	8004d80 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d8c <HAL_UART_MspInit+0x94>)
 8004d1c:	69da      	ldr	r2, [r3, #28]
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	@ (8004d8c <HAL_UART_MspInit+0x94>)
 8004d20:	2180      	movs	r1, #128	@ 0x80
 8004d22:	0289      	lsls	r1, r1, #10
 8004d24:	430a      	orrs	r2, r1
 8004d26:	61da      	str	r2, [r3, #28]
 8004d28:	4b18      	ldr	r3, [pc, #96]	@ (8004d8c <HAL_UART_MspInit+0x94>)
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	2380      	movs	r3, #128	@ 0x80
 8004d2e:	029b      	lsls	r3, r3, #10
 8004d30:	4013      	ands	r3, r2
 8004d32:	613b      	str	r3, [r7, #16]
 8004d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d36:	4b15      	ldr	r3, [pc, #84]	@ (8004d8c <HAL_UART_MspInit+0x94>)
 8004d38:	695a      	ldr	r2, [r3, #20]
 8004d3a:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <HAL_UART_MspInit+0x94>)
 8004d3c:	2180      	movs	r1, #128	@ 0x80
 8004d3e:	0289      	lsls	r1, r1, #10
 8004d40:	430a      	orrs	r2, r1
 8004d42:	615a      	str	r2, [r3, #20]
 8004d44:	4b11      	ldr	r3, [pc, #68]	@ (8004d8c <HAL_UART_MspInit+0x94>)
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	2380      	movs	r3, #128	@ 0x80
 8004d4a:	029b      	lsls	r3, r3, #10
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d52:	0021      	movs	r1, r4
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	220c      	movs	r2, #12
 8004d58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	2200      	movs	r2, #0
 8004d64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2200      	movs	r2, #0
 8004d6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	2201      	movs	r2, #1
 8004d70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d72:	187a      	adds	r2, r7, r1
 8004d74:	2390      	movs	r3, #144	@ 0x90
 8004d76:	05db      	lsls	r3, r3, #23
 8004d78:	0011      	movs	r1, r2
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 fa28 	bl	80051d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004d80:	46c0      	nop			@ (mov r8, r8)
 8004d82:	46bd      	mov	sp, r7
 8004d84:	b00b      	add	sp, #44	@ 0x2c
 8004d86:	bd90      	pop	{r4, r7, pc}
 8004d88:	40004400 	.word	0x40004400
 8004d8c:	40021000 	.word	0x40021000

08004d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004d94:	46c0      	nop			@ (mov r8, r8)
 8004d96:	e7fd      	b.n	8004d94 <NMI_Handler+0x4>

08004d98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d9c:	46c0      	nop			@ (mov r8, r8)
 8004d9e:	e7fd      	b.n	8004d9c <HardFault_Handler+0x4>

08004da0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dae:	46c0      	nop			@ (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004db8:	f000 f93a 	bl	8005030 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dbc:	46c0      	nop			@ (mov r8, r8)
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	af00      	add	r7, sp, #0
  return 1;
 8004dc6:	2301      	movs	r3, #1
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <_kill>:

int _kill(int pid, int sig)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b082      	sub	sp, #8
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004dd8:	f004 fd6c 	bl	80098b4 <__errno>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	2216      	movs	r2, #22
 8004de0:	601a      	str	r2, [r3, #0]
  return -1;
 8004de2:	2301      	movs	r3, #1
 8004de4:	425b      	negs	r3, r3
}
 8004de6:	0018      	movs	r0, r3
 8004de8:	46bd      	mov	sp, r7
 8004dea:	b002      	add	sp, #8
 8004dec:	bd80      	pop	{r7, pc}

08004dee <_exit>:

void _exit (int status)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004df6:	2301      	movs	r3, #1
 8004df8:	425a      	negs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	0011      	movs	r1, r2
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff ffe5 	bl	8004dce <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e04:	46c0      	nop			@ (mov r8, r8)
 8004e06:	e7fd      	b.n	8004e04 <_exit+0x16>

08004e08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e14:	2300      	movs	r3, #0
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	e00a      	b.n	8004e30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004e1a:	e000      	b.n	8004e1e <_read+0x16>
 8004e1c:	bf00      	nop
 8004e1e:	0001      	movs	r1, r0
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	1c5a      	adds	r2, r3, #1
 8004e24:	60ba      	str	r2, [r7, #8]
 8004e26:	b2ca      	uxtb	r2, r1
 8004e28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dbf0      	blt.n	8004e1a <_read+0x12>
  }

  return len;
 8004e38:	687b      	ldr	r3, [r7, #4]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b006      	add	sp, #24
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	e009      	b.n	8004e68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	60ba      	str	r2, [r7, #8]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	e000      	b.n	8004e62 <_write+0x20>
 8004e60:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	3301      	adds	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	dbf1      	blt.n	8004e54 <_write+0x12>
  }
  return len;
 8004e70:	687b      	ldr	r3, [r7, #4]
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b006      	add	sp, #24
 8004e78:	bd80      	pop	{r7, pc}

08004e7a <_close>:

int _close(int file)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b082      	sub	sp, #8
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	425b      	negs	r3, r3
}
 8004e86:	0018      	movs	r0, r3
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	b002      	add	sp, #8
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2280      	movs	r2, #128	@ 0x80
 8004e9c:	0192      	lsls	r2, r2, #6
 8004e9e:	605a      	str	r2, [r3, #4]
  return 0;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	0018      	movs	r0, r3
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	b002      	add	sp, #8
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <_isatty>:

int _isatty(int file)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004eb2:	2301      	movs	r3, #1
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b004      	add	sp, #16
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004edc:	4a14      	ldr	r2, [pc, #80]	@ (8004f30 <_sbrk+0x5c>)
 8004ede:	4b15      	ldr	r3, [pc, #84]	@ (8004f34 <_sbrk+0x60>)
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ee8:	4b13      	ldr	r3, [pc, #76]	@ (8004f38 <_sbrk+0x64>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <_sbrk+0x64>)
 8004ef2:	4a12      	ldr	r2, [pc, #72]	@ (8004f3c <_sbrk+0x68>)
 8004ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ef6:	4b10      	ldr	r3, [pc, #64]	@ (8004f38 <_sbrk+0x64>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d207      	bcs.n	8004f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f04:	f004 fcd6 	bl	80098b4 <__errno>
 8004f08:	0003      	movs	r3, r0
 8004f0a:	220c      	movs	r2, #12
 8004f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	425b      	negs	r3, r3
 8004f12:	e009      	b.n	8004f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004f14:	4b08      	ldr	r3, [pc, #32]	@ (8004f38 <_sbrk+0x64>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004f1a:	4b07      	ldr	r3, [pc, #28]	@ (8004f38 <_sbrk+0x64>)
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	18d2      	adds	r2, r2, r3
 8004f22:	4b05      	ldr	r3, [pc, #20]	@ (8004f38 <_sbrk+0x64>)
 8004f24:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	0018      	movs	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	b006      	add	sp, #24
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	20004000 	.word	0x20004000
 8004f34:	00000400 	.word	0x00000400
 8004f38:	20000228 	.word	0x20000228
 8004f3c:	20000380 	.word	0x20000380

08004f40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004f44:	46c0      	nop			@ (mov r8, r8)
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
	...

08004f4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f4c:	480d      	ldr	r0, [pc, #52]	@ (8004f84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f4e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f50:	f7ff fff6 	bl	8004f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004f54:	480c      	ldr	r0, [pc, #48]	@ (8004f88 <LoopForever+0x6>)
  ldr r1, =_edata
 8004f56:	490d      	ldr	r1, [pc, #52]	@ (8004f8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f58:	4a0d      	ldr	r2, [pc, #52]	@ (8004f90 <LoopForever+0xe>)
  movs r3, #0
 8004f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f5c:	e002      	b.n	8004f64 <LoopCopyDataInit>

08004f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f62:	3304      	adds	r3, #4

08004f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f68:	d3f9      	bcc.n	8004f5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8004f94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8004f98 <LoopForever+0x16>)
  movs r3, #0
 8004f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f70:	e001      	b.n	8004f76 <LoopFillZerobss>

08004f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f74:	3204      	adds	r2, #4

08004f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f78:	d3fb      	bcc.n	8004f72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f7a:	f004 fca1 	bl	80098c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004f7e:	f7ff fd4b 	bl	8004a18 <main>

08004f82 <LoopForever>:

LoopForever:
    b LoopForever
 8004f82:	e7fe      	b.n	8004f82 <LoopForever>
  ldr   r0, =_estack
 8004f84:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f8c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004f90:	0800a5c0 	.word	0x0800a5c0
  ldr r2, =_sbss
 8004f94:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004f98:	2000037c 	.word	0x2000037c

08004f9c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f9c:	e7fe      	b.n	8004f9c <ADC1_COMP_IRQHandler>
	...

08004fa0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004fa4:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <HAL_Init+0x24>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <HAL_Init+0x24>)
 8004faa:	2110      	movs	r1, #16
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f000 f809 	bl	8004fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004fb6:	f7ff fe7b 	bl	8004cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	0018      	movs	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	40022000 	.word	0x40022000

08004fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fc8:	b590      	push	{r4, r7, lr}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fd0:	4b14      	ldr	r3, [pc, #80]	@ (8005024 <HAL_InitTick+0x5c>)
 8004fd2:	681c      	ldr	r4, [r3, #0]
 8004fd4:	4b14      	ldr	r3, [pc, #80]	@ (8005028 <HAL_InitTick+0x60>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	0019      	movs	r1, r3
 8004fda:	23fa      	movs	r3, #250	@ 0xfa
 8004fdc:	0098      	lsls	r0, r3, #2
 8004fde:	f7fb f89d 	bl	800011c <__udivsi3>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	0020      	movs	r0, r4
 8004fe8:	f7fb f898 	bl	800011c <__udivsi3>
 8004fec:	0003      	movs	r3, r0
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f000 f8e1 	bl	80051b6 <HAL_SYSTICK_Config>
 8004ff4:	1e03      	subs	r3, r0, #0
 8004ff6:	d001      	beq.n	8004ffc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e00f      	b.n	800501c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d80b      	bhi.n	800501a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	2301      	movs	r3, #1
 8005006:	425b      	negs	r3, r3
 8005008:	2200      	movs	r2, #0
 800500a:	0018      	movs	r0, r3
 800500c:	f000 f8be 	bl	800518c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005010:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_InitTick+0x64>)
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
 8005018:	e000      	b.n	800501c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
}
 800501c:	0018      	movs	r0, r3
 800501e:	46bd      	mov	sp, r7
 8005020:	b003      	add	sp, #12
 8005022:	bd90      	pop	{r4, r7, pc}
 8005024:	20000000 	.word	0x20000000
 8005028:	20000008 	.word	0x20000008
 800502c:	20000004 	.word	0x20000004

08005030 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <HAL_IncTick+0x1c>)
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	001a      	movs	r2, r3
 800503a:	4b05      	ldr	r3, [pc, #20]	@ (8005050 <HAL_IncTick+0x20>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	18d2      	adds	r2, r2, r3
 8005040:	4b03      	ldr	r3, [pc, #12]	@ (8005050 <HAL_IncTick+0x20>)
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	46c0      	nop			@ (mov r8, r8)
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	20000008 	.word	0x20000008
 8005050:	2000022c 	.word	0x2000022c

08005054 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
  return uwTick;
 8005058:	4b02      	ldr	r3, [pc, #8]	@ (8005064 <HAL_GetTick+0x10>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	0018      	movs	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	46c0      	nop			@ (mov r8, r8)
 8005064:	2000022c 	.word	0x2000022c

08005068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005068:	b590      	push	{r4, r7, lr}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	0002      	movs	r2, r0
 8005070:	6039      	str	r1, [r7, #0]
 8005072:	1dfb      	adds	r3, r7, #7
 8005074:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005076:	1dfb      	adds	r3, r7, #7
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b7f      	cmp	r3, #127	@ 0x7f
 800507c:	d828      	bhi.n	80050d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800507e:	4a2f      	ldr	r2, [pc, #188]	@ (800513c <__NVIC_SetPriority+0xd4>)
 8005080:	1dfb      	adds	r3, r7, #7
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b25b      	sxtb	r3, r3
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	33c0      	adds	r3, #192	@ 0xc0
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	589b      	ldr	r3, [r3, r2]
 800508e:	1dfa      	adds	r2, r7, #7
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	0011      	movs	r1, r2
 8005094:	2203      	movs	r2, #3
 8005096:	400a      	ands	r2, r1
 8005098:	00d2      	lsls	r2, r2, #3
 800509a:	21ff      	movs	r1, #255	@ 0xff
 800509c:	4091      	lsls	r1, r2
 800509e:	000a      	movs	r2, r1
 80050a0:	43d2      	mvns	r2, r2
 80050a2:	401a      	ands	r2, r3
 80050a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	019b      	lsls	r3, r3, #6
 80050aa:	22ff      	movs	r2, #255	@ 0xff
 80050ac:	401a      	ands	r2, r3
 80050ae:	1dfb      	adds	r3, r7, #7
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	0018      	movs	r0, r3
 80050b4:	2303      	movs	r3, #3
 80050b6:	4003      	ands	r3, r0
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050bc:	481f      	ldr	r0, [pc, #124]	@ (800513c <__NVIC_SetPriority+0xd4>)
 80050be:	1dfb      	adds	r3, r7, #7
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	b25b      	sxtb	r3, r3
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	430a      	orrs	r2, r1
 80050c8:	33c0      	adds	r3, #192	@ 0xc0
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80050ce:	e031      	b.n	8005134 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005140 <__NVIC_SetPriority+0xd8>)
 80050d2:	1dfb      	adds	r3, r7, #7
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	0019      	movs	r1, r3
 80050d8:	230f      	movs	r3, #15
 80050da:	400b      	ands	r3, r1
 80050dc:	3b08      	subs	r3, #8
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	3306      	adds	r3, #6
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	18d3      	adds	r3, r2, r3
 80050e6:	3304      	adds	r3, #4
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	1dfa      	adds	r2, r7, #7
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	0011      	movs	r1, r2
 80050f0:	2203      	movs	r2, #3
 80050f2:	400a      	ands	r2, r1
 80050f4:	00d2      	lsls	r2, r2, #3
 80050f6:	21ff      	movs	r1, #255	@ 0xff
 80050f8:	4091      	lsls	r1, r2
 80050fa:	000a      	movs	r2, r1
 80050fc:	43d2      	mvns	r2, r2
 80050fe:	401a      	ands	r2, r3
 8005100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	22ff      	movs	r2, #255	@ 0xff
 8005108:	401a      	ands	r2, r3
 800510a:	1dfb      	adds	r3, r7, #7
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	0018      	movs	r0, r3
 8005110:	2303      	movs	r3, #3
 8005112:	4003      	ands	r3, r0
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005118:	4809      	ldr	r0, [pc, #36]	@ (8005140 <__NVIC_SetPriority+0xd8>)
 800511a:	1dfb      	adds	r3, r7, #7
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	001c      	movs	r4, r3
 8005120:	230f      	movs	r3, #15
 8005122:	4023      	ands	r3, r4
 8005124:	3b08      	subs	r3, #8
 8005126:	089b      	lsrs	r3, r3, #2
 8005128:	430a      	orrs	r2, r1
 800512a:	3306      	adds	r3, #6
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	18c3      	adds	r3, r0, r3
 8005130:	3304      	adds	r3, #4
 8005132:	601a      	str	r2, [r3, #0]
}
 8005134:	46c0      	nop			@ (mov r8, r8)
 8005136:	46bd      	mov	sp, r7
 8005138:	b003      	add	sp, #12
 800513a:	bd90      	pop	{r4, r7, pc}
 800513c:	e000e100 	.word	0xe000e100
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1e5a      	subs	r2, r3, #1
 8005150:	2380      	movs	r3, #128	@ 0x80
 8005152:	045b      	lsls	r3, r3, #17
 8005154:	429a      	cmp	r2, r3
 8005156:	d301      	bcc.n	800515c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005158:	2301      	movs	r3, #1
 800515a:	e010      	b.n	800517e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800515c:	4b0a      	ldr	r3, [pc, #40]	@ (8005188 <SysTick_Config+0x44>)
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	3a01      	subs	r2, #1
 8005162:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005164:	2301      	movs	r3, #1
 8005166:	425b      	negs	r3, r3
 8005168:	2103      	movs	r1, #3
 800516a:	0018      	movs	r0, r3
 800516c:	f7ff ff7c 	bl	8005068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <SysTick_Config+0x44>)
 8005172:	2200      	movs	r2, #0
 8005174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005176:	4b04      	ldr	r3, [pc, #16]	@ (8005188 <SysTick_Config+0x44>)
 8005178:	2207      	movs	r2, #7
 800517a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800517c:	2300      	movs	r3, #0
}
 800517e:	0018      	movs	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	b002      	add	sp, #8
 8005184:	bd80      	pop	{r7, pc}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	e000e010 	.word	0xe000e010

0800518c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
 8005196:	210f      	movs	r1, #15
 8005198:	187b      	adds	r3, r7, r1
 800519a:	1c02      	adds	r2, r0, #0
 800519c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	187b      	adds	r3, r7, r1
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	b25b      	sxtb	r3, r3
 80051a6:	0011      	movs	r1, r2
 80051a8:	0018      	movs	r0, r3
 80051aa:	f7ff ff5d 	bl	8005068 <__NVIC_SetPriority>
}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b004      	add	sp, #16
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	0018      	movs	r0, r3
 80051c2:	f7ff ffbf 	bl	8005144 <SysTick_Config>
 80051c6:	0003      	movs	r3, r0
}
 80051c8:	0018      	movs	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	b002      	add	sp, #8
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b086      	sub	sp, #24
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051da:	2300      	movs	r3, #0
 80051dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051de:	e155      	b.n	800548c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2101      	movs	r1, #1
 80051e6:	697a      	ldr	r2, [r7, #20]
 80051e8:	4091      	lsls	r1, r2
 80051ea:	000a      	movs	r2, r1
 80051ec:	4013      	ands	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d100      	bne.n	80051f8 <HAL_GPIO_Init+0x28>
 80051f6:	e146      	b.n	8005486 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	2203      	movs	r2, #3
 80051fe:	4013      	ands	r3, r2
 8005200:	2b01      	cmp	r3, #1
 8005202:	d005      	beq.n	8005210 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2203      	movs	r2, #3
 800520a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800520c:	2b02      	cmp	r3, #2
 800520e:	d130      	bne.n	8005272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	2203      	movs	r2, #3
 800521c:	409a      	lsls	r2, r3
 800521e:	0013      	movs	r3, r2
 8005220:	43da      	mvns	r2, r3
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	4013      	ands	r3, r2
 8005226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	005b      	lsls	r3, r3, #1
 8005230:	409a      	lsls	r2, r3
 8005232:	0013      	movs	r3, r2
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	4313      	orrs	r3, r2
 8005238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005246:	2201      	movs	r2, #1
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	409a      	lsls	r2, r3
 800524c:	0013      	movs	r3, r2
 800524e:	43da      	mvns	r2, r3
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4013      	ands	r3, r2
 8005254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	091b      	lsrs	r3, r3, #4
 800525c:	2201      	movs	r2, #1
 800525e:	401a      	ands	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	409a      	lsls	r2, r3
 8005264:	0013      	movs	r3, r2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	2203      	movs	r2, #3
 8005278:	4013      	ands	r3, r2
 800527a:	2b03      	cmp	r3, #3
 800527c:	d017      	beq.n	80052ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	2203      	movs	r2, #3
 800528a:	409a      	lsls	r2, r3
 800528c:	0013      	movs	r3, r2
 800528e:	43da      	mvns	r2, r3
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	4013      	ands	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689a      	ldr	r2, [r3, #8]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	409a      	lsls	r2, r3
 80052a0:	0013      	movs	r3, r2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2203      	movs	r2, #3
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d123      	bne.n	8005302 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	08da      	lsrs	r2, r3, #3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3208      	adds	r2, #8
 80052c2:	0092      	lsls	r2, r2, #2
 80052c4:	58d3      	ldr	r3, [r2, r3]
 80052c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	2207      	movs	r2, #7
 80052cc:	4013      	ands	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	220f      	movs	r2, #15
 80052d2:	409a      	lsls	r2, r3
 80052d4:	0013      	movs	r3, r2
 80052d6:	43da      	mvns	r2, r3
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2107      	movs	r1, #7
 80052e6:	400b      	ands	r3, r1
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	409a      	lsls	r2, r3
 80052ec:	0013      	movs	r3, r2
 80052ee:	693a      	ldr	r2, [r7, #16]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	08da      	lsrs	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	3208      	adds	r2, #8
 80052fc:	0092      	lsls	r2, r2, #2
 80052fe:	6939      	ldr	r1, [r7, #16]
 8005300:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	005b      	lsls	r3, r3, #1
 800530c:	2203      	movs	r2, #3
 800530e:	409a      	lsls	r2, r3
 8005310:	0013      	movs	r3, r2
 8005312:	43da      	mvns	r2, r3
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2203      	movs	r2, #3
 8005320:	401a      	ands	r2, r3
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	005b      	lsls	r3, r3, #1
 8005326:	409a      	lsls	r2, r3
 8005328:	0013      	movs	r3, r2
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	23c0      	movs	r3, #192	@ 0xc0
 800533c:	029b      	lsls	r3, r3, #10
 800533e:	4013      	ands	r3, r2
 8005340:	d100      	bne.n	8005344 <HAL_GPIO_Init+0x174>
 8005342:	e0a0      	b.n	8005486 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005344:	4b57      	ldr	r3, [pc, #348]	@ (80054a4 <HAL_GPIO_Init+0x2d4>)
 8005346:	699a      	ldr	r2, [r3, #24]
 8005348:	4b56      	ldr	r3, [pc, #344]	@ (80054a4 <HAL_GPIO_Init+0x2d4>)
 800534a:	2101      	movs	r1, #1
 800534c:	430a      	orrs	r2, r1
 800534e:	619a      	str	r2, [r3, #24]
 8005350:	4b54      	ldr	r3, [pc, #336]	@ (80054a4 <HAL_GPIO_Init+0x2d4>)
 8005352:	699b      	ldr	r3, [r3, #24]
 8005354:	2201      	movs	r2, #1
 8005356:	4013      	ands	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800535c:	4a52      	ldr	r2, [pc, #328]	@ (80054a8 <HAL_GPIO_Init+0x2d8>)
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	3302      	adds	r3, #2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	589b      	ldr	r3, [r3, r2]
 8005368:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	2203      	movs	r2, #3
 800536e:	4013      	ands	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	220f      	movs	r2, #15
 8005374:	409a      	lsls	r2, r3
 8005376:	0013      	movs	r3, r2
 8005378:	43da      	mvns	r2, r3
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4013      	ands	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	2390      	movs	r3, #144	@ 0x90
 8005384:	05db      	lsls	r3, r3, #23
 8005386:	429a      	cmp	r2, r3
 8005388:	d019      	beq.n	80053be <HAL_GPIO_Init+0x1ee>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a47      	ldr	r2, [pc, #284]	@ (80054ac <HAL_GPIO_Init+0x2dc>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d013      	beq.n	80053ba <HAL_GPIO_Init+0x1ea>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a46      	ldr	r2, [pc, #280]	@ (80054b0 <HAL_GPIO_Init+0x2e0>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d00d      	beq.n	80053b6 <HAL_GPIO_Init+0x1e6>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a45      	ldr	r2, [pc, #276]	@ (80054b4 <HAL_GPIO_Init+0x2e4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d007      	beq.n	80053b2 <HAL_GPIO_Init+0x1e2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a44      	ldr	r2, [pc, #272]	@ (80054b8 <HAL_GPIO_Init+0x2e8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d101      	bne.n	80053ae <HAL_GPIO_Init+0x1de>
 80053aa:	2304      	movs	r3, #4
 80053ac:	e008      	b.n	80053c0 <HAL_GPIO_Init+0x1f0>
 80053ae:	2305      	movs	r3, #5
 80053b0:	e006      	b.n	80053c0 <HAL_GPIO_Init+0x1f0>
 80053b2:	2303      	movs	r3, #3
 80053b4:	e004      	b.n	80053c0 <HAL_GPIO_Init+0x1f0>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e002      	b.n	80053c0 <HAL_GPIO_Init+0x1f0>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <HAL_GPIO_Init+0x1f0>
 80053be:	2300      	movs	r3, #0
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	2103      	movs	r1, #3
 80053c4:	400a      	ands	r2, r1
 80053c6:	0092      	lsls	r2, r2, #2
 80053c8:	4093      	lsls	r3, r2
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80053d0:	4935      	ldr	r1, [pc, #212]	@ (80054a8 <HAL_GPIO_Init+0x2d8>)
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	089b      	lsrs	r3, r3, #2
 80053d6:	3302      	adds	r3, #2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053de:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	43da      	mvns	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	2380      	movs	r3, #128	@ 0x80
 80053f4:	035b      	lsls	r3, r3, #13
 80053f6:	4013      	ands	r3, r2
 80053f8:	d003      	beq.n	8005402 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005402:	4b2e      	ldr	r3, [pc, #184]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005408:	4b2c      	ldr	r3, [pc, #176]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	43da      	mvns	r2, r3
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	4013      	ands	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	2380      	movs	r3, #128	@ 0x80
 800541e:	039b      	lsls	r3, r3, #14
 8005420:	4013      	ands	r3, r2
 8005422:	d003      	beq.n	800542c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4313      	orrs	r3, r2
 800542a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800542c:	4b23      	ldr	r3, [pc, #140]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8005432:	4b22      	ldr	r3, [pc, #136]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	43da      	mvns	r2, r3
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	4013      	ands	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685a      	ldr	r2, [r3, #4]
 8005446:	2380      	movs	r3, #128	@ 0x80
 8005448:	029b      	lsls	r3, r3, #10
 800544a:	4013      	ands	r3, r2
 800544c:	d003      	beq.n	8005456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005456:	4b19      	ldr	r3, [pc, #100]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800545c:	4b17      	ldr	r3, [pc, #92]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	43da      	mvns	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4013      	ands	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	025b      	lsls	r3, r3, #9
 8005474:	4013      	ands	r3, r2
 8005476:	d003      	beq.n	8005480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005480:	4b0e      	ldr	r3, [pc, #56]	@ (80054bc <HAL_GPIO_Init+0x2ec>)
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	3301      	adds	r3, #1
 800548a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	40da      	lsrs	r2, r3
 8005494:	1e13      	subs	r3, r2, #0
 8005496:	d000      	beq.n	800549a <HAL_GPIO_Init+0x2ca>
 8005498:	e6a2      	b.n	80051e0 <HAL_GPIO_Init+0x10>
  } 
}
 800549a:	46c0      	nop			@ (mov r8, r8)
 800549c:	46c0      	nop			@ (mov r8, r8)
 800549e:	46bd      	mov	sp, r7
 80054a0:	b006      	add	sp, #24
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40021000 	.word	0x40021000
 80054a8:	40010000 	.word	0x40010000
 80054ac:	48000400 	.word	0x48000400
 80054b0:	48000800 	.word	0x48000800
 80054b4:	48000c00 	.word	0x48000c00
 80054b8:	48001000 	.word	0x48001000
 80054bc:	40010400 	.word	0x40010400

080054c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	0008      	movs	r0, r1
 80054ca:	0011      	movs	r1, r2
 80054cc:	1cbb      	adds	r3, r7, #2
 80054ce:	1c02      	adds	r2, r0, #0
 80054d0:	801a      	strh	r2, [r3, #0]
 80054d2:	1c7b      	adds	r3, r7, #1
 80054d4:	1c0a      	adds	r2, r1, #0
 80054d6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054d8:	1c7b      	adds	r3, r7, #1
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d004      	beq.n	80054ea <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054e0:	1cbb      	adds	r3, r7, #2
 80054e2:	881a      	ldrh	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80054e8:	e003      	b.n	80054f2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054ea:	1cbb      	adds	r3, r7, #2
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80054f2:	46c0      	nop			@ (mov r8, r8)
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b002      	add	sp, #8
 80054f8:	bd80      	pop	{r7, pc}
	...

080054fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d102      	bne.n	8005510 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	f000 fb76 	bl	8005bfc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2201      	movs	r2, #1
 8005516:	4013      	ands	r3, r2
 8005518:	d100      	bne.n	800551c <HAL_RCC_OscConfig+0x20>
 800551a:	e08e      	b.n	800563a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800551c:	4bc5      	ldr	r3, [pc, #788]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	220c      	movs	r2, #12
 8005522:	4013      	ands	r3, r2
 8005524:	2b04      	cmp	r3, #4
 8005526:	d00e      	beq.n	8005546 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005528:	4bc2      	ldr	r3, [pc, #776]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	220c      	movs	r2, #12
 800552e:	4013      	ands	r3, r2
 8005530:	2b08      	cmp	r3, #8
 8005532:	d117      	bne.n	8005564 <HAL_RCC_OscConfig+0x68>
 8005534:	4bbf      	ldr	r3, [pc, #764]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	23c0      	movs	r3, #192	@ 0xc0
 800553a:	025b      	lsls	r3, r3, #9
 800553c:	401a      	ands	r2, r3
 800553e:	2380      	movs	r3, #128	@ 0x80
 8005540:	025b      	lsls	r3, r3, #9
 8005542:	429a      	cmp	r2, r3
 8005544:	d10e      	bne.n	8005564 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005546:	4bbb      	ldr	r3, [pc, #748]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	2380      	movs	r3, #128	@ 0x80
 800554c:	029b      	lsls	r3, r3, #10
 800554e:	4013      	ands	r3, r2
 8005550:	d100      	bne.n	8005554 <HAL_RCC_OscConfig+0x58>
 8005552:	e071      	b.n	8005638 <HAL_RCC_OscConfig+0x13c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d000      	beq.n	800555e <HAL_RCC_OscConfig+0x62>
 800555c:	e06c      	b.n	8005638 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f000 fb4c 	bl	8005bfc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d107      	bne.n	800557c <HAL_RCC_OscConfig+0x80>
 800556c:	4bb1      	ldr	r3, [pc, #708]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4bb0      	ldr	r3, [pc, #704]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005572:	2180      	movs	r1, #128	@ 0x80
 8005574:	0249      	lsls	r1, r1, #9
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e02f      	b.n	80055dc <HAL_RCC_OscConfig+0xe0>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10c      	bne.n	800559e <HAL_RCC_OscConfig+0xa2>
 8005584:	4bab      	ldr	r3, [pc, #684]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	4baa      	ldr	r3, [pc, #680]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800558a:	49ab      	ldr	r1, [pc, #684]	@ (8005838 <HAL_RCC_OscConfig+0x33c>)
 800558c:	400a      	ands	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
 8005590:	4ba8      	ldr	r3, [pc, #672]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	4ba7      	ldr	r3, [pc, #668]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005596:	49a9      	ldr	r1, [pc, #676]	@ (800583c <HAL_RCC_OscConfig+0x340>)
 8005598:	400a      	ands	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
 800559c:	e01e      	b.n	80055dc <HAL_RCC_OscConfig+0xe0>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b05      	cmp	r3, #5
 80055a4:	d10e      	bne.n	80055c4 <HAL_RCC_OscConfig+0xc8>
 80055a6:	4ba3      	ldr	r3, [pc, #652]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4ba2      	ldr	r3, [pc, #648]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055ac:	2180      	movs	r1, #128	@ 0x80
 80055ae:	02c9      	lsls	r1, r1, #11
 80055b0:	430a      	orrs	r2, r1
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	4b9f      	ldr	r3, [pc, #636]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	4b9e      	ldr	r3, [pc, #632]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055ba:	2180      	movs	r1, #128	@ 0x80
 80055bc:	0249      	lsls	r1, r1, #9
 80055be:	430a      	orrs	r2, r1
 80055c0:	601a      	str	r2, [r3, #0]
 80055c2:	e00b      	b.n	80055dc <HAL_RCC_OscConfig+0xe0>
 80055c4:	4b9b      	ldr	r3, [pc, #620]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b9a      	ldr	r3, [pc, #616]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055ca:	499b      	ldr	r1, [pc, #620]	@ (8005838 <HAL_RCC_OscConfig+0x33c>)
 80055cc:	400a      	ands	r2, r1
 80055ce:	601a      	str	r2, [r3, #0]
 80055d0:	4b98      	ldr	r3, [pc, #608]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b97      	ldr	r3, [pc, #604]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80055d6:	4999      	ldr	r1, [pc, #612]	@ (800583c <HAL_RCC_OscConfig+0x340>)
 80055d8:	400a      	ands	r2, r1
 80055da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d014      	beq.n	800560e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7ff fd36 	bl	8005054 <HAL_GetTick>
 80055e8:	0003      	movs	r3, r0
 80055ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ec:	e008      	b.n	8005600 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055ee:	f7ff fd31 	bl	8005054 <HAL_GetTick>
 80055f2:	0002      	movs	r2, r0
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	2b64      	cmp	r3, #100	@ 0x64
 80055fa:	d901      	bls.n	8005600 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80055fc:	2303      	movs	r3, #3
 80055fe:	e2fd      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005600:	4b8c      	ldr	r3, [pc, #560]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	2380      	movs	r3, #128	@ 0x80
 8005606:	029b      	lsls	r3, r3, #10
 8005608:	4013      	ands	r3, r2
 800560a:	d0f0      	beq.n	80055ee <HAL_RCC_OscConfig+0xf2>
 800560c:	e015      	b.n	800563a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560e:	f7ff fd21 	bl	8005054 <HAL_GetTick>
 8005612:	0003      	movs	r3, r0
 8005614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7ff fd1c 	bl	8005054 <HAL_GetTick>
 800561c:	0002      	movs	r2, r0
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	@ 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e2e8      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b82      	ldr	r3, [pc, #520]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	2380      	movs	r3, #128	@ 0x80
 8005630:	029b      	lsls	r3, r3, #10
 8005632:	4013      	ands	r3, r2
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0x11c>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2202      	movs	r2, #2
 8005640:	4013      	ands	r3, r2
 8005642:	d100      	bne.n	8005646 <HAL_RCC_OscConfig+0x14a>
 8005644:	e06c      	b.n	8005720 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8005646:	4b7b      	ldr	r3, [pc, #492]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	220c      	movs	r2, #12
 800564c:	4013      	ands	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005650:	4b78      	ldr	r3, [pc, #480]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	220c      	movs	r2, #12
 8005656:	4013      	ands	r3, r2
 8005658:	2b08      	cmp	r3, #8
 800565a:	d11f      	bne.n	800569c <HAL_RCC_OscConfig+0x1a0>
 800565c:	4b75      	ldr	r3, [pc, #468]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	23c0      	movs	r3, #192	@ 0xc0
 8005662:	025b      	lsls	r3, r3, #9
 8005664:	401a      	ands	r2, r3
 8005666:	2380      	movs	r3, #128	@ 0x80
 8005668:	021b      	lsls	r3, r3, #8
 800566a:	429a      	cmp	r2, r3
 800566c:	d116      	bne.n	800569c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566e:	4b71      	ldr	r3, [pc, #452]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2202      	movs	r2, #2
 8005674:	4013      	ands	r3, r2
 8005676:	d005      	beq.n	8005684 <HAL_RCC_OscConfig+0x188>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e2bb      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005684:	4b6b      	ldr	r3, [pc, #428]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	22f8      	movs	r2, #248	@ 0xf8
 800568a:	4393      	bics	r3, r2
 800568c:	0019      	movs	r1, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	00da      	lsls	r2, r3, #3
 8005694:	4b67      	ldr	r3, [pc, #412]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569a:	e041      	b.n	8005720 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d024      	beq.n	80056ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a4:	4b63      	ldr	r3, [pc, #396]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	4b62      	ldr	r3, [pc, #392]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056aa:	2101      	movs	r1, #1
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056b0:	f7ff fcd0 	bl	8005054 <HAL_GetTick>
 80056b4:	0003      	movs	r3, r0
 80056b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ba:	f7ff fccb 	bl	8005054 <HAL_GetTick>
 80056be:	0002      	movs	r2, r0
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e297      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056cc:	4b59      	ldr	r3, [pc, #356]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2202      	movs	r2, #2
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0f1      	beq.n	80056ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d6:	4b57      	ldr	r3, [pc, #348]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	22f8      	movs	r2, #248	@ 0xf8
 80056dc:	4393      	bics	r3, r2
 80056de:	0019      	movs	r1, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	00da      	lsls	r2, r3, #3
 80056e6:	4b53      	ldr	r3, [pc, #332]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056e8:	430a      	orrs	r2, r1
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	e018      	b.n	8005720 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ee:	4b51      	ldr	r3, [pc, #324]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	4b50      	ldr	r3, [pc, #320]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80056f4:	2101      	movs	r1, #1
 80056f6:	438a      	bics	r2, r1
 80056f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056fa:	f7ff fcab 	bl	8005054 <HAL_GetTick>
 80056fe:	0003      	movs	r3, r0
 8005700:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005704:	f7ff fca6 	bl	8005054 <HAL_GetTick>
 8005708:	0002      	movs	r2, r0
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e272      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005716:	4b47      	ldr	r3, [pc, #284]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2202      	movs	r2, #2
 800571c:	4013      	ands	r3, r2
 800571e:	d1f1      	bne.n	8005704 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2208      	movs	r2, #8
 8005726:	4013      	ands	r3, r2
 8005728:	d036      	beq.n	8005798 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d019      	beq.n	8005766 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005732:	4b40      	ldr	r3, [pc, #256]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005736:	4b3f      	ldr	r3, [pc, #252]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005738:	2101      	movs	r1, #1
 800573a:	430a      	orrs	r2, r1
 800573c:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573e:	f7ff fc89 	bl	8005054 <HAL_GetTick>
 8005742:	0003      	movs	r3, r0
 8005744:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005748:	f7ff fc84 	bl	8005054 <HAL_GetTick>
 800574c:	0002      	movs	r2, r0
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b02      	cmp	r3, #2
 8005754:	d901      	bls.n	800575a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e250      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800575a:	4b36      	ldr	r3, [pc, #216]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	2202      	movs	r2, #2
 8005760:	4013      	ands	r3, r2
 8005762:	d0f1      	beq.n	8005748 <HAL_RCC_OscConfig+0x24c>
 8005764:	e018      	b.n	8005798 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005766:	4b33      	ldr	r3, [pc, #204]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800576a:	4b32      	ldr	r3, [pc, #200]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800576c:	2101      	movs	r1, #1
 800576e:	438a      	bics	r2, r1
 8005770:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005772:	f7ff fc6f 	bl	8005054 <HAL_GetTick>
 8005776:	0003      	movs	r3, r0
 8005778:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800577c:	f7ff fc6a 	bl	8005054 <HAL_GetTick>
 8005780:	0002      	movs	r2, r0
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e236      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800578e:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	2202      	movs	r2, #2
 8005794:	4013      	ands	r3, r2
 8005796:	d1f1      	bne.n	800577c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2204      	movs	r2, #4
 800579e:	4013      	ands	r3, r2
 80057a0:	d100      	bne.n	80057a4 <HAL_RCC_OscConfig+0x2a8>
 80057a2:	e0b5      	b.n	8005910 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057a4:	201f      	movs	r0, #31
 80057a6:	183b      	adds	r3, r7, r0
 80057a8:	2200      	movs	r2, #0
 80057aa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057ac:	4b21      	ldr	r3, [pc, #132]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80057ae:	69da      	ldr	r2, [r3, #28]
 80057b0:	2380      	movs	r3, #128	@ 0x80
 80057b2:	055b      	lsls	r3, r3, #21
 80057b4:	4013      	ands	r3, r2
 80057b6:	d110      	bne.n	80057da <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80057be:	2180      	movs	r1, #128	@ 0x80
 80057c0:	0549      	lsls	r1, r1, #21
 80057c2:	430a      	orrs	r2, r1
 80057c4:	61da      	str	r2, [r3, #28]
 80057c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 80057c8:	69da      	ldr	r2, [r3, #28]
 80057ca:	2380      	movs	r3, #128	@ 0x80
 80057cc:	055b      	lsls	r3, r3, #21
 80057ce:	4013      	ands	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057d4:	183b      	adds	r3, r7, r0
 80057d6:	2201      	movs	r2, #1
 80057d8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057da:	4b19      	ldr	r3, [pc, #100]	@ (8005840 <HAL_RCC_OscConfig+0x344>)
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	2380      	movs	r3, #128	@ 0x80
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	4013      	ands	r3, r2
 80057e4:	d11a      	bne.n	800581c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057e6:	4b16      	ldr	r3, [pc, #88]	@ (8005840 <HAL_RCC_OscConfig+0x344>)
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	4b15      	ldr	r3, [pc, #84]	@ (8005840 <HAL_RCC_OscConfig+0x344>)
 80057ec:	2180      	movs	r1, #128	@ 0x80
 80057ee:	0049      	lsls	r1, r1, #1
 80057f0:	430a      	orrs	r2, r1
 80057f2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057f4:	f7ff fc2e 	bl	8005054 <HAL_GetTick>
 80057f8:	0003      	movs	r3, r0
 80057fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057fe:	f7ff fc29 	bl	8005054 <HAL_GetTick>
 8005802:	0002      	movs	r2, r0
 8005804:	69bb      	ldr	r3, [r7, #24]
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b64      	cmp	r3, #100	@ 0x64
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e1f5      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005810:	4b0b      	ldr	r3, [pc, #44]	@ (8005840 <HAL_RCC_OscConfig+0x344>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	2380      	movs	r3, #128	@ 0x80
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	4013      	ands	r3, r2
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d10f      	bne.n	8005844 <HAL_RCC_OscConfig+0x348>
 8005824:	4b03      	ldr	r3, [pc, #12]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	4b02      	ldr	r3, [pc, #8]	@ (8005834 <HAL_RCC_OscConfig+0x338>)
 800582a:	2101      	movs	r1, #1
 800582c:	430a      	orrs	r2, r1
 800582e:	621a      	str	r2, [r3, #32]
 8005830:	e036      	b.n	80058a0 <HAL_RCC_OscConfig+0x3a4>
 8005832:	46c0      	nop			@ (mov r8, r8)
 8005834:	40021000 	.word	0x40021000
 8005838:	fffeffff 	.word	0xfffeffff
 800583c:	fffbffff 	.word	0xfffbffff
 8005840:	40007000 	.word	0x40007000
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10c      	bne.n	8005866 <HAL_RCC_OscConfig+0x36a>
 800584c:	4bca      	ldr	r3, [pc, #808]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800584e:	6a1a      	ldr	r2, [r3, #32]
 8005850:	4bc9      	ldr	r3, [pc, #804]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005852:	2101      	movs	r1, #1
 8005854:	438a      	bics	r2, r1
 8005856:	621a      	str	r2, [r3, #32]
 8005858:	4bc7      	ldr	r3, [pc, #796]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800585a:	6a1a      	ldr	r2, [r3, #32]
 800585c:	4bc6      	ldr	r3, [pc, #792]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800585e:	2104      	movs	r1, #4
 8005860:	438a      	bics	r2, r1
 8005862:	621a      	str	r2, [r3, #32]
 8005864:	e01c      	b.n	80058a0 <HAL_RCC_OscConfig+0x3a4>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	2b05      	cmp	r3, #5
 800586c:	d10c      	bne.n	8005888 <HAL_RCC_OscConfig+0x38c>
 800586e:	4bc2      	ldr	r3, [pc, #776]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005870:	6a1a      	ldr	r2, [r3, #32]
 8005872:	4bc1      	ldr	r3, [pc, #772]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005874:	2104      	movs	r1, #4
 8005876:	430a      	orrs	r2, r1
 8005878:	621a      	str	r2, [r3, #32]
 800587a:	4bbf      	ldr	r3, [pc, #764]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800587c:	6a1a      	ldr	r2, [r3, #32]
 800587e:	4bbe      	ldr	r3, [pc, #760]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005880:	2101      	movs	r1, #1
 8005882:	430a      	orrs	r2, r1
 8005884:	621a      	str	r2, [r3, #32]
 8005886:	e00b      	b.n	80058a0 <HAL_RCC_OscConfig+0x3a4>
 8005888:	4bbb      	ldr	r3, [pc, #748]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800588a:	6a1a      	ldr	r2, [r3, #32]
 800588c:	4bba      	ldr	r3, [pc, #744]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800588e:	2101      	movs	r1, #1
 8005890:	438a      	bics	r2, r1
 8005892:	621a      	str	r2, [r3, #32]
 8005894:	4bb8      	ldr	r3, [pc, #736]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005896:	6a1a      	ldr	r2, [r3, #32]
 8005898:	4bb7      	ldr	r3, [pc, #732]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800589a:	2104      	movs	r1, #4
 800589c:	438a      	bics	r2, r1
 800589e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d014      	beq.n	80058d2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058a8:	f7ff fbd4 	bl	8005054 <HAL_GetTick>
 80058ac:	0003      	movs	r3, r0
 80058ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058b0:	e009      	b.n	80058c6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058b2:	f7ff fbcf 	bl	8005054 <HAL_GetTick>
 80058b6:	0002      	movs	r2, r0
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	4aaf      	ldr	r2, [pc, #700]	@ (8005b7c <HAL_RCC_OscConfig+0x680>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e19a      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c6:	4bac      	ldr	r3, [pc, #688]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	2202      	movs	r2, #2
 80058cc:	4013      	ands	r3, r2
 80058ce:	d0f0      	beq.n	80058b2 <HAL_RCC_OscConfig+0x3b6>
 80058d0:	e013      	b.n	80058fa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058d2:	f7ff fbbf 	bl	8005054 <HAL_GetTick>
 80058d6:	0003      	movs	r3, r0
 80058d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058da:	e009      	b.n	80058f0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80058dc:	f7ff fbba 	bl	8005054 <HAL_GetTick>
 80058e0:	0002      	movs	r2, r0
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	4aa5      	ldr	r2, [pc, #660]	@ (8005b7c <HAL_RCC_OscConfig+0x680>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e185      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	2202      	movs	r2, #2
 80058f6:	4013      	ands	r3, r2
 80058f8:	d1f0      	bne.n	80058dc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058fa:	231f      	movs	r3, #31
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d105      	bne.n	8005910 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005904:	4b9c      	ldr	r3, [pc, #624]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	4b9b      	ldr	r3, [pc, #620]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800590a:	499d      	ldr	r1, [pc, #628]	@ (8005b80 <HAL_RCC_OscConfig+0x684>)
 800590c:	400a      	ands	r2, r1
 800590e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2210      	movs	r2, #16
 8005916:	4013      	ands	r3, r2
 8005918:	d063      	beq.n	80059e2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d12a      	bne.n	8005978 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005922:	4b95      	ldr	r3, [pc, #596]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005926:	4b94      	ldr	r3, [pc, #592]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005928:	2104      	movs	r1, #4
 800592a:	430a      	orrs	r2, r1
 800592c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800592e:	4b92      	ldr	r3, [pc, #584]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005932:	4b91      	ldr	r3, [pc, #580]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005934:	2101      	movs	r1, #1
 8005936:	430a      	orrs	r2, r1
 8005938:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800593a:	f7ff fb8b 	bl	8005054 <HAL_GetTick>
 800593e:	0003      	movs	r3, r0
 8005940:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005942:	e008      	b.n	8005956 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005944:	f7ff fb86 	bl	8005054 <HAL_GetTick>
 8005948:	0002      	movs	r2, r0
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	2b02      	cmp	r3, #2
 8005950:	d901      	bls.n	8005956 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8005952:	2303      	movs	r3, #3
 8005954:	e152      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8005956:	4b88      	ldr	r3, [pc, #544]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595a:	2202      	movs	r2, #2
 800595c:	4013      	ands	r3, r2
 800595e:	d0f1      	beq.n	8005944 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005960:	4b85      	ldr	r3, [pc, #532]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005964:	22f8      	movs	r2, #248	@ 0xf8
 8005966:	4393      	bics	r3, r2
 8005968:	0019      	movs	r1, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	00da      	lsls	r2, r3, #3
 8005970:	4b81      	ldr	r3, [pc, #516]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005972:	430a      	orrs	r2, r1
 8005974:	635a      	str	r2, [r3, #52]	@ 0x34
 8005976:	e034      	b.n	80059e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	695b      	ldr	r3, [r3, #20]
 800597c:	3305      	adds	r3, #5
 800597e:	d111      	bne.n	80059a4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005980:	4b7d      	ldr	r3, [pc, #500]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005984:	4b7c      	ldr	r3, [pc, #496]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005986:	2104      	movs	r1, #4
 8005988:	438a      	bics	r2, r1
 800598a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800598c:	4b7a      	ldr	r3, [pc, #488]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800598e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005990:	22f8      	movs	r2, #248	@ 0xf8
 8005992:	4393      	bics	r3, r2
 8005994:	0019      	movs	r1, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	00da      	lsls	r2, r3, #3
 800599c:	4b76      	ldr	r3, [pc, #472]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 800599e:	430a      	orrs	r2, r1
 80059a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80059a2:	e01e      	b.n	80059e2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80059a4:	4b74      	ldr	r3, [pc, #464]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059a8:	4b73      	ldr	r3, [pc, #460]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059aa:	2104      	movs	r1, #4
 80059ac:	430a      	orrs	r2, r1
 80059ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80059b0:	4b71      	ldr	r3, [pc, #452]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059b4:	4b70      	ldr	r3, [pc, #448]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059b6:	2101      	movs	r1, #1
 80059b8:	438a      	bics	r2, r1
 80059ba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059bc:	f7ff fb4a 	bl	8005054 <HAL_GetTick>
 80059c0:	0003      	movs	r3, r0
 80059c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80059c4:	e008      	b.n	80059d8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80059c6:	f7ff fb45 	bl	8005054 <HAL_GetTick>
 80059ca:	0002      	movs	r2, r0
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d901      	bls.n	80059d8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e111      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80059d8:	4b67      	ldr	r3, [pc, #412]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059dc:	2202      	movs	r2, #2
 80059de:	4013      	ands	r3, r2
 80059e0:	d1f1      	bne.n	80059c6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2220      	movs	r2, #32
 80059e8:	4013      	ands	r3, r2
 80059ea:	d05c      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80059ec:	4b62      	ldr	r3, [pc, #392]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	220c      	movs	r2, #12
 80059f2:	4013      	ands	r3, r2
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d00e      	beq.n	8005a16 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80059f8:	4b5f      	ldr	r3, [pc, #380]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	220c      	movs	r2, #12
 80059fe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d114      	bne.n	8005a2e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005a04:	4b5c      	ldr	r3, [pc, #368]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	23c0      	movs	r3, #192	@ 0xc0
 8005a0a:	025b      	lsls	r3, r3, #9
 8005a0c:	401a      	ands	r2, r3
 8005a0e:	23c0      	movs	r3, #192	@ 0xc0
 8005a10:	025b      	lsls	r3, r3, #9
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d10b      	bne.n	8005a2e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005a16:	4b58      	ldr	r3, [pc, #352]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d040      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x5a8>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d03c      	beq.n	8005aa4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e0e6      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d01b      	beq.n	8005a6e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005a36:	4b50      	ldr	r3, [pc, #320]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a3c:	2180      	movs	r1, #128	@ 0x80
 8005a3e:	0249      	lsls	r1, r1, #9
 8005a40:	430a      	orrs	r2, r1
 8005a42:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a44:	f7ff fb06 	bl	8005054 <HAL_GetTick>
 8005a48:	0003      	movs	r3, r0
 8005a4a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a4e:	f7ff fb01 	bl	8005054 <HAL_GetTick>
 8005a52:	0002      	movs	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e0cd      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005a60:	4b45      	ldr	r3, [pc, #276]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x552>
 8005a6c:	e01b      	b.n	8005aa6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005a6e:	4b42      	ldr	r3, [pc, #264]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a72:	4b41      	ldr	r3, [pc, #260]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a74:	4943      	ldr	r1, [pc, #268]	@ (8005b84 <HAL_RCC_OscConfig+0x688>)
 8005a76:	400a      	ands	r2, r1
 8005a78:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a7a:	f7ff faeb 	bl	8005054 <HAL_GetTick>
 8005a7e:	0003      	movs	r3, r0
 8005a80:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a84:	f7ff fae6 	bl	8005054 <HAL_GetTick>
 8005a88:	0002      	movs	r2, r0
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e0b2      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005a96:	4b38      	ldr	r3, [pc, #224]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005a98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a9a:	2380      	movs	r3, #128	@ 0x80
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d1f0      	bne.n	8005a84 <HAL_RCC_OscConfig+0x588>
 8005aa2:	e000      	b.n	8005aa6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005aa4:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d100      	bne.n	8005ab0 <HAL_RCC_OscConfig+0x5b4>
 8005aae:	e0a4      	b.n	8005bfa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ab0:	4b31      	ldr	r3, [pc, #196]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	220c      	movs	r2, #12
 8005ab6:	4013      	ands	r3, r2
 8005ab8:	2b08      	cmp	r3, #8
 8005aba:	d100      	bne.n	8005abe <HAL_RCC_OscConfig+0x5c2>
 8005abc:	e078      	b.n	8005bb0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d14c      	bne.n	8005b60 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	4b2b      	ldr	r3, [pc, #172]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005acc:	492e      	ldr	r1, [pc, #184]	@ (8005b88 <HAL_RCC_OscConfig+0x68c>)
 8005ace:	400a      	ands	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad2:	f7ff fabf 	bl	8005054 <HAL_GetTick>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005adc:	f7ff faba 	bl	8005054 <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e086      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aee:	4b22      	ldr	r3, [pc, #136]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	2380      	movs	r3, #128	@ 0x80
 8005af4:	049b      	lsls	r3, r3, #18
 8005af6:	4013      	ands	r3, r2
 8005af8:	d1f0      	bne.n	8005adc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005afa:	4b1f      	ldr	r3, [pc, #124]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afe:	220f      	movs	r2, #15
 8005b00:	4393      	bics	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b08:	4b1b      	ldr	r3, [pc, #108]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a1e      	ldr	r2, [pc, #120]	@ (8005b8c <HAL_RCC_OscConfig+0x690>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	431a      	orrs	r2, r3
 8005b22:	4b15      	ldr	r3, [pc, #84]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b24:	430a      	orrs	r2, r1
 8005b26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b28:	4b13      	ldr	r3, [pc, #76]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b2e:	2180      	movs	r1, #128	@ 0x80
 8005b30:	0449      	lsls	r1, r1, #17
 8005b32:	430a      	orrs	r2, r1
 8005b34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b36:	f7ff fa8d 	bl	8005054 <HAL_GetTick>
 8005b3a:	0003      	movs	r3, r0
 8005b3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b3e:	e008      	b.n	8005b52 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b40:	f7ff fa88 	bl	8005054 <HAL_GetTick>
 8005b44:	0002      	movs	r2, r0
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	1ad3      	subs	r3, r2, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d901      	bls.n	8005b52 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e054      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b52:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	2380      	movs	r3, #128	@ 0x80
 8005b58:	049b      	lsls	r3, r3, #18
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	d0f0      	beq.n	8005b40 <HAL_RCC_OscConfig+0x644>
 8005b5e:	e04c      	b.n	8005bfa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	4b04      	ldr	r3, [pc, #16]	@ (8005b78 <HAL_RCC_OscConfig+0x67c>)
 8005b66:	4908      	ldr	r1, [pc, #32]	@ (8005b88 <HAL_RCC_OscConfig+0x68c>)
 8005b68:	400a      	ands	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6c:	f7ff fa72 	bl	8005054 <HAL_GetTick>
 8005b70:	0003      	movs	r3, r0
 8005b72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b74:	e015      	b.n	8005ba2 <HAL_RCC_OscConfig+0x6a6>
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	00001388 	.word	0x00001388
 8005b80:	efffffff 	.word	0xefffffff
 8005b84:	fffeffff 	.word	0xfffeffff
 8005b88:	feffffff 	.word	0xfeffffff
 8005b8c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b90:	f7ff fa60 	bl	8005054 <HAL_GetTick>
 8005b94:	0002      	movs	r2, r0
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e02c      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba2:	4b18      	ldr	r3, [pc, #96]	@ (8005c04 <HAL_RCC_OscConfig+0x708>)
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	2380      	movs	r3, #128	@ 0x80
 8005ba8:	049b      	lsls	r3, r3, #18
 8005baa:	4013      	ands	r3, r2
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x694>
 8005bae:	e024      	b.n	8005bfa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e01f      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005bbc:	4b11      	ldr	r3, [pc, #68]	@ (8005c04 <HAL_RCC_OscConfig+0x708>)
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005bc2:	4b10      	ldr	r3, [pc, #64]	@ (8005c04 <HAL_RCC_OscConfig+0x708>)
 8005bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	23c0      	movs	r3, #192	@ 0xc0
 8005bcc:	025b      	lsls	r3, r3, #9
 8005bce:	401a      	ands	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d10e      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	220f      	movs	r2, #15
 8005bdc:	401a      	ands	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005be6:	697a      	ldr	r2, [r7, #20]
 8005be8:	23f0      	movs	r3, #240	@ 0xf0
 8005bea:	039b      	lsls	r3, r3, #14
 8005bec:	401a      	ands	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e000      	b.n	8005bfc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	b008      	add	sp, #32
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	40021000 	.word	0x40021000

08005c08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0bf      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c1c:	4b61      	ldr	r3, [pc, #388]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2201      	movs	r2, #1
 8005c22:	4013      	ands	r3, r2
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d911      	bls.n	8005c4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	4393      	bics	r3, r2
 8005c32:	0019      	movs	r1, r3
 8005c34:	4b5b      	ldr	r3, [pc, #364]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c3c:	4b59      	ldr	r3, [pc, #356]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	4013      	ands	r3, r2
 8005c44:	683a      	ldr	r2, [r7, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d001      	beq.n	8005c4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e0a6      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2202      	movs	r2, #2
 8005c54:	4013      	ands	r3, r2
 8005c56:	d015      	beq.n	8005c84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d006      	beq.n	8005c70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005c62:	4b51      	ldr	r3, [pc, #324]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	4b50      	ldr	r3, [pc, #320]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005c68:	21e0      	movs	r1, #224	@ 0xe0
 8005c6a:	00c9      	lsls	r1, r1, #3
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c70:	4b4d      	ldr	r3, [pc, #308]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	22f0      	movs	r2, #240	@ 0xf0
 8005c76:	4393      	bics	r3, r2
 8005c78:	0019      	movs	r1, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	4b4a      	ldr	r3, [pc, #296]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d04c      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d107      	bne.n	8005ca6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	4b44      	ldr	r3, [pc, #272]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	2380      	movs	r3, #128	@ 0x80
 8005c9c:	029b      	lsls	r3, r3, #10
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d120      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e07a      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d107      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cae:	4b3e      	ldr	r3, [pc, #248]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	2380      	movs	r3, #128	@ 0x80
 8005cb4:	049b      	lsls	r3, r3, #18
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	d114      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005cba:	2301      	movs	r3, #1
 8005cbc:	e06e      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d107      	bne.n	8005cd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005cc6:	4b38      	ldr	r3, [pc, #224]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005cc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cca:	2380      	movs	r3, #128	@ 0x80
 8005ccc:	029b      	lsls	r3, r3, #10
 8005cce:	4013      	ands	r3, r2
 8005cd0:	d108      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e062      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cd6:	4b34      	ldr	r3, [pc, #208]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d101      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e05b      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ce4:	4b30      	ldr	r3, [pc, #192]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2203      	movs	r2, #3
 8005cea:	4393      	bics	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cf8:	f7ff f9ac 	bl	8005054 <HAL_GetTick>
 8005cfc:	0003      	movs	r3, r0
 8005cfe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d00:	e009      	b.n	8005d16 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d02:	f7ff f9a7 	bl	8005054 <HAL_GetTick>
 8005d06:	0002      	movs	r2, r0
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	4a27      	ldr	r2, [pc, #156]	@ (8005dac <HAL_RCC_ClockConfig+0x1a4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e042      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d16:	4b24      	ldr	r3, [pc, #144]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	220c      	movs	r2, #12
 8005d1c:	401a      	ands	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d1ec      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d28:	4b1e      	ldr	r3, [pc, #120]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	4013      	ands	r3, r2
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d211      	bcs.n	8005d5a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d36:	4b1b      	ldr	r3, [pc, #108]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	4393      	bics	r3, r2
 8005d3e:	0019      	movs	r1, r3
 8005d40:	4b18      	ldr	r3, [pc, #96]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d48:	4b16      	ldr	r3, [pc, #88]	@ (8005da4 <HAL_RCC_ClockConfig+0x19c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4013      	ands	r3, r2
 8005d50:	683a      	ldr	r2, [r7, #0]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d001      	beq.n	8005d5a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e020      	b.n	8005d9c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	4013      	ands	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005d64:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4a11      	ldr	r2, [pc, #68]	@ (8005db0 <HAL_RCC_ClockConfig+0x1a8>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	0019      	movs	r1, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	4b0d      	ldr	r3, [pc, #52]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005d74:	430a      	orrs	r2, r1
 8005d76:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005d78:	f000 f820 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8005d7c:	0001      	movs	r1, r0
 8005d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <HAL_RCC_ClockConfig+0x1a0>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	091b      	lsrs	r3, r3, #4
 8005d84:	220f      	movs	r2, #15
 8005d86:	4013      	ands	r3, r2
 8005d88:	4a0a      	ldr	r2, [pc, #40]	@ (8005db4 <HAL_RCC_ClockConfig+0x1ac>)
 8005d8a:	5cd3      	ldrb	r3, [r2, r3]
 8005d8c:	000a      	movs	r2, r1
 8005d8e:	40da      	lsrs	r2, r3
 8005d90:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <HAL_RCC_ClockConfig+0x1b0>)
 8005d92:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005d94:	2000      	movs	r0, #0
 8005d96:	f7ff f917 	bl	8004fc8 <HAL_InitTick>
  
  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	0018      	movs	r0, r3
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	b004      	add	sp, #16
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	40022000 	.word	0x40022000
 8005da8:	40021000 	.word	0x40021000
 8005dac:	00001388 	.word	0x00001388
 8005db0:	fffff8ff 	.word	0xfffff8ff
 8005db4:	0800a294 	.word	0x0800a294
 8005db8:	20000000 	.word	0x20000000

08005dbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
 8005dce:	2300      	movs	r3, #0
 8005dd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005dd6:	4b2d      	ldr	r3, [pc, #180]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	220c      	movs	r2, #12
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b0c      	cmp	r3, #12
 8005de4:	d046      	beq.n	8005e74 <HAL_RCC_GetSysClockFreq+0xb8>
 8005de6:	d848      	bhi.n	8005e7a <HAL_RCC_GetSysClockFreq+0xbe>
 8005de8:	2b04      	cmp	r3, #4
 8005dea:	d002      	beq.n	8005df2 <HAL_RCC_GetSysClockFreq+0x36>
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d003      	beq.n	8005df8 <HAL_RCC_GetSysClockFreq+0x3c>
 8005df0:	e043      	b.n	8005e7a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005df2:	4b27      	ldr	r3, [pc, #156]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005df4:	613b      	str	r3, [r7, #16]
      break;
 8005df6:	e043      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	0c9b      	lsrs	r3, r3, #18
 8005dfc:	220f      	movs	r2, #15
 8005dfe:	4013      	ands	r3, r2
 8005e00:	4a24      	ldr	r2, [pc, #144]	@ (8005e94 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005e02:	5cd3      	ldrb	r3, [r2, r3]
 8005e04:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005e06:	4b21      	ldr	r3, [pc, #132]	@ (8005e8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8005e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e0a:	220f      	movs	r2, #15
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	4a22      	ldr	r2, [pc, #136]	@ (8005e98 <HAL_RCC_GetSysClockFreq+0xdc>)
 8005e10:	5cd3      	ldrb	r3, [r2, r3]
 8005e12:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	23c0      	movs	r3, #192	@ 0xc0
 8005e18:	025b      	lsls	r3, r3, #9
 8005e1a:	401a      	ands	r2, r3
 8005e1c:	2380      	movs	r3, #128	@ 0x80
 8005e1e:	025b      	lsls	r3, r3, #9
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d109      	bne.n	8005e38 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e24:	68b9      	ldr	r1, [r7, #8]
 8005e26:	481a      	ldr	r0, [pc, #104]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e28:	f7fa f978 	bl	800011c <__udivsi3>
 8005e2c:	0003      	movs	r3, r0
 8005e2e:	001a      	movs	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4353      	muls	r3, r2
 8005e34:	617b      	str	r3, [r7, #20]
 8005e36:	e01a      	b.n	8005e6e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	23c0      	movs	r3, #192	@ 0xc0
 8005e3c:	025b      	lsls	r3, r3, #9
 8005e3e:	401a      	ands	r2, r3
 8005e40:	23c0      	movs	r3, #192	@ 0xc0
 8005e42:	025b      	lsls	r3, r3, #9
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d109      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e48:	68b9      	ldr	r1, [r7, #8]
 8005e4a:	4814      	ldr	r0, [pc, #80]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8005e4c:	f7fa f966 	bl	800011c <__udivsi3>
 8005e50:	0003      	movs	r3, r0
 8005e52:	001a      	movs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4353      	muls	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	480c      	ldr	r0, [pc, #48]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e60:	f7fa f95c 	bl	800011c <__udivsi3>
 8005e64:	0003      	movs	r3, r0
 8005e66:	001a      	movs	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4353      	muls	r3, r2
 8005e6c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	613b      	str	r3, [r7, #16]
      break;
 8005e72:	e005      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005e74:	4b09      	ldr	r3, [pc, #36]	@ (8005e9c <HAL_RCC_GetSysClockFreq+0xe0>)
 8005e76:	613b      	str	r3, [r7, #16]
      break;
 8005e78:	e002      	b.n	8005e80 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005e7a:	4b05      	ldr	r3, [pc, #20]	@ (8005e90 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005e7c:	613b      	str	r3, [r7, #16]
      break;
 8005e7e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005e80:	693b      	ldr	r3, [r7, #16]
}
 8005e82:	0018      	movs	r0, r3
 8005e84:	46bd      	mov	sp, r7
 8005e86:	b006      	add	sp, #24
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	007a1200 	.word	0x007a1200
 8005e94:	0800a2ac 	.word	0x0800a2ac
 8005e98:	0800a2bc 	.word	0x0800a2bc
 8005e9c:	02dc6c00 	.word	0x02dc6c00

08005ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ea4:	4b02      	ldr	r3, [pc, #8]	@ (8005eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
}
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	20000000 	.word	0x20000000

08005eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005eb8:	f7ff fff2 	bl	8005ea0 <HAL_RCC_GetHCLKFreq>
 8005ebc:	0001      	movs	r1, r0
 8005ebe:	4b06      	ldr	r3, [pc, #24]	@ (8005ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	2207      	movs	r2, #7
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	4a04      	ldr	r2, [pc, #16]	@ (8005edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eca:	5cd3      	ldrb	r3, [r2, r3]
 8005ecc:	40d9      	lsrs	r1, r3
 8005ece:	000b      	movs	r3, r1
}    
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	40021000 	.word	0x40021000
 8005edc:	0800a2a4 	.word	0x0800a2a4

08005ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005eec:	2300      	movs	r3, #0
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	2380      	movs	r3, #128	@ 0x80
 8005ef6:	025b      	lsls	r3, r3, #9
 8005ef8:	4013      	ands	r3, r2
 8005efa:	d100      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005efc:	e08e      	b.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005efe:	2017      	movs	r0, #23
 8005f00:	183b      	adds	r3, r7, r0
 8005f02:	2200      	movs	r2, #0
 8005f04:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f06:	4b6e      	ldr	r3, [pc, #440]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	2380      	movs	r3, #128	@ 0x80
 8005f0c:	055b      	lsls	r3, r3, #21
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d110      	bne.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f12:	4b6b      	ldr	r3, [pc, #428]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f14:	69da      	ldr	r2, [r3, #28]
 8005f16:	4b6a      	ldr	r3, [pc, #424]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f18:	2180      	movs	r1, #128	@ 0x80
 8005f1a:	0549      	lsls	r1, r1, #21
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	61da      	str	r2, [r3, #28]
 8005f20:	4b67      	ldr	r3, [pc, #412]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	2380      	movs	r3, #128	@ 0x80
 8005f26:	055b      	lsls	r3, r3, #21
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f2e:	183b      	adds	r3, r7, r0
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f34:	4b63      	ldr	r3, [pc, #396]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	2380      	movs	r3, #128	@ 0x80
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d11a      	bne.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f40:	4b60      	ldr	r3, [pc, #384]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	4b5f      	ldr	r3, [pc, #380]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005f46:	2180      	movs	r1, #128	@ 0x80
 8005f48:	0049      	lsls	r1, r1, #1
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f4e:	f7ff f881 	bl	8005054 <HAL_GetTick>
 8005f52:	0003      	movs	r3, r0
 8005f54:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f56:	e008      	b.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f58:	f7ff f87c 	bl	8005054 <HAL_GetTick>
 8005f5c:	0002      	movs	r2, r0
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	2b64      	cmp	r3, #100	@ 0x64
 8005f64:	d901      	bls.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e0a6      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f6a:	4b56      	ldr	r3, [pc, #344]	@ (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	2380      	movs	r3, #128	@ 0x80
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0f0      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005f76:	4b52      	ldr	r3, [pc, #328]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f78:	6a1a      	ldr	r2, [r3, #32]
 8005f7a:	23c0      	movs	r3, #192	@ 0xc0
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4013      	ands	r3, r2
 8005f80:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d034      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	23c0      	movs	r3, #192	@ 0xc0
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4013      	ands	r3, r2
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d02c      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f98:	4b49      	ldr	r3, [pc, #292]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005f9e:	4013      	ands	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005fa2:	4b47      	ldr	r3, [pc, #284]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fa4:	6a1a      	ldr	r2, [r3, #32]
 8005fa6:	4b46      	ldr	r3, [pc, #280]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fa8:	2180      	movs	r1, #128	@ 0x80
 8005faa:	0249      	lsls	r1, r1, #9
 8005fac:	430a      	orrs	r2, r1
 8005fae:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005fb0:	4b43      	ldr	r3, [pc, #268]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fb2:	6a1a      	ldr	r2, [r3, #32]
 8005fb4:	4b42      	ldr	r3, [pc, #264]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fb6:	4945      	ldr	r1, [pc, #276]	@ (80060cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005fb8:	400a      	ands	r2, r1
 8005fba:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005fbc:	4b40      	ldr	r3, [pc, #256]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fca:	f7ff f843 	bl	8005054 <HAL_GetTick>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fd2:	e009      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fd4:	f7ff f83e 	bl	8005054 <HAL_GetTick>
 8005fd8:	0002      	movs	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	4a3c      	ldr	r2, [pc, #240]	@ (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d901      	bls.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	e067      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe8:	4b35      	ldr	r3, [pc, #212]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	2202      	movs	r2, #2
 8005fee:	4013      	ands	r3, r2
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ff2:	4b33      	ldr	r3, [pc, #204]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	4a34      	ldr	r2, [pc, #208]	@ (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	0019      	movs	r1, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	4b2f      	ldr	r3, [pc, #188]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006002:	430a      	orrs	r2, r1
 8006004:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006006:	2317      	movs	r3, #23
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d105      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006010:	4b2b      	ldr	r3, [pc, #172]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	4b2a      	ldr	r3, [pc, #168]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006016:	492f      	ldr	r1, [pc, #188]	@ (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8006018:	400a      	ands	r2, r1
 800601a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2201      	movs	r2, #1
 8006022:	4013      	ands	r3, r2
 8006024:	d009      	beq.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006026:	4b26      	ldr	r3, [pc, #152]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800602a:	2203      	movs	r2, #3
 800602c:	4393      	bics	r3, r2
 800602e:	0019      	movs	r1, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	4b22      	ldr	r3, [pc, #136]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006036:	430a      	orrs	r2, r1
 8006038:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2202      	movs	r2, #2
 8006040:	4013      	ands	r3, r2
 8006042:	d009      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006044:	4b1e      	ldr	r3, [pc, #120]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006048:	4a23      	ldr	r2, [pc, #140]	@ (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800604a:	4013      	ands	r3, r2
 800604c:	0019      	movs	r1, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006054:	430a      	orrs	r2, r1
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2220      	movs	r2, #32
 800605e:	4013      	ands	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006062:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006066:	2210      	movs	r2, #16
 8006068:	4393      	bics	r3, r2
 800606a:	0019      	movs	r1, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	4b13      	ldr	r3, [pc, #76]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006072:	430a      	orrs	r2, r1
 8006074:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	2380      	movs	r3, #128	@ 0x80
 800607c:	029b      	lsls	r3, r3, #10
 800607e:	4013      	ands	r3, r2
 8006080:	d009      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006082:	4b0f      	ldr	r3, [pc, #60]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006086:	2280      	movs	r2, #128	@ 0x80
 8006088:	4393      	bics	r3, r2
 800608a:	0019      	movs	r1, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	699a      	ldr	r2, [r3, #24]
 8006090:	4b0b      	ldr	r3, [pc, #44]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8006092:	430a      	orrs	r2, r1
 8006094:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	2380      	movs	r3, #128	@ 0x80
 800609c:	00db      	lsls	r3, r3, #3
 800609e:	4013      	ands	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060a2:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060a6:	2240      	movs	r2, #64	@ 0x40
 80060a8:	4393      	bics	r3, r2
 80060aa:	0019      	movs	r1, r3
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	695a      	ldr	r2, [r3, #20]
 80060b0:	4b03      	ldr	r3, [pc, #12]	@ (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80060b2:	430a      	orrs	r2, r1
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80060b6:	2300      	movs	r3, #0
}
 80060b8:	0018      	movs	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	b006      	add	sp, #24
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40021000 	.word	0x40021000
 80060c4:	40007000 	.word	0x40007000
 80060c8:	fffffcff 	.word	0xfffffcff
 80060cc:	fffeffff 	.word	0xfffeffff
 80060d0:	00001388 	.word	0x00001388
 80060d4:	efffffff 	.word	0xefffffff
 80060d8:	fffcffff 	.word	0xfffcffff

080060dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e044      	b.n	8006178 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d107      	bne.n	8006106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2278      	movs	r2, #120	@ 0x78
 80060fa:	2100      	movs	r1, #0
 80060fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0018      	movs	r0, r3
 8006102:	f7fe fdf9 	bl	8004cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2224      	movs	r2, #36	@ 0x24
 800610a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2101      	movs	r1, #1
 8006118:	438a      	bics	r2, r1
 800611a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	0018      	movs	r0, r3
 8006120:	f000 f8d0 	bl	80062c4 <UART_SetConfig>
 8006124:	0003      	movs	r3, r0
 8006126:	2b01      	cmp	r3, #1
 8006128:	d101      	bne.n	800612e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e024      	b.n	8006178 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	0018      	movs	r0, r3
 800613a:	f000 fa4b 	bl	80065d4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	490d      	ldr	r1, [pc, #52]	@ (8006180 <HAL_UART_Init+0xa4>)
 800614a:	400a      	ands	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	689a      	ldr	r2, [r3, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	212a      	movs	r1, #42	@ 0x2a
 800615a:	438a      	bics	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2101      	movs	r1, #1
 800616a:	430a      	orrs	r2, r1
 800616c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 fae3 	bl	800673c <UART_CheckIdleState>
 8006176:	0003      	movs	r3, r0
}
 8006178:	0018      	movs	r0, r3
 800617a:	46bd      	mov	sp, r7
 800617c:	b002      	add	sp, #8
 800617e:	bd80      	pop	{r7, pc}
 8006180:	ffffb7ff 	.word	0xffffb7ff

08006184 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	@ 0x28
 8006188:	af02      	add	r7, sp, #8
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	603b      	str	r3, [r7, #0]
 8006190:	1dbb      	adds	r3, r7, #6
 8006192:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006198:	2b20      	cmp	r3, #32
 800619a:	d000      	beq.n	800619e <HAL_UART_Transmit+0x1a>
 800619c:	e08c      	b.n	80062b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d003      	beq.n	80061ac <HAL_UART_Transmit+0x28>
 80061a4:	1dbb      	adds	r3, r7, #6
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e084      	b.n	80062ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	689a      	ldr	r2, [r3, #8]
 80061b4:	2380      	movs	r3, #128	@ 0x80
 80061b6:	015b      	lsls	r3, r3, #5
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d109      	bne.n	80061d0 <HAL_UART_Transmit+0x4c>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d105      	bne.n	80061d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2201      	movs	r2, #1
 80061c8:	4013      	ands	r3, r2
 80061ca:	d001      	beq.n	80061d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80061cc:	2301      	movs	r3, #1
 80061ce:	e074      	b.n	80062ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2284      	movs	r2, #132	@ 0x84
 80061d4:	2100      	movs	r1, #0
 80061d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2221      	movs	r2, #33	@ 0x21
 80061dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061de:	f7fe ff39 	bl	8005054 <HAL_GetTick>
 80061e2:	0003      	movs	r3, r0
 80061e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1dba      	adds	r2, r7, #6
 80061ea:	2150      	movs	r1, #80	@ 0x50
 80061ec:	8812      	ldrh	r2, [r2, #0]
 80061ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	1dba      	adds	r2, r7, #6
 80061f4:	2152      	movs	r1, #82	@ 0x52
 80061f6:	8812      	ldrh	r2, [r2, #0]
 80061f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	2380      	movs	r3, #128	@ 0x80
 8006200:	015b      	lsls	r3, r3, #5
 8006202:	429a      	cmp	r2, r3
 8006204:	d108      	bne.n	8006218 <HAL_UART_Transmit+0x94>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d104      	bne.n	8006218 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	e003      	b.n	8006220 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621c:	2300      	movs	r3, #0
 800621e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006220:	e02f      	b.n	8006282 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	0013      	movs	r3, r2
 800622c:	2200      	movs	r2, #0
 800622e:	2180      	movs	r1, #128	@ 0x80
 8006230:	f000 fb2c 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 8006234:	1e03      	subs	r3, r0, #0
 8006236:	d004      	beq.n	8006242 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2220      	movs	r2, #32
 800623c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e03b      	b.n	80062ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	881a      	ldrh	r2, [r3, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	05d2      	lsls	r2, r2, #23
 8006252:	0dd2      	lsrs	r2, r2, #23
 8006254:	b292      	uxth	r2, r2
 8006256:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	3302      	adds	r3, #2
 800625c:	61bb      	str	r3, [r7, #24]
 800625e:	e007      	b.n	8006270 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3301      	adds	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2252      	movs	r2, #82	@ 0x52
 8006274:	5a9b      	ldrh	r3, [r3, r2]
 8006276:	b29b      	uxth	r3, r3
 8006278:	3b01      	subs	r3, #1
 800627a:	b299      	uxth	r1, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2252      	movs	r2, #82	@ 0x52
 8006280:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2252      	movs	r2, #82	@ 0x52
 8006286:	5a9b      	ldrh	r3, [r3, r2]
 8006288:	b29b      	uxth	r3, r3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1c9      	bne.n	8006222 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800628e:	697a      	ldr	r2, [r7, #20]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	0013      	movs	r3, r2
 8006298:	2200      	movs	r2, #0
 800629a:	2140      	movs	r1, #64	@ 0x40
 800629c:	f000 faf6 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 80062a0:	1e03      	subs	r3, r0, #0
 80062a2:	d004      	beq.n	80062ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e005      	b.n	80062ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b008      	add	sp, #32
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062cc:	231e      	movs	r3, #30
 80062ce:	18fb      	adds	r3, r7, r3
 80062d0:	2200      	movs	r2, #0
 80062d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	431a      	orrs	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	69db      	ldr	r3, [r3, #28]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4aaf      	ldr	r2, [pc, #700]	@ (80065b0 <UART_SetConfig+0x2ec>)
 80062f4:	4013      	ands	r3, r2
 80062f6:	0019      	movs	r1, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	430a      	orrs	r2, r1
 8006300:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	4aaa      	ldr	r2, [pc, #680]	@ (80065b4 <UART_SetConfig+0x2f0>)
 800630a:	4013      	ands	r3, r2
 800630c:	0019      	movs	r1, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68da      	ldr	r2, [r3, #12]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a1b      	ldr	r3, [r3, #32]
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	4aa1      	ldr	r2, [pc, #644]	@ (80065b8 <UART_SetConfig+0x2f4>)
 8006332:	4013      	ands	r3, r2
 8006334:	0019      	movs	r1, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	430a      	orrs	r2, r1
 800633e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a9d      	ldr	r2, [pc, #628]	@ (80065bc <UART_SetConfig+0x2f8>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d127      	bne.n	800639a <UART_SetConfig+0xd6>
 800634a:	4b9d      	ldr	r3, [pc, #628]	@ (80065c0 <UART_SetConfig+0x2fc>)
 800634c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800634e:	2203      	movs	r2, #3
 8006350:	4013      	ands	r3, r2
 8006352:	2b03      	cmp	r3, #3
 8006354:	d00d      	beq.n	8006372 <UART_SetConfig+0xae>
 8006356:	d81b      	bhi.n	8006390 <UART_SetConfig+0xcc>
 8006358:	2b02      	cmp	r3, #2
 800635a:	d014      	beq.n	8006386 <UART_SetConfig+0xc2>
 800635c:	d818      	bhi.n	8006390 <UART_SetConfig+0xcc>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <UART_SetConfig+0xa4>
 8006362:	2b01      	cmp	r3, #1
 8006364:	d00a      	beq.n	800637c <UART_SetConfig+0xb8>
 8006366:	e013      	b.n	8006390 <UART_SetConfig+0xcc>
 8006368:	231f      	movs	r3, #31
 800636a:	18fb      	adds	r3, r7, r3
 800636c:	2200      	movs	r2, #0
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e065      	b.n	800643e <UART_SetConfig+0x17a>
 8006372:	231f      	movs	r3, #31
 8006374:	18fb      	adds	r3, r7, r3
 8006376:	2202      	movs	r2, #2
 8006378:	701a      	strb	r2, [r3, #0]
 800637a:	e060      	b.n	800643e <UART_SetConfig+0x17a>
 800637c:	231f      	movs	r3, #31
 800637e:	18fb      	adds	r3, r7, r3
 8006380:	2204      	movs	r2, #4
 8006382:	701a      	strb	r2, [r3, #0]
 8006384:	e05b      	b.n	800643e <UART_SetConfig+0x17a>
 8006386:	231f      	movs	r3, #31
 8006388:	18fb      	adds	r3, r7, r3
 800638a:	2208      	movs	r2, #8
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	e056      	b.n	800643e <UART_SetConfig+0x17a>
 8006390:	231f      	movs	r3, #31
 8006392:	18fb      	adds	r3, r7, r3
 8006394:	2210      	movs	r2, #16
 8006396:	701a      	strb	r2, [r3, #0]
 8006398:	e051      	b.n	800643e <UART_SetConfig+0x17a>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a89      	ldr	r2, [pc, #548]	@ (80065c4 <UART_SetConfig+0x300>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d134      	bne.n	800640e <UART_SetConfig+0x14a>
 80063a4:	4b86      	ldr	r3, [pc, #536]	@ (80065c0 <UART_SetConfig+0x2fc>)
 80063a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063a8:	23c0      	movs	r3, #192	@ 0xc0
 80063aa:	029b      	lsls	r3, r3, #10
 80063ac:	4013      	ands	r3, r2
 80063ae:	22c0      	movs	r2, #192	@ 0xc0
 80063b0:	0292      	lsls	r2, r2, #10
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d017      	beq.n	80063e6 <UART_SetConfig+0x122>
 80063b6:	22c0      	movs	r2, #192	@ 0xc0
 80063b8:	0292      	lsls	r2, r2, #10
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d822      	bhi.n	8006404 <UART_SetConfig+0x140>
 80063be:	2280      	movs	r2, #128	@ 0x80
 80063c0:	0292      	lsls	r2, r2, #10
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d019      	beq.n	80063fa <UART_SetConfig+0x136>
 80063c6:	2280      	movs	r2, #128	@ 0x80
 80063c8:	0292      	lsls	r2, r2, #10
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d81a      	bhi.n	8006404 <UART_SetConfig+0x140>
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d004      	beq.n	80063dc <UART_SetConfig+0x118>
 80063d2:	2280      	movs	r2, #128	@ 0x80
 80063d4:	0252      	lsls	r2, r2, #9
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00a      	beq.n	80063f0 <UART_SetConfig+0x12c>
 80063da:	e013      	b.n	8006404 <UART_SetConfig+0x140>
 80063dc:	231f      	movs	r3, #31
 80063de:	18fb      	adds	r3, r7, r3
 80063e0:	2200      	movs	r2, #0
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e02b      	b.n	800643e <UART_SetConfig+0x17a>
 80063e6:	231f      	movs	r3, #31
 80063e8:	18fb      	adds	r3, r7, r3
 80063ea:	2202      	movs	r2, #2
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	e026      	b.n	800643e <UART_SetConfig+0x17a>
 80063f0:	231f      	movs	r3, #31
 80063f2:	18fb      	adds	r3, r7, r3
 80063f4:	2204      	movs	r2, #4
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e021      	b.n	800643e <UART_SetConfig+0x17a>
 80063fa:	231f      	movs	r3, #31
 80063fc:	18fb      	adds	r3, r7, r3
 80063fe:	2208      	movs	r2, #8
 8006400:	701a      	strb	r2, [r3, #0]
 8006402:	e01c      	b.n	800643e <UART_SetConfig+0x17a>
 8006404:	231f      	movs	r3, #31
 8006406:	18fb      	adds	r3, r7, r3
 8006408:	2210      	movs	r2, #16
 800640a:	701a      	strb	r2, [r3, #0]
 800640c:	e017      	b.n	800643e <UART_SetConfig+0x17a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a6d      	ldr	r2, [pc, #436]	@ (80065c8 <UART_SetConfig+0x304>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d104      	bne.n	8006422 <UART_SetConfig+0x15e>
 8006418:	231f      	movs	r3, #31
 800641a:	18fb      	adds	r3, r7, r3
 800641c:	2200      	movs	r2, #0
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e00d      	b.n	800643e <UART_SetConfig+0x17a>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a69      	ldr	r2, [pc, #420]	@ (80065cc <UART_SetConfig+0x308>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d104      	bne.n	8006436 <UART_SetConfig+0x172>
 800642c:	231f      	movs	r3, #31
 800642e:	18fb      	adds	r3, r7, r3
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e003      	b.n	800643e <UART_SetConfig+0x17a>
 8006436:	231f      	movs	r3, #31
 8006438:	18fb      	adds	r3, r7, r3
 800643a:	2210      	movs	r2, #16
 800643c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	2380      	movs	r3, #128	@ 0x80
 8006444:	021b      	lsls	r3, r3, #8
 8006446:	429a      	cmp	r2, r3
 8006448:	d15c      	bne.n	8006504 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 800644a:	231f      	movs	r3, #31
 800644c:	18fb      	adds	r3, r7, r3
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	2b08      	cmp	r3, #8
 8006452:	d015      	beq.n	8006480 <UART_SetConfig+0x1bc>
 8006454:	dc18      	bgt.n	8006488 <UART_SetConfig+0x1c4>
 8006456:	2b04      	cmp	r3, #4
 8006458:	d00d      	beq.n	8006476 <UART_SetConfig+0x1b2>
 800645a:	dc15      	bgt.n	8006488 <UART_SetConfig+0x1c4>
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <UART_SetConfig+0x1a2>
 8006460:	2b02      	cmp	r3, #2
 8006462:	d005      	beq.n	8006470 <UART_SetConfig+0x1ac>
 8006464:	e010      	b.n	8006488 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006466:	f7ff fd25 	bl	8005eb4 <HAL_RCC_GetPCLK1Freq>
 800646a:	0003      	movs	r3, r0
 800646c:	61bb      	str	r3, [r7, #24]
        break;
 800646e:	e012      	b.n	8006496 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b57      	ldr	r3, [pc, #348]	@ (80065d0 <UART_SetConfig+0x30c>)
 8006472:	61bb      	str	r3, [r7, #24]
        break;
 8006474:	e00f      	b.n	8006496 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7ff fca1 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 800647a:	0003      	movs	r3, r0
 800647c:	61bb      	str	r3, [r7, #24]
        break;
 800647e:	e00a      	b.n	8006496 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006480:	2380      	movs	r3, #128	@ 0x80
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	61bb      	str	r3, [r7, #24]
        break;
 8006486:	e006      	b.n	8006496 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800648c:	231e      	movs	r3, #30
 800648e:	18fb      	adds	r3, r7, r3
 8006490:	2201      	movs	r2, #1
 8006492:	701a      	strb	r2, [r3, #0]
        break;
 8006494:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d100      	bne.n	800649e <UART_SetConfig+0x1da>
 800649c:	e07a      	b.n	8006594 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	005a      	lsls	r2, r3, #1
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	085b      	lsrs	r3, r3, #1
 80064a8:	18d2      	adds	r2, r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	0019      	movs	r1, r3
 80064b0:	0010      	movs	r0, r2
 80064b2:	f7f9 fe33 	bl	800011c <__udivsi3>
 80064b6:	0003      	movs	r3, r0
 80064b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2b0f      	cmp	r3, #15
 80064be:	d91c      	bls.n	80064fa <UART_SetConfig+0x236>
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	2380      	movs	r3, #128	@ 0x80
 80064c4:	025b      	lsls	r3, r3, #9
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d217      	bcs.n	80064fa <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	200e      	movs	r0, #14
 80064d0:	183b      	adds	r3, r7, r0
 80064d2:	210f      	movs	r1, #15
 80064d4:	438a      	bics	r2, r1
 80064d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	085b      	lsrs	r3, r3, #1
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2207      	movs	r2, #7
 80064e0:	4013      	ands	r3, r2
 80064e2:	b299      	uxth	r1, r3
 80064e4:	183b      	adds	r3, r7, r0
 80064e6:	183a      	adds	r2, r7, r0
 80064e8:	8812      	ldrh	r2, [r2, #0]
 80064ea:	430a      	orrs	r2, r1
 80064ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	183a      	adds	r2, r7, r0
 80064f4:	8812      	ldrh	r2, [r2, #0]
 80064f6:	60da      	str	r2, [r3, #12]
 80064f8:	e04c      	b.n	8006594 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80064fa:	231e      	movs	r3, #30
 80064fc:	18fb      	adds	r3, r7, r3
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e047      	b.n	8006594 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006504:	231f      	movs	r3, #31
 8006506:	18fb      	adds	r3, r7, r3
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b08      	cmp	r3, #8
 800650c:	d015      	beq.n	800653a <UART_SetConfig+0x276>
 800650e:	dc18      	bgt.n	8006542 <UART_SetConfig+0x27e>
 8006510:	2b04      	cmp	r3, #4
 8006512:	d00d      	beq.n	8006530 <UART_SetConfig+0x26c>
 8006514:	dc15      	bgt.n	8006542 <UART_SetConfig+0x27e>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <UART_SetConfig+0x25c>
 800651a:	2b02      	cmp	r3, #2
 800651c:	d005      	beq.n	800652a <UART_SetConfig+0x266>
 800651e:	e010      	b.n	8006542 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006520:	f7ff fcc8 	bl	8005eb4 <HAL_RCC_GetPCLK1Freq>
 8006524:	0003      	movs	r3, r0
 8006526:	61bb      	str	r3, [r7, #24]
        break;
 8006528:	e012      	b.n	8006550 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800652a:	4b29      	ldr	r3, [pc, #164]	@ (80065d0 <UART_SetConfig+0x30c>)
 800652c:	61bb      	str	r3, [r7, #24]
        break;
 800652e:	e00f      	b.n	8006550 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006530:	f7ff fc44 	bl	8005dbc <HAL_RCC_GetSysClockFreq>
 8006534:	0003      	movs	r3, r0
 8006536:	61bb      	str	r3, [r7, #24]
        break;
 8006538:	e00a      	b.n	8006550 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800653a:	2380      	movs	r3, #128	@ 0x80
 800653c:	021b      	lsls	r3, r3, #8
 800653e:	61bb      	str	r3, [r7, #24]
        break;
 8006540:	e006      	b.n	8006550 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006546:	231e      	movs	r3, #30
 8006548:	18fb      	adds	r3, r7, r3
 800654a:	2201      	movs	r2, #1
 800654c:	701a      	strb	r2, [r3, #0]
        break;
 800654e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d01e      	beq.n	8006594 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	085a      	lsrs	r2, r3, #1
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	18d2      	adds	r2, r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	0019      	movs	r1, r3
 8006566:	0010      	movs	r0, r2
 8006568:	f7f9 fdd8 	bl	800011c <__udivsi3>
 800656c:	0003      	movs	r3, r0
 800656e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d90a      	bls.n	800658c <UART_SetConfig+0x2c8>
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	2380      	movs	r3, #128	@ 0x80
 800657a:	025b      	lsls	r3, r3, #9
 800657c:	429a      	cmp	r2, r3
 800657e:	d205      	bcs.n	800658c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	b29a      	uxth	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	e003      	b.n	8006594 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 800658c:	231e      	movs	r3, #30
 800658e:	18fb      	adds	r3, r7, r3
 8006590:	2201      	movs	r2, #1
 8006592:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80065a0:	231e      	movs	r3, #30
 80065a2:	18fb      	adds	r3, r7, r3
 80065a4:	781b      	ldrb	r3, [r3, #0]
}
 80065a6:	0018      	movs	r0, r3
 80065a8:	46bd      	mov	sp, r7
 80065aa:	b008      	add	sp, #32
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	46c0      	nop			@ (mov r8, r8)
 80065b0:	efff69f3 	.word	0xefff69f3
 80065b4:	ffffcfff 	.word	0xffffcfff
 80065b8:	fffff4ff 	.word	0xfffff4ff
 80065bc:	40013800 	.word	0x40013800
 80065c0:	40021000 	.word	0x40021000
 80065c4:	40004400 	.word	0x40004400
 80065c8:	40004800 	.word	0x40004800
 80065cc:	40004c00 	.word	0x40004c00
 80065d0:	007a1200 	.word	0x007a1200

080065d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065e0:	2201      	movs	r2, #1
 80065e2:	4013      	ands	r3, r2
 80065e4:	d00b      	beq.n	80065fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	4a4a      	ldr	r2, [pc, #296]	@ (8006718 <UART_AdvFeatureConfig+0x144>)
 80065ee:	4013      	ands	r3, r2
 80065f0:	0019      	movs	r1, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006602:	2202      	movs	r2, #2
 8006604:	4013      	ands	r3, r2
 8006606:	d00b      	beq.n	8006620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	4a43      	ldr	r2, [pc, #268]	@ (800671c <UART_AdvFeatureConfig+0x148>)
 8006610:	4013      	ands	r3, r2
 8006612:	0019      	movs	r1, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006624:	2204      	movs	r2, #4
 8006626:	4013      	ands	r3, r2
 8006628:	d00b      	beq.n	8006642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4a3b      	ldr	r2, [pc, #236]	@ (8006720 <UART_AdvFeatureConfig+0x14c>)
 8006632:	4013      	ands	r3, r2
 8006634:	0019      	movs	r1, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006646:	2208      	movs	r2, #8
 8006648:	4013      	ands	r3, r2
 800664a:	d00b      	beq.n	8006664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4a34      	ldr	r2, [pc, #208]	@ (8006724 <UART_AdvFeatureConfig+0x150>)
 8006654:	4013      	ands	r3, r2
 8006656:	0019      	movs	r1, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	430a      	orrs	r2, r1
 8006662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006668:	2210      	movs	r2, #16
 800666a:	4013      	ands	r3, r2
 800666c:	d00b      	beq.n	8006686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	4a2c      	ldr	r2, [pc, #176]	@ (8006728 <UART_AdvFeatureConfig+0x154>)
 8006676:	4013      	ands	r3, r2
 8006678:	0019      	movs	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800668a:	2220      	movs	r2, #32
 800668c:	4013      	ands	r3, r2
 800668e:	d00b      	beq.n	80066a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	4a25      	ldr	r2, [pc, #148]	@ (800672c <UART_AdvFeatureConfig+0x158>)
 8006698:	4013      	ands	r3, r2
 800669a:	0019      	movs	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	430a      	orrs	r2, r1
 80066a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ac:	2240      	movs	r2, #64	@ 0x40
 80066ae:	4013      	ands	r3, r2
 80066b0:	d01d      	beq.n	80066ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006730 <UART_AdvFeatureConfig+0x15c>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	0019      	movs	r1, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	430a      	orrs	r2, r1
 80066c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066ce:	2380      	movs	r3, #128	@ 0x80
 80066d0:	035b      	lsls	r3, r3, #13
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d10b      	bne.n	80066ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	4a15      	ldr	r2, [pc, #84]	@ (8006734 <UART_AdvFeatureConfig+0x160>)
 80066de:	4013      	ands	r3, r2
 80066e0:	0019      	movs	r1, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	430a      	orrs	r2, r1
 80066ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f2:	2280      	movs	r2, #128	@ 0x80
 80066f4:	4013      	ands	r3, r2
 80066f6:	d00b      	beq.n	8006710 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006738 <UART_AdvFeatureConfig+0x164>)
 8006700:	4013      	ands	r3, r2
 8006702:	0019      	movs	r1, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	430a      	orrs	r2, r1
 800670e:	605a      	str	r2, [r3, #4]
  }
}
 8006710:	46c0      	nop			@ (mov r8, r8)
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}
 8006718:	fffdffff 	.word	0xfffdffff
 800671c:	fffeffff 	.word	0xfffeffff
 8006720:	fffbffff 	.word	0xfffbffff
 8006724:	ffff7fff 	.word	0xffff7fff
 8006728:	ffffefff 	.word	0xffffefff
 800672c:	ffffdfff 	.word	0xffffdfff
 8006730:	ffefffff 	.word	0xffefffff
 8006734:	ff9fffff 	.word	0xff9fffff
 8006738:	fff7ffff 	.word	0xfff7ffff

0800673c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b092      	sub	sp, #72	@ 0x48
 8006740:	af02      	add	r7, sp, #8
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2284      	movs	r2, #132	@ 0x84
 8006748:	2100      	movs	r1, #0
 800674a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800674c:	f7fe fc82 	bl	8005054 <HAL_GetTick>
 8006750:	0003      	movs	r3, r0
 8006752:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2208      	movs	r2, #8
 800675c:	4013      	ands	r3, r2
 800675e:	2b08      	cmp	r3, #8
 8006760:	d12c      	bne.n	80067bc <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006764:	2280      	movs	r2, #128	@ 0x80
 8006766:	0391      	lsls	r1, r2, #14
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	4a46      	ldr	r2, [pc, #280]	@ (8006884 <UART_CheckIdleState+0x148>)
 800676c:	9200      	str	r2, [sp, #0]
 800676e:	2200      	movs	r2, #0
 8006770:	f000 f88c 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 8006774:	1e03      	subs	r3, r0, #0
 8006776:	d021      	beq.n	80067bc <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006778:	f3ef 8310 	mrs	r3, PRIMASK
 800677c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006780:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006782:	2301      	movs	r3, #1
 8006784:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006788:	f383 8810 	msr	PRIMASK, r3
}
 800678c:	46c0      	nop			@ (mov r8, r8)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2180      	movs	r1, #128	@ 0x80
 800679a:	438a      	bics	r2, r1
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a4:	f383 8810 	msr	PRIMASK, r3
}
 80067a8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2278      	movs	r2, #120	@ 0x78
 80067b4:	2100      	movs	r1, #0
 80067b6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e05f      	b.n	800687c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2204      	movs	r2, #4
 80067c4:	4013      	ands	r3, r2
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d146      	bne.n	8006858 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067cc:	2280      	movs	r2, #128	@ 0x80
 80067ce:	03d1      	lsls	r1, r2, #15
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	4a2c      	ldr	r2, [pc, #176]	@ (8006884 <UART_CheckIdleState+0x148>)
 80067d4:	9200      	str	r2, [sp, #0]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f000 f858 	bl	800688c <UART_WaitOnFlagUntilTimeout>
 80067dc:	1e03      	subs	r3, r0, #0
 80067de:	d03b      	beq.n	8006858 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e0:	f3ef 8310 	mrs	r3, PRIMASK
 80067e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80067e6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80067ea:	2301      	movs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	46c0      	nop			@ (mov r8, r8)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4921      	ldr	r1, [pc, #132]	@ (8006888 <UART_CheckIdleState+0x14c>)
 8006802:	400a      	ands	r2, r1
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006808:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f383 8810 	msr	PRIMASK, r3
}
 8006810:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006812:	f3ef 8310 	mrs	r3, PRIMASK
 8006816:	61bb      	str	r3, [r7, #24]
  return(result);
 8006818:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800681a:	633b      	str	r3, [r7, #48]	@ 0x30
 800681c:	2301      	movs	r3, #1
 800681e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	f383 8810 	msr	PRIMASK, r3
}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2101      	movs	r1, #1
 8006834:	438a      	bics	r2, r1
 8006836:	609a      	str	r2, [r3, #8]
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	f383 8810 	msr	PRIMASK, r3
}
 8006842:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2280      	movs	r2, #128	@ 0x80
 8006848:	2120      	movs	r1, #32
 800684a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2278      	movs	r2, #120	@ 0x78
 8006850:	2100      	movs	r1, #0
 8006852:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e011      	b.n	800687c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2220      	movs	r2, #32
 800685c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2280      	movs	r2, #128	@ 0x80
 8006862:	2120      	movs	r1, #32
 8006864:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2200      	movs	r2, #0
 8006870:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2278      	movs	r2, #120	@ 0x78
 8006876:	2100      	movs	r1, #0
 8006878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800687a:	2300      	movs	r3, #0
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b010      	add	sp, #64	@ 0x40
 8006882:	bd80      	pop	{r7, pc}
 8006884:	01ffffff 	.word	0x01ffffff
 8006888:	fffffedf 	.word	0xfffffedf

0800688c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	603b      	str	r3, [r7, #0]
 8006898:	1dfb      	adds	r3, r7, #7
 800689a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800689c:	e04b      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	3301      	adds	r3, #1
 80068a2:	d048      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068a4:	f7fe fbd6 	bl	8005054 <HAL_GetTick>
 80068a8:	0002      	movs	r2, r0
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	69ba      	ldr	r2, [r7, #24]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d302      	bcc.n	80068ba <UART_WaitOnFlagUntilTimeout+0x2e>
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e04b      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2204      	movs	r2, #4
 80068c6:	4013      	ands	r3, r2
 80068c8:	d035      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	2208      	movs	r2, #8
 80068d2:	4013      	ands	r3, r2
 80068d4:	2b08      	cmp	r3, #8
 80068d6:	d111      	bne.n	80068fc <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2208      	movs	r2, #8
 80068de:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	0018      	movs	r0, r3
 80068e4:	f000 f83c 	bl	8006960 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2284      	movs	r2, #132	@ 0x84
 80068ec:	2108      	movs	r1, #8
 80068ee:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2278      	movs	r2, #120	@ 0x78
 80068f4:	2100      	movs	r1, #0
 80068f6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e02c      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69da      	ldr	r2, [r3, #28]
 8006902:	2380      	movs	r3, #128	@ 0x80
 8006904:	011b      	lsls	r3, r3, #4
 8006906:	401a      	ands	r2, r3
 8006908:	2380      	movs	r3, #128	@ 0x80
 800690a:	011b      	lsls	r3, r3, #4
 800690c:	429a      	cmp	r2, r3
 800690e:	d112      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2280      	movs	r2, #128	@ 0x80
 8006916:	0112      	lsls	r2, r2, #4
 8006918:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	0018      	movs	r0, r3
 800691e:	f000 f81f 	bl	8006960 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2284      	movs	r2, #132	@ 0x84
 8006926:	2120      	movs	r1, #32
 8006928:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2278      	movs	r2, #120	@ 0x78
 800692e:	2100      	movs	r1, #0
 8006930:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e00f      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	425a      	negs	r2, r3
 8006946:	4153      	adcs	r3, r2
 8006948:	b2db      	uxtb	r3, r3
 800694a:	001a      	movs	r2, r3
 800694c:	1dfb      	adds	r3, r7, #7
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	429a      	cmp	r2, r3
 8006952:	d0a4      	beq.n	800689e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b004      	add	sp, #16
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b08e      	sub	sp, #56	@ 0x38
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006968:	f3ef 8310 	mrs	r3, PRIMASK
 800696c:	617b      	str	r3, [r7, #20]
  return(result);
 800696e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006970:	637b      	str	r3, [r7, #52]	@ 0x34
 8006972:	2301      	movs	r3, #1
 8006974:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f383 8810 	msr	PRIMASK, r3
}
 800697c:	46c0      	nop			@ (mov r8, r8)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4926      	ldr	r1, [pc, #152]	@ (8006a24 <UART_EndRxTransfer+0xc4>)
 800698a:	400a      	ands	r2, r1
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	f383 8810 	msr	PRIMASK, r3
}
 8006998:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800699a:	f3ef 8310 	mrs	r3, PRIMASK
 800699e:	623b      	str	r3, [r7, #32]
  return(result);
 80069a0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a4:	2301      	movs	r3, #1
 80069a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	f383 8810 	msr	PRIMASK, r3
}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2101      	movs	r1, #1
 80069bc:	438a      	bics	r2, r1
 80069be:	609a      	str	r2, [r3, #8]
 80069c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c6:	f383 8810 	msr	PRIMASK, r3
}
 80069ca:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d118      	bne.n	8006a06 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d4:	f3ef 8310 	mrs	r3, PRIMASK
 80069d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069da:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069de:	2301      	movs	r3, #1
 80069e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f383 8810 	msr	PRIMASK, r3
}
 80069e8:	46c0      	nop			@ (mov r8, r8)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2110      	movs	r1, #16
 80069f6:	438a      	bics	r2, r1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	f383 8810 	msr	PRIMASK, r3
}
 8006a04:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2280      	movs	r2, #128	@ 0x80
 8006a0a:	2120      	movs	r1, #32
 8006a0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006a1a:	46c0      	nop			@ (mov r8, r8)
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	b00e      	add	sp, #56	@ 0x38
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	46c0      	nop			@ (mov r8, r8)
 8006a24:	fffffedf 	.word	0xfffffedf

08006a28 <acos>:
 8006a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a2a:	0004      	movs	r4, r0
 8006a2c:	000d      	movs	r5, r1
 8006a2e:	f000 fc55 	bl	80072dc <__ieee754_acos>
 8006a32:	0022      	movs	r2, r4
 8006a34:	0006      	movs	r6, r0
 8006a36:	000f      	movs	r7, r1
 8006a38:	002b      	movs	r3, r5
 8006a3a:	0020      	movs	r0, r4
 8006a3c:	0029      	movs	r1, r5
 8006a3e:	f7fc fa49 	bl	8002ed4 <__aeabi_dcmpun>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d112      	bne.n	8006a6c <acos+0x44>
 8006a46:	0020      	movs	r0, r4
 8006a48:	0029      	movs	r1, r5
 8006a4a:	f000 f921 	bl	8006c90 <fabs>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4b08      	ldr	r3, [pc, #32]	@ (8006a74 <acos+0x4c>)
 8006a52:	f7f9 fd03 	bl	800045c <__aeabi_dcmpgt>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d008      	beq.n	8006a6c <acos+0x44>
 8006a5a:	f002 ff2b 	bl	80098b4 <__errno>
 8006a5e:	2321      	movs	r3, #33	@ 0x21
 8006a60:	6003      	str	r3, [r0, #0]
 8006a62:	4805      	ldr	r0, [pc, #20]	@ (8006a78 <acos+0x50>)
 8006a64:	f000 f964 	bl	8006d30 <nan>
 8006a68:	0006      	movs	r6, r0
 8006a6a:	000f      	movs	r7, r1
 8006a6c:	0030      	movs	r0, r6
 8006a6e:	0039      	movs	r1, r7
 8006a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a72:	46c0      	nop			@ (mov r8, r8)
 8006a74:	3ff00000 	.word	0x3ff00000
 8006a78:	0800a582 	.word	0x0800a582

08006a7c <log10>:
 8006a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7e:	0004      	movs	r4, r0
 8006a80:	000d      	movs	r5, r1
 8006a82:	f000 fe23 	bl	80076cc <__ieee754_log10>
 8006a86:	0022      	movs	r2, r4
 8006a88:	0006      	movs	r6, r0
 8006a8a:	000f      	movs	r7, r1
 8006a8c:	002b      	movs	r3, r5
 8006a8e:	0020      	movs	r0, r4
 8006a90:	0029      	movs	r1, r5
 8006a92:	f7fc fa1f 	bl	8002ed4 <__aeabi_dcmpun>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d115      	bne.n	8006ac6 <log10+0x4a>
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	0020      	movs	r0, r4
 8006aa0:	0029      	movs	r1, r5
 8006aa2:	f7f9 fcd1 	bl	8000448 <__aeabi_dcmple>
 8006aa6:	2800      	cmp	r0, #0
 8006aa8:	d00d      	beq.n	8006ac6 <log10+0x4a>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2300      	movs	r3, #0
 8006aae:	0020      	movs	r0, r4
 8006ab0:	0029      	movs	r1, r5
 8006ab2:	f7f9 fcb9 	bl	8000428 <__aeabi_dcmpeq>
 8006ab6:	2800      	cmp	r0, #0
 8006ab8:	d008      	beq.n	8006acc <log10+0x50>
 8006aba:	f002 fefb 	bl	80098b4 <__errno>
 8006abe:	2322      	movs	r3, #34	@ 0x22
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	4f07      	ldr	r7, [pc, #28]	@ (8006ae0 <log10+0x64>)
 8006ac4:	6003      	str	r3, [r0, #0]
 8006ac6:	0030      	movs	r0, r6
 8006ac8:	0039      	movs	r1, r7
 8006aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006acc:	f002 fef2 	bl	80098b4 <__errno>
 8006ad0:	2321      	movs	r3, #33	@ 0x21
 8006ad2:	6003      	str	r3, [r0, #0]
 8006ad4:	4803      	ldr	r0, [pc, #12]	@ (8006ae4 <log10+0x68>)
 8006ad6:	f000 f92b 	bl	8006d30 <nan>
 8006ada:	0006      	movs	r6, r0
 8006adc:	000f      	movs	r7, r1
 8006ade:	e7f2      	b.n	8006ac6 <log10+0x4a>
 8006ae0:	fff00000 	.word	0xfff00000
 8006ae4:	0800a582 	.word	0x0800a582

08006ae8 <pow>:
 8006ae8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aea:	0014      	movs	r4, r2
 8006aec:	001d      	movs	r5, r3
 8006aee:	9000      	str	r0, [sp, #0]
 8006af0:	9101      	str	r1, [sp, #4]
 8006af2:	f000 fe65 	bl	80077c0 <__ieee754_pow>
 8006af6:	0022      	movs	r2, r4
 8006af8:	0006      	movs	r6, r0
 8006afa:	000f      	movs	r7, r1
 8006afc:	002b      	movs	r3, r5
 8006afe:	0020      	movs	r0, r4
 8006b00:	0029      	movs	r1, r5
 8006b02:	f7fc f9e7 	bl	8002ed4 <__aeabi_dcmpun>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d13f      	bne.n	8006b8a <pow+0xa2>
 8006b0a:	9800      	ldr	r0, [sp, #0]
 8006b0c:	9901      	ldr	r1, [sp, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	2300      	movs	r3, #0
 8006b12:	f7f9 fc89 	bl	8000428 <__aeabi_dcmpeq>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	d019      	beq.n	8006b4e <pow+0x66>
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	0020      	movs	r0, r4
 8006b20:	0029      	movs	r1, r5
 8006b22:	f7f9 fc81 	bl	8000428 <__aeabi_dcmpeq>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	d146      	bne.n	8006bb8 <pow+0xd0>
 8006b2a:	0020      	movs	r0, r4
 8006b2c:	0029      	movs	r1, r5
 8006b2e:	f000 f8f7 	bl	8006d20 <finite>
 8006b32:	2800      	cmp	r0, #0
 8006b34:	d029      	beq.n	8006b8a <pow+0xa2>
 8006b36:	2200      	movs	r2, #0
 8006b38:	2300      	movs	r3, #0
 8006b3a:	0020      	movs	r0, r4
 8006b3c:	0029      	movs	r1, r5
 8006b3e:	f7f9 fc79 	bl	8000434 <__aeabi_dcmplt>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d021      	beq.n	8006b8a <pow+0xa2>
 8006b46:	f002 feb5 	bl	80098b4 <__errno>
 8006b4a:	2322      	movs	r3, #34	@ 0x22
 8006b4c:	e01c      	b.n	8006b88 <pow+0xa0>
 8006b4e:	0030      	movs	r0, r6
 8006b50:	0039      	movs	r1, r7
 8006b52:	f000 f8e5 	bl	8006d20 <finite>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d11b      	bne.n	8006b92 <pow+0xaa>
 8006b5a:	9800      	ldr	r0, [sp, #0]
 8006b5c:	9901      	ldr	r1, [sp, #4]
 8006b5e:	f000 f8df 	bl	8006d20 <finite>
 8006b62:	2800      	cmp	r0, #0
 8006b64:	d015      	beq.n	8006b92 <pow+0xaa>
 8006b66:	0020      	movs	r0, r4
 8006b68:	0029      	movs	r1, r5
 8006b6a:	f000 f8d9 	bl	8006d20 <finite>
 8006b6e:	2800      	cmp	r0, #0
 8006b70:	d00f      	beq.n	8006b92 <pow+0xaa>
 8006b72:	0032      	movs	r2, r6
 8006b74:	003b      	movs	r3, r7
 8006b76:	0030      	movs	r0, r6
 8006b78:	0039      	movs	r1, r7
 8006b7a:	f7fc f9ab 	bl	8002ed4 <__aeabi_dcmpun>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d0e1      	beq.n	8006b46 <pow+0x5e>
 8006b82:	f002 fe97 	bl	80098b4 <__errno>
 8006b86:	2321      	movs	r3, #33	@ 0x21
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	0030      	movs	r0, r6
 8006b8c:	0039      	movs	r1, r7
 8006b8e:	b003      	add	sp, #12
 8006b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b92:	2200      	movs	r2, #0
 8006b94:	2300      	movs	r3, #0
 8006b96:	0030      	movs	r0, r6
 8006b98:	0039      	movs	r1, r7
 8006b9a:	f7f9 fc45 	bl	8000428 <__aeabi_dcmpeq>
 8006b9e:	2800      	cmp	r0, #0
 8006ba0:	d0f3      	beq.n	8006b8a <pow+0xa2>
 8006ba2:	9800      	ldr	r0, [sp, #0]
 8006ba4:	9901      	ldr	r1, [sp, #4]
 8006ba6:	f000 f8bb 	bl	8006d20 <finite>
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d0ed      	beq.n	8006b8a <pow+0xa2>
 8006bae:	0020      	movs	r0, r4
 8006bb0:	0029      	movs	r1, r5
 8006bb2:	f000 f8b5 	bl	8006d20 <finite>
 8006bb6:	e7c4      	b.n	8006b42 <pow+0x5a>
 8006bb8:	2600      	movs	r6, #0
 8006bba:	4f01      	ldr	r7, [pc, #4]	@ (8006bc0 <pow+0xd8>)
 8006bbc:	e7e5      	b.n	8006b8a <pow+0xa2>
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	3ff00000 	.word	0x3ff00000

08006bc4 <sqrt>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	0004      	movs	r4, r0
 8006bc8:	000d      	movs	r5, r1
 8006bca:	f000 f8b7 	bl	8006d3c <__ieee754_sqrt>
 8006bce:	0022      	movs	r2, r4
 8006bd0:	0006      	movs	r6, r0
 8006bd2:	000f      	movs	r7, r1
 8006bd4:	002b      	movs	r3, r5
 8006bd6:	0020      	movs	r0, r4
 8006bd8:	0029      	movs	r1, r5
 8006bda:	f7fc f97b 	bl	8002ed4 <__aeabi_dcmpun>
 8006bde:	2800      	cmp	r0, #0
 8006be0:	d113      	bne.n	8006c0a <sqrt+0x46>
 8006be2:	2200      	movs	r2, #0
 8006be4:	2300      	movs	r3, #0
 8006be6:	0020      	movs	r0, r4
 8006be8:	0029      	movs	r1, r5
 8006bea:	f7f9 fc23 	bl	8000434 <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	d00b      	beq.n	8006c0a <sqrt+0x46>
 8006bf2:	f002 fe5f 	bl	80098b4 <__errno>
 8006bf6:	2321      	movs	r3, #33	@ 0x21
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	6003      	str	r3, [r0, #0]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	0010      	movs	r0, r2
 8006c00:	0019      	movs	r1, r3
 8006c02:	f7fa febf 	bl	8001984 <__aeabi_ddiv>
 8006c06:	0006      	movs	r6, r0
 8006c08:	000f      	movs	r7, r1
 8006c0a:	0030      	movs	r0, r6
 8006c0c:	0039      	movs	r1, r7
 8006c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c10 <cos>:
 8006c10:	b530      	push	{r4, r5, lr}
 8006c12:	4a1d      	ldr	r2, [pc, #116]	@ (8006c88 <cos+0x78>)
 8006c14:	004b      	lsls	r3, r1, #1
 8006c16:	b087      	sub	sp, #28
 8006c18:	085b      	lsrs	r3, r3, #1
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d804      	bhi.n	8006c28 <cos+0x18>
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2300      	movs	r3, #0
 8006c22:	f000 f9ef 	bl	8007004 <__kernel_cos>
 8006c26:	e006      	b.n	8006c36 <cos+0x26>
 8006c28:	4a18      	ldr	r2, [pc, #96]	@ (8006c8c <cos+0x7c>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d905      	bls.n	8006c3a <cos+0x2a>
 8006c2e:	0002      	movs	r2, r0
 8006c30:	000b      	movs	r3, r1
 8006c32:	f7fb fdb3 	bl	800279c <__aeabi_dsub>
 8006c36:	b007      	add	sp, #28
 8006c38:	bd30      	pop	{r4, r5, pc}
 8006c3a:	aa02      	add	r2, sp, #8
 8006c3c:	f001 faec 	bl	8008218 <__ieee754_rem_pio2>
 8006c40:	9c04      	ldr	r4, [sp, #16]
 8006c42:	9d05      	ldr	r5, [sp, #20]
 8006c44:	2303      	movs	r3, #3
 8006c46:	4003      	ands	r3, r0
 8006c48:	9802      	ldr	r0, [sp, #8]
 8006c4a:	9903      	ldr	r1, [sp, #12]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d006      	beq.n	8006c5e <cos+0x4e>
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d00d      	beq.n	8006c70 <cos+0x60>
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d110      	bne.n	8006c7a <cos+0x6a>
 8006c58:	0022      	movs	r2, r4
 8006c5a:	002b      	movs	r3, r5
 8006c5c:	e7e1      	b.n	8006c22 <cos+0x12>
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	0022      	movs	r2, r4
 8006c62:	002b      	movs	r3, r5
 8006c64:	f000 fa8e 	bl	8007184 <__kernel_sin>
 8006c68:	2380      	movs	r3, #128	@ 0x80
 8006c6a:	061b      	lsls	r3, r3, #24
 8006c6c:	18c9      	adds	r1, r1, r3
 8006c6e:	e7e2      	b.n	8006c36 <cos+0x26>
 8006c70:	0022      	movs	r2, r4
 8006c72:	002b      	movs	r3, r5
 8006c74:	f000 f9c6 	bl	8007004 <__kernel_cos>
 8006c78:	e7f6      	b.n	8006c68 <cos+0x58>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	0022      	movs	r2, r4
 8006c7e:	9300      	str	r3, [sp, #0]
 8006c80:	002b      	movs	r3, r5
 8006c82:	f000 fa7f 	bl	8007184 <__kernel_sin>
 8006c86:	e7d6      	b.n	8006c36 <cos+0x26>
 8006c88:	3fe921fb 	.word	0x3fe921fb
 8006c8c:	7fefffff 	.word	0x7fefffff

08006c90 <fabs>:
 8006c90:	0049      	lsls	r1, r1, #1
 8006c92:	084b      	lsrs	r3, r1, #1
 8006c94:	0019      	movs	r1, r3
 8006c96:	4770      	bx	lr

08006c98 <sin>:
 8006c98:	b530      	push	{r4, r5, lr}
 8006c9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006d18 <sin+0x80>)
 8006c9c:	004b      	lsls	r3, r1, #1
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	085b      	lsrs	r3, r3, #1
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d806      	bhi.n	8006cb4 <sin+0x1c>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2200      	movs	r2, #0
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2300      	movs	r3, #0
 8006cae:	f000 fa69 	bl	8007184 <__kernel_sin>
 8006cb2:	e006      	b.n	8006cc2 <sin+0x2a>
 8006cb4:	4a19      	ldr	r2, [pc, #100]	@ (8006d1c <sin+0x84>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d905      	bls.n	8006cc6 <sin+0x2e>
 8006cba:	0002      	movs	r2, r0
 8006cbc:	000b      	movs	r3, r1
 8006cbe:	f7fb fd6d 	bl	800279c <__aeabi_dsub>
 8006cc2:	b007      	add	sp, #28
 8006cc4:	bd30      	pop	{r4, r5, pc}
 8006cc6:	aa02      	add	r2, sp, #8
 8006cc8:	f001 faa6 	bl	8008218 <__ieee754_rem_pio2>
 8006ccc:	9c04      	ldr	r4, [sp, #16]
 8006cce:	9d05      	ldr	r5, [sp, #20]
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	4003      	ands	r3, r0
 8006cd4:	9802      	ldr	r0, [sp, #8]
 8006cd6:	9903      	ldr	r1, [sp, #12]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d008      	beq.n	8006cee <sin+0x56>
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d00b      	beq.n	8006cf8 <sin+0x60>
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d113      	bne.n	8006d0c <sin+0x74>
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	0022      	movs	r2, r4
 8006cea:	002b      	movs	r3, r5
 8006cec:	e7df      	b.n	8006cae <sin+0x16>
 8006cee:	0022      	movs	r2, r4
 8006cf0:	002b      	movs	r3, r5
 8006cf2:	f000 f987 	bl	8007004 <__kernel_cos>
 8006cf6:	e7e4      	b.n	8006cc2 <sin+0x2a>
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	0022      	movs	r2, r4
 8006cfc:	9300      	str	r3, [sp, #0]
 8006cfe:	002b      	movs	r3, r5
 8006d00:	f000 fa40 	bl	8007184 <__kernel_sin>
 8006d04:	2380      	movs	r3, #128	@ 0x80
 8006d06:	061b      	lsls	r3, r3, #24
 8006d08:	18c9      	adds	r1, r1, r3
 8006d0a:	e7da      	b.n	8006cc2 <sin+0x2a>
 8006d0c:	0022      	movs	r2, r4
 8006d0e:	002b      	movs	r3, r5
 8006d10:	f000 f978 	bl	8007004 <__kernel_cos>
 8006d14:	e7f6      	b.n	8006d04 <sin+0x6c>
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	3fe921fb 	.word	0x3fe921fb
 8006d1c:	7fefffff 	.word	0x7fefffff

08006d20 <finite>:
 8006d20:	4b02      	ldr	r3, [pc, #8]	@ (8006d2c <finite+0xc>)
 8006d22:	0048      	lsls	r0, r1, #1
 8006d24:	0840      	lsrs	r0, r0, #1
 8006d26:	18c0      	adds	r0, r0, r3
 8006d28:	0fc0      	lsrs	r0, r0, #31
 8006d2a:	4770      	bx	lr
 8006d2c:	80100000 	.word	0x80100000

08006d30 <nan>:
 8006d30:	2000      	movs	r0, #0
 8006d32:	4901      	ldr	r1, [pc, #4]	@ (8006d38 <nan+0x8>)
 8006d34:	4770      	bx	lr
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	7ff80000 	.word	0x7ff80000

08006d3c <__ieee754_sqrt>:
 8006d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3e:	000a      	movs	r2, r1
 8006d40:	000d      	movs	r5, r1
 8006d42:	496d      	ldr	r1, [pc, #436]	@ (8006ef8 <__ieee754_sqrt+0x1bc>)
 8006d44:	0004      	movs	r4, r0
 8006d46:	0003      	movs	r3, r0
 8006d48:	0008      	movs	r0, r1
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	4028      	ands	r0, r5
 8006d4e:	4288      	cmp	r0, r1
 8006d50:	d111      	bne.n	8006d76 <__ieee754_sqrt+0x3a>
 8006d52:	0022      	movs	r2, r4
 8006d54:	002b      	movs	r3, r5
 8006d56:	0020      	movs	r0, r4
 8006d58:	0029      	movs	r1, r5
 8006d5a:	f7fb fa57 	bl	800220c <__aeabi_dmul>
 8006d5e:	0002      	movs	r2, r0
 8006d60:	000b      	movs	r3, r1
 8006d62:	0020      	movs	r0, r4
 8006d64:	0029      	movs	r1, r5
 8006d66:	f7fa faa9 	bl	80012bc <__aeabi_dadd>
 8006d6a:	0004      	movs	r4, r0
 8006d6c:	000d      	movs	r5, r1
 8006d6e:	0020      	movs	r0, r4
 8006d70:	0029      	movs	r1, r5
 8006d72:	b007      	add	sp, #28
 8006d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	dc11      	bgt.n	8006d9e <__ieee754_sqrt+0x62>
 8006d7a:	0069      	lsls	r1, r5, #1
 8006d7c:	0849      	lsrs	r1, r1, #1
 8006d7e:	4321      	orrs	r1, r4
 8006d80:	d0f5      	beq.n	8006d6e <__ieee754_sqrt+0x32>
 8006d82:	2000      	movs	r0, #0
 8006d84:	4285      	cmp	r5, r0
 8006d86:	d010      	beq.n	8006daa <__ieee754_sqrt+0x6e>
 8006d88:	0022      	movs	r2, r4
 8006d8a:	002b      	movs	r3, r5
 8006d8c:	0020      	movs	r0, r4
 8006d8e:	0029      	movs	r1, r5
 8006d90:	f7fb fd04 	bl	800279c <__aeabi_dsub>
 8006d94:	0002      	movs	r2, r0
 8006d96:	000b      	movs	r3, r1
 8006d98:	f7fa fdf4 	bl	8001984 <__aeabi_ddiv>
 8006d9c:	e7e5      	b.n	8006d6a <__ieee754_sqrt+0x2e>
 8006d9e:	1528      	asrs	r0, r5, #20
 8006da0:	d115      	bne.n	8006dce <__ieee754_sqrt+0x92>
 8006da2:	2480      	movs	r4, #128	@ 0x80
 8006da4:	2100      	movs	r1, #0
 8006da6:	0364      	lsls	r4, r4, #13
 8006da8:	e007      	b.n	8006dba <__ieee754_sqrt+0x7e>
 8006daa:	0ada      	lsrs	r2, r3, #11
 8006dac:	3815      	subs	r0, #21
 8006dae:	055b      	lsls	r3, r3, #21
 8006db0:	2a00      	cmp	r2, #0
 8006db2:	d0fa      	beq.n	8006daa <__ieee754_sqrt+0x6e>
 8006db4:	e7f5      	b.n	8006da2 <__ieee754_sqrt+0x66>
 8006db6:	0052      	lsls	r2, r2, #1
 8006db8:	3101      	adds	r1, #1
 8006dba:	4222      	tst	r2, r4
 8006dbc:	d0fb      	beq.n	8006db6 <__ieee754_sqrt+0x7a>
 8006dbe:	1e4c      	subs	r4, r1, #1
 8006dc0:	1b00      	subs	r0, r0, r4
 8006dc2:	2420      	movs	r4, #32
 8006dc4:	001d      	movs	r5, r3
 8006dc6:	1a64      	subs	r4, r4, r1
 8006dc8:	40e5      	lsrs	r5, r4
 8006dca:	408b      	lsls	r3, r1
 8006dcc:	432a      	orrs	r2, r5
 8006dce:	494b      	ldr	r1, [pc, #300]	@ (8006efc <__ieee754_sqrt+0x1c0>)
 8006dd0:	0312      	lsls	r2, r2, #12
 8006dd2:	1844      	adds	r4, r0, r1
 8006dd4:	2180      	movs	r1, #128	@ 0x80
 8006dd6:	0b12      	lsrs	r2, r2, #12
 8006dd8:	0349      	lsls	r1, r1, #13
 8006dda:	4311      	orrs	r1, r2
 8006ddc:	07c0      	lsls	r0, r0, #31
 8006dde:	d403      	bmi.n	8006de8 <__ieee754_sqrt+0xac>
 8006de0:	0fda      	lsrs	r2, r3, #31
 8006de2:	0049      	lsls	r1, r1, #1
 8006de4:	1851      	adds	r1, r2, r1
 8006de6:	005b      	lsls	r3, r3, #1
 8006de8:	2500      	movs	r5, #0
 8006dea:	1062      	asrs	r2, r4, #1
 8006dec:	0049      	lsls	r1, r1, #1
 8006dee:	2480      	movs	r4, #128	@ 0x80
 8006df0:	9205      	str	r2, [sp, #20]
 8006df2:	0fda      	lsrs	r2, r3, #31
 8006df4:	1852      	adds	r2, r2, r1
 8006df6:	2016      	movs	r0, #22
 8006df8:	0029      	movs	r1, r5
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	03a4      	lsls	r4, r4, #14
 8006dfe:	190e      	adds	r6, r1, r4
 8006e00:	4296      	cmp	r6, r2
 8006e02:	dc02      	bgt.n	8006e0a <__ieee754_sqrt+0xce>
 8006e04:	1931      	adds	r1, r6, r4
 8006e06:	1b92      	subs	r2, r2, r6
 8006e08:	192d      	adds	r5, r5, r4
 8006e0a:	0fde      	lsrs	r6, r3, #31
 8006e0c:	0052      	lsls	r2, r2, #1
 8006e0e:	3801      	subs	r0, #1
 8006e10:	1992      	adds	r2, r2, r6
 8006e12:	005b      	lsls	r3, r3, #1
 8006e14:	0864      	lsrs	r4, r4, #1
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d1f1      	bne.n	8006dfe <__ieee754_sqrt+0xc2>
 8006e1a:	2620      	movs	r6, #32
 8006e1c:	2780      	movs	r7, #128	@ 0x80
 8006e1e:	0004      	movs	r4, r0
 8006e20:	9604      	str	r6, [sp, #16]
 8006e22:	063f      	lsls	r7, r7, #24
 8006e24:	19c6      	adds	r6, r0, r7
 8006e26:	46b4      	mov	ip, r6
 8006e28:	4291      	cmp	r1, r2
 8006e2a:	db02      	blt.n	8006e32 <__ieee754_sqrt+0xf6>
 8006e2c:	d114      	bne.n	8006e58 <__ieee754_sqrt+0x11c>
 8006e2e:	429e      	cmp	r6, r3
 8006e30:	d812      	bhi.n	8006e58 <__ieee754_sqrt+0x11c>
 8006e32:	4660      	mov	r0, ip
 8006e34:	4666      	mov	r6, ip
 8006e36:	19c0      	adds	r0, r0, r7
 8006e38:	9100      	str	r1, [sp, #0]
 8006e3a:	2e00      	cmp	r6, #0
 8006e3c:	da03      	bge.n	8006e46 <__ieee754_sqrt+0x10a>
 8006e3e:	43c6      	mvns	r6, r0
 8006e40:	0ff6      	lsrs	r6, r6, #31
 8006e42:	198e      	adds	r6, r1, r6
 8006e44:	9600      	str	r6, [sp, #0]
 8006e46:	1a52      	subs	r2, r2, r1
 8006e48:	4563      	cmp	r3, ip
 8006e4a:	4189      	sbcs	r1, r1
 8006e4c:	4249      	negs	r1, r1
 8006e4e:	1a52      	subs	r2, r2, r1
 8006e50:	4661      	mov	r1, ip
 8006e52:	1a5b      	subs	r3, r3, r1
 8006e54:	9900      	ldr	r1, [sp, #0]
 8006e56:	19e4      	adds	r4, r4, r7
 8006e58:	0fde      	lsrs	r6, r3, #31
 8006e5a:	0052      	lsls	r2, r2, #1
 8006e5c:	1992      	adds	r2, r2, r6
 8006e5e:	9e04      	ldr	r6, [sp, #16]
 8006e60:	005b      	lsls	r3, r3, #1
 8006e62:	3e01      	subs	r6, #1
 8006e64:	087f      	lsrs	r7, r7, #1
 8006e66:	9604      	str	r6, [sp, #16]
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	d1db      	bne.n	8006e24 <__ieee754_sqrt+0xe8>
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	d01f      	beq.n	8006eb0 <__ieee754_sqrt+0x174>
 8006e70:	4e23      	ldr	r6, [pc, #140]	@ (8006f00 <__ieee754_sqrt+0x1c4>)
 8006e72:	4f24      	ldr	r7, [pc, #144]	@ (8006f04 <__ieee754_sqrt+0x1c8>)
 8006e74:	6830      	ldr	r0, [r6, #0]
 8006e76:	6871      	ldr	r1, [r6, #4]
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	9200      	str	r2, [sp, #0]
 8006e7e:	9301      	str	r3, [sp, #4]
 8006e80:	6832      	ldr	r2, [r6, #0]
 8006e82:	6873      	ldr	r3, [r6, #4]
 8006e84:	9202      	str	r2, [sp, #8]
 8006e86:	9303      	str	r3, [sp, #12]
 8006e88:	9a00      	ldr	r2, [sp, #0]
 8006e8a:	9b01      	ldr	r3, [sp, #4]
 8006e8c:	f7fb fc86 	bl	800279c <__aeabi_dsub>
 8006e90:	0002      	movs	r2, r0
 8006e92:	000b      	movs	r3, r1
 8006e94:	9802      	ldr	r0, [sp, #8]
 8006e96:	9903      	ldr	r1, [sp, #12]
 8006e98:	f7f9 fad6 	bl	8000448 <__aeabi_dcmple>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d007      	beq.n	8006eb0 <__ieee754_sqrt+0x174>
 8006ea0:	6830      	ldr	r0, [r6, #0]
 8006ea2:	6871      	ldr	r1, [r6, #4]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	1c67      	adds	r7, r4, #1
 8006eaa:	d10f      	bne.n	8006ecc <__ieee754_sqrt+0x190>
 8006eac:	9c04      	ldr	r4, [sp, #16]
 8006eae:	3501      	adds	r5, #1
 8006eb0:	4b15      	ldr	r3, [pc, #84]	@ (8006f08 <__ieee754_sqrt+0x1cc>)
 8006eb2:	106a      	asrs	r2, r5, #1
 8006eb4:	18d2      	adds	r2, r2, r3
 8006eb6:	0863      	lsrs	r3, r4, #1
 8006eb8:	07ed      	lsls	r5, r5, #31
 8006eba:	d502      	bpl.n	8006ec2 <__ieee754_sqrt+0x186>
 8006ebc:	2180      	movs	r1, #128	@ 0x80
 8006ebe:	0609      	lsls	r1, r1, #24
 8006ec0:	430b      	orrs	r3, r1
 8006ec2:	9905      	ldr	r1, [sp, #20]
 8006ec4:	001c      	movs	r4, r3
 8006ec6:	0509      	lsls	r1, r1, #20
 8006ec8:	188d      	adds	r5, r1, r2
 8006eca:	e750      	b.n	8006d6e <__ieee754_sqrt+0x32>
 8006ecc:	f7fa f9f6 	bl	80012bc <__aeabi_dadd>
 8006ed0:	6877      	ldr	r7, [r6, #4]
 8006ed2:	6836      	ldr	r6, [r6, #0]
 8006ed4:	0002      	movs	r2, r0
 8006ed6:	000b      	movs	r3, r1
 8006ed8:	0030      	movs	r0, r6
 8006eda:	0039      	movs	r1, r7
 8006edc:	f7f9 faaa 	bl	8000434 <__aeabi_dcmplt>
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d004      	beq.n	8006eee <__ieee754_sqrt+0x1b2>
 8006ee4:	3402      	adds	r4, #2
 8006ee6:	4263      	negs	r3, r4
 8006ee8:	4163      	adcs	r3, r4
 8006eea:	18ed      	adds	r5, r5, r3
 8006eec:	e7e0      	b.n	8006eb0 <__ieee754_sqrt+0x174>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	3401      	adds	r4, #1
 8006ef2:	439c      	bics	r4, r3
 8006ef4:	e7dc      	b.n	8006eb0 <__ieee754_sqrt+0x174>
 8006ef6:	46c0      	nop			@ (mov r8, r8)
 8006ef8:	7ff00000 	.word	0x7ff00000
 8006efc:	fffffc01 	.word	0xfffffc01
 8006f00:	20000018 	.word	0x20000018
 8006f04:	20000010 	.word	0x20000010
 8006f08:	3fe00000 	.word	0x3fe00000

08006f0c <floor>:
 8006f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f0e:	004b      	lsls	r3, r1, #1
 8006f10:	4a36      	ldr	r2, [pc, #216]	@ (8006fec <floor+0xe0>)
 8006f12:	0d5b      	lsrs	r3, r3, #21
 8006f14:	189e      	adds	r6, r3, r2
 8006f16:	000c      	movs	r4, r1
 8006f18:	0005      	movs	r5, r0
 8006f1a:	9001      	str	r0, [sp, #4]
 8006f1c:	2e13      	cmp	r6, #19
 8006f1e:	dc2f      	bgt.n	8006f80 <floor+0x74>
 8006f20:	2e00      	cmp	r6, #0
 8006f22:	da14      	bge.n	8006f4e <floor+0x42>
 8006f24:	4a32      	ldr	r2, [pc, #200]	@ (8006ff0 <floor+0xe4>)
 8006f26:	4b33      	ldr	r3, [pc, #204]	@ (8006ff4 <floor+0xe8>)
 8006f28:	f7fa f9c8 	bl	80012bc <__aeabi_dadd>
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f7f9 fa94 	bl	800045c <__aeabi_dcmpgt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	d007      	beq.n	8006f48 <floor+0x3c>
 8006f38:	2c00      	cmp	r4, #0
 8006f3a:	da50      	bge.n	8006fde <floor+0xd2>
 8006f3c:	0064      	lsls	r4, r4, #1
 8006f3e:	0864      	lsrs	r4, r4, #1
 8006f40:	4325      	orrs	r5, r4
 8006f42:	d14f      	bne.n	8006fe4 <floor+0xd8>
 8006f44:	2480      	movs	r4, #128	@ 0x80
 8006f46:	0624      	lsls	r4, r4, #24
 8006f48:	0021      	movs	r1, r4
 8006f4a:	0028      	movs	r0, r5
 8006f4c:	e022      	b.n	8006f94 <floor+0x88>
 8006f4e:	4f2a      	ldr	r7, [pc, #168]	@ (8006ff8 <floor+0xec>)
 8006f50:	4137      	asrs	r7, r6
 8006f52:	003b      	movs	r3, r7
 8006f54:	400b      	ands	r3, r1
 8006f56:	4303      	orrs	r3, r0
 8006f58:	d01c      	beq.n	8006f94 <floor+0x88>
 8006f5a:	4a25      	ldr	r2, [pc, #148]	@ (8006ff0 <floor+0xe4>)
 8006f5c:	4b25      	ldr	r3, [pc, #148]	@ (8006ff4 <floor+0xe8>)
 8006f5e:	f7fa f9ad 	bl	80012bc <__aeabi_dadd>
 8006f62:	2200      	movs	r2, #0
 8006f64:	2300      	movs	r3, #0
 8006f66:	f7f9 fa79 	bl	800045c <__aeabi_dcmpgt>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d0ec      	beq.n	8006f48 <floor+0x3c>
 8006f6e:	2c00      	cmp	r4, #0
 8006f70:	da03      	bge.n	8006f7a <floor+0x6e>
 8006f72:	2380      	movs	r3, #128	@ 0x80
 8006f74:	035b      	lsls	r3, r3, #13
 8006f76:	4133      	asrs	r3, r6
 8006f78:	18e4      	adds	r4, r4, r3
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	43bc      	bics	r4, r7
 8006f7e:	e7e3      	b.n	8006f48 <floor+0x3c>
 8006f80:	2e33      	cmp	r6, #51	@ 0x33
 8006f82:	dd09      	ble.n	8006f98 <floor+0x8c>
 8006f84:	2380      	movs	r3, #128	@ 0x80
 8006f86:	00db      	lsls	r3, r3, #3
 8006f88:	429e      	cmp	r6, r3
 8006f8a:	d103      	bne.n	8006f94 <floor+0x88>
 8006f8c:	0002      	movs	r2, r0
 8006f8e:	000b      	movs	r3, r1
 8006f90:	f7fa f994 	bl	80012bc <__aeabi_dadd>
 8006f94:	b003      	add	sp, #12
 8006f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f98:	2701      	movs	r7, #1
 8006f9a:	4a18      	ldr	r2, [pc, #96]	@ (8006ffc <floor+0xf0>)
 8006f9c:	427f      	negs	r7, r7
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	40df      	lsrs	r7, r3
 8006fa2:	4238      	tst	r0, r7
 8006fa4:	d0f6      	beq.n	8006f94 <floor+0x88>
 8006fa6:	4a12      	ldr	r2, [pc, #72]	@ (8006ff0 <floor+0xe4>)
 8006fa8:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <floor+0xe8>)
 8006faa:	f7fa f987 	bl	80012bc <__aeabi_dadd>
 8006fae:	2200      	movs	r2, #0
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f7f9 fa53 	bl	800045c <__aeabi_dcmpgt>
 8006fb6:	2800      	cmp	r0, #0
 8006fb8:	d0c6      	beq.n	8006f48 <floor+0x3c>
 8006fba:	2c00      	cmp	r4, #0
 8006fbc:	da02      	bge.n	8006fc4 <floor+0xb8>
 8006fbe:	2e14      	cmp	r6, #20
 8006fc0:	d102      	bne.n	8006fc8 <floor+0xbc>
 8006fc2:	3401      	adds	r4, #1
 8006fc4:	43bd      	bics	r5, r7
 8006fc6:	e7bf      	b.n	8006f48 <floor+0x3c>
 8006fc8:	2234      	movs	r2, #52	@ 0x34
 8006fca:	2301      	movs	r3, #1
 8006fcc:	1b92      	subs	r2, r2, r6
 8006fce:	4093      	lsls	r3, r2
 8006fd0:	18ed      	adds	r5, r5, r3
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	419b      	sbcs	r3, r3
 8006fd8:	425b      	negs	r3, r3
 8006fda:	18e4      	adds	r4, r4, r3
 8006fdc:	e7f2      	b.n	8006fc4 <floor+0xb8>
 8006fde:	2500      	movs	r5, #0
 8006fe0:	002c      	movs	r4, r5
 8006fe2:	e7b1      	b.n	8006f48 <floor+0x3c>
 8006fe4:	2500      	movs	r5, #0
 8006fe6:	4c06      	ldr	r4, [pc, #24]	@ (8007000 <floor+0xf4>)
 8006fe8:	e7ae      	b.n	8006f48 <floor+0x3c>
 8006fea:	46c0      	nop			@ (mov r8, r8)
 8006fec:	fffffc01 	.word	0xfffffc01
 8006ff0:	8800759c 	.word	0x8800759c
 8006ff4:	7e37e43c 	.word	0x7e37e43c
 8006ff8:	000fffff 	.word	0x000fffff
 8006ffc:	fffffbed 	.word	0xfffffbed
 8007000:	bff00000 	.word	0xbff00000

08007004 <__kernel_cos>:
 8007004:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007006:	b087      	sub	sp, #28
 8007008:	9204      	str	r2, [sp, #16]
 800700a:	9305      	str	r3, [sp, #20]
 800700c:	004b      	lsls	r3, r1, #1
 800700e:	085b      	lsrs	r3, r3, #1
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	23f9      	movs	r3, #249	@ 0xf9
 8007014:	9a01      	ldr	r2, [sp, #4]
 8007016:	0004      	movs	r4, r0
 8007018:	000d      	movs	r5, r1
 800701a:	059b      	lsls	r3, r3, #22
 800701c:	429a      	cmp	r2, r3
 800701e:	d204      	bcs.n	800702a <__kernel_cos+0x26>
 8007020:	f7fb ff7a 	bl	8002f18 <__aeabi_d2iz>
 8007024:	2800      	cmp	r0, #0
 8007026:	d100      	bne.n	800702a <__kernel_cos+0x26>
 8007028:	e084      	b.n	8007134 <__kernel_cos+0x130>
 800702a:	0022      	movs	r2, r4
 800702c:	002b      	movs	r3, r5
 800702e:	0020      	movs	r0, r4
 8007030:	0029      	movs	r1, r5
 8007032:	f7fb f8eb 	bl	800220c <__aeabi_dmul>
 8007036:	2200      	movs	r2, #0
 8007038:	4b40      	ldr	r3, [pc, #256]	@ (800713c <__kernel_cos+0x138>)
 800703a:	0006      	movs	r6, r0
 800703c:	000f      	movs	r7, r1
 800703e:	f7fb f8e5 	bl	800220c <__aeabi_dmul>
 8007042:	4a3f      	ldr	r2, [pc, #252]	@ (8007140 <__kernel_cos+0x13c>)
 8007044:	9002      	str	r0, [sp, #8]
 8007046:	9103      	str	r1, [sp, #12]
 8007048:	4b3e      	ldr	r3, [pc, #248]	@ (8007144 <__kernel_cos+0x140>)
 800704a:	0030      	movs	r0, r6
 800704c:	0039      	movs	r1, r7
 800704e:	f7fb f8dd 	bl	800220c <__aeabi_dmul>
 8007052:	4a3d      	ldr	r2, [pc, #244]	@ (8007148 <__kernel_cos+0x144>)
 8007054:	4b3d      	ldr	r3, [pc, #244]	@ (800714c <__kernel_cos+0x148>)
 8007056:	f7fa f931 	bl	80012bc <__aeabi_dadd>
 800705a:	0032      	movs	r2, r6
 800705c:	003b      	movs	r3, r7
 800705e:	f7fb f8d5 	bl	800220c <__aeabi_dmul>
 8007062:	4a3b      	ldr	r2, [pc, #236]	@ (8007150 <__kernel_cos+0x14c>)
 8007064:	4b3b      	ldr	r3, [pc, #236]	@ (8007154 <__kernel_cos+0x150>)
 8007066:	f7fb fb99 	bl	800279c <__aeabi_dsub>
 800706a:	0032      	movs	r2, r6
 800706c:	003b      	movs	r3, r7
 800706e:	f7fb f8cd 	bl	800220c <__aeabi_dmul>
 8007072:	4a39      	ldr	r2, [pc, #228]	@ (8007158 <__kernel_cos+0x154>)
 8007074:	4b39      	ldr	r3, [pc, #228]	@ (800715c <__kernel_cos+0x158>)
 8007076:	f7fa f921 	bl	80012bc <__aeabi_dadd>
 800707a:	0032      	movs	r2, r6
 800707c:	003b      	movs	r3, r7
 800707e:	f7fb f8c5 	bl	800220c <__aeabi_dmul>
 8007082:	4a37      	ldr	r2, [pc, #220]	@ (8007160 <__kernel_cos+0x15c>)
 8007084:	4b37      	ldr	r3, [pc, #220]	@ (8007164 <__kernel_cos+0x160>)
 8007086:	f7fb fb89 	bl	800279c <__aeabi_dsub>
 800708a:	0032      	movs	r2, r6
 800708c:	003b      	movs	r3, r7
 800708e:	f7fb f8bd 	bl	800220c <__aeabi_dmul>
 8007092:	4a35      	ldr	r2, [pc, #212]	@ (8007168 <__kernel_cos+0x164>)
 8007094:	4b35      	ldr	r3, [pc, #212]	@ (800716c <__kernel_cos+0x168>)
 8007096:	f7fa f911 	bl	80012bc <__aeabi_dadd>
 800709a:	0032      	movs	r2, r6
 800709c:	003b      	movs	r3, r7
 800709e:	f7fb f8b5 	bl	800220c <__aeabi_dmul>
 80070a2:	0032      	movs	r2, r6
 80070a4:	003b      	movs	r3, r7
 80070a6:	f7fb f8b1 	bl	800220c <__aeabi_dmul>
 80070aa:	9a04      	ldr	r2, [sp, #16]
 80070ac:	9b05      	ldr	r3, [sp, #20]
 80070ae:	0006      	movs	r6, r0
 80070b0:	000f      	movs	r7, r1
 80070b2:	0020      	movs	r0, r4
 80070b4:	0029      	movs	r1, r5
 80070b6:	f7fb f8a9 	bl	800220c <__aeabi_dmul>
 80070ba:	0002      	movs	r2, r0
 80070bc:	000b      	movs	r3, r1
 80070be:	0030      	movs	r0, r6
 80070c0:	0039      	movs	r1, r7
 80070c2:	f7fb fb6b 	bl	800279c <__aeabi_dsub>
 80070c6:	4b2a      	ldr	r3, [pc, #168]	@ (8007170 <__kernel_cos+0x16c>)
 80070c8:	9a01      	ldr	r2, [sp, #4]
 80070ca:	9004      	str	r0, [sp, #16]
 80070cc:	9105      	str	r1, [sp, #20]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d80d      	bhi.n	80070ee <__kernel_cos+0xea>
 80070d2:	0002      	movs	r2, r0
 80070d4:	000b      	movs	r3, r1
 80070d6:	9802      	ldr	r0, [sp, #8]
 80070d8:	9903      	ldr	r1, [sp, #12]
 80070da:	f7fb fb5f 	bl	800279c <__aeabi_dsub>
 80070de:	0002      	movs	r2, r0
 80070e0:	2000      	movs	r0, #0
 80070e2:	000b      	movs	r3, r1
 80070e4:	4923      	ldr	r1, [pc, #140]	@ (8007174 <__kernel_cos+0x170>)
 80070e6:	f7fb fb59 	bl	800279c <__aeabi_dsub>
 80070ea:	b007      	add	sp, #28
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ee:	4b22      	ldr	r3, [pc, #136]	@ (8007178 <__kernel_cos+0x174>)
 80070f0:	9a01      	ldr	r2, [sp, #4]
 80070f2:	2600      	movs	r6, #0
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d81b      	bhi.n	8007130 <__kernel_cos+0x12c>
 80070f8:	0013      	movs	r3, r2
 80070fa:	4a20      	ldr	r2, [pc, #128]	@ (800717c <__kernel_cos+0x178>)
 80070fc:	4694      	mov	ip, r2
 80070fe:	4463      	add	r3, ip
 8007100:	001f      	movs	r7, r3
 8007102:	0032      	movs	r2, r6
 8007104:	003b      	movs	r3, r7
 8007106:	2000      	movs	r0, #0
 8007108:	491a      	ldr	r1, [pc, #104]	@ (8007174 <__kernel_cos+0x170>)
 800710a:	f7fb fb47 	bl	800279c <__aeabi_dsub>
 800710e:	0032      	movs	r2, r6
 8007110:	0004      	movs	r4, r0
 8007112:	000d      	movs	r5, r1
 8007114:	9802      	ldr	r0, [sp, #8]
 8007116:	9903      	ldr	r1, [sp, #12]
 8007118:	003b      	movs	r3, r7
 800711a:	f7fb fb3f 	bl	800279c <__aeabi_dsub>
 800711e:	9a04      	ldr	r2, [sp, #16]
 8007120:	9b05      	ldr	r3, [sp, #20]
 8007122:	f7fb fb3b 	bl	800279c <__aeabi_dsub>
 8007126:	0002      	movs	r2, r0
 8007128:	000b      	movs	r3, r1
 800712a:	0020      	movs	r0, r4
 800712c:	0029      	movs	r1, r5
 800712e:	e7da      	b.n	80070e6 <__kernel_cos+0xe2>
 8007130:	4f13      	ldr	r7, [pc, #76]	@ (8007180 <__kernel_cos+0x17c>)
 8007132:	e7e6      	b.n	8007102 <__kernel_cos+0xfe>
 8007134:	2000      	movs	r0, #0
 8007136:	490f      	ldr	r1, [pc, #60]	@ (8007174 <__kernel_cos+0x170>)
 8007138:	e7d7      	b.n	80070ea <__kernel_cos+0xe6>
 800713a:	46c0      	nop			@ (mov r8, r8)
 800713c:	3fe00000 	.word	0x3fe00000
 8007140:	be8838d4 	.word	0xbe8838d4
 8007144:	bda8fae9 	.word	0xbda8fae9
 8007148:	bdb4b1c4 	.word	0xbdb4b1c4
 800714c:	3e21ee9e 	.word	0x3e21ee9e
 8007150:	809c52ad 	.word	0x809c52ad
 8007154:	3e927e4f 	.word	0x3e927e4f
 8007158:	19cb1590 	.word	0x19cb1590
 800715c:	3efa01a0 	.word	0x3efa01a0
 8007160:	16c15177 	.word	0x16c15177
 8007164:	3f56c16c 	.word	0x3f56c16c
 8007168:	5555554c 	.word	0x5555554c
 800716c:	3fa55555 	.word	0x3fa55555
 8007170:	3fd33332 	.word	0x3fd33332
 8007174:	3ff00000 	.word	0x3ff00000
 8007178:	3fe90000 	.word	0x3fe90000
 800717c:	ffe00000 	.word	0xffe00000
 8007180:	3fd20000 	.word	0x3fd20000

08007184 <__kernel_sin>:
 8007184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007186:	b089      	sub	sp, #36	@ 0x24
 8007188:	9202      	str	r2, [sp, #8]
 800718a:	9303      	str	r3, [sp, #12]
 800718c:	22f9      	movs	r2, #249	@ 0xf9
 800718e:	004b      	lsls	r3, r1, #1
 8007190:	0006      	movs	r6, r0
 8007192:	000f      	movs	r7, r1
 8007194:	085b      	lsrs	r3, r3, #1
 8007196:	0592      	lsls	r2, r2, #22
 8007198:	4293      	cmp	r3, r2
 800719a:	d203      	bcs.n	80071a4 <__kernel_sin+0x20>
 800719c:	f7fb febc 	bl	8002f18 <__aeabi_d2iz>
 80071a0:	2800      	cmp	r0, #0
 80071a2:	d04c      	beq.n	800723e <__kernel_sin+0xba>
 80071a4:	0032      	movs	r2, r6
 80071a6:	003b      	movs	r3, r7
 80071a8:	0030      	movs	r0, r6
 80071aa:	0039      	movs	r1, r7
 80071ac:	f7fb f82e 	bl	800220c <__aeabi_dmul>
 80071b0:	0004      	movs	r4, r0
 80071b2:	000d      	movs	r5, r1
 80071b4:	0002      	movs	r2, r0
 80071b6:	000b      	movs	r3, r1
 80071b8:	0030      	movs	r0, r6
 80071ba:	0039      	movs	r1, r7
 80071bc:	f7fb f826 	bl	800220c <__aeabi_dmul>
 80071c0:	4a39      	ldr	r2, [pc, #228]	@ (80072a8 <__kernel_sin+0x124>)
 80071c2:	9000      	str	r0, [sp, #0]
 80071c4:	9101      	str	r1, [sp, #4]
 80071c6:	4b39      	ldr	r3, [pc, #228]	@ (80072ac <__kernel_sin+0x128>)
 80071c8:	0020      	movs	r0, r4
 80071ca:	0029      	movs	r1, r5
 80071cc:	f7fb f81e 	bl	800220c <__aeabi_dmul>
 80071d0:	4a37      	ldr	r2, [pc, #220]	@ (80072b0 <__kernel_sin+0x12c>)
 80071d2:	4b38      	ldr	r3, [pc, #224]	@ (80072b4 <__kernel_sin+0x130>)
 80071d4:	f7fb fae2 	bl	800279c <__aeabi_dsub>
 80071d8:	0022      	movs	r2, r4
 80071da:	002b      	movs	r3, r5
 80071dc:	f7fb f816 	bl	800220c <__aeabi_dmul>
 80071e0:	4a35      	ldr	r2, [pc, #212]	@ (80072b8 <__kernel_sin+0x134>)
 80071e2:	4b36      	ldr	r3, [pc, #216]	@ (80072bc <__kernel_sin+0x138>)
 80071e4:	f7fa f86a 	bl	80012bc <__aeabi_dadd>
 80071e8:	0022      	movs	r2, r4
 80071ea:	002b      	movs	r3, r5
 80071ec:	f7fb f80e 	bl	800220c <__aeabi_dmul>
 80071f0:	4a33      	ldr	r2, [pc, #204]	@ (80072c0 <__kernel_sin+0x13c>)
 80071f2:	4b34      	ldr	r3, [pc, #208]	@ (80072c4 <__kernel_sin+0x140>)
 80071f4:	f7fb fad2 	bl	800279c <__aeabi_dsub>
 80071f8:	0022      	movs	r2, r4
 80071fa:	002b      	movs	r3, r5
 80071fc:	f7fb f806 	bl	800220c <__aeabi_dmul>
 8007200:	4b31      	ldr	r3, [pc, #196]	@ (80072c8 <__kernel_sin+0x144>)
 8007202:	4a32      	ldr	r2, [pc, #200]	@ (80072cc <__kernel_sin+0x148>)
 8007204:	f7fa f85a 	bl	80012bc <__aeabi_dadd>
 8007208:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800720a:	9004      	str	r0, [sp, #16]
 800720c:	9105      	str	r1, [sp, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d119      	bne.n	8007246 <__kernel_sin+0xc2>
 8007212:	0002      	movs	r2, r0
 8007214:	000b      	movs	r3, r1
 8007216:	0020      	movs	r0, r4
 8007218:	0029      	movs	r1, r5
 800721a:	f7fa fff7 	bl	800220c <__aeabi_dmul>
 800721e:	4a2c      	ldr	r2, [pc, #176]	@ (80072d0 <__kernel_sin+0x14c>)
 8007220:	4b2c      	ldr	r3, [pc, #176]	@ (80072d4 <__kernel_sin+0x150>)
 8007222:	f7fb fabb 	bl	800279c <__aeabi_dsub>
 8007226:	9a00      	ldr	r2, [sp, #0]
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	f7fa ffef 	bl	800220c <__aeabi_dmul>
 800722e:	0002      	movs	r2, r0
 8007230:	000b      	movs	r3, r1
 8007232:	0030      	movs	r0, r6
 8007234:	0039      	movs	r1, r7
 8007236:	f7fa f841 	bl	80012bc <__aeabi_dadd>
 800723a:	0006      	movs	r6, r0
 800723c:	000f      	movs	r7, r1
 800723e:	0030      	movs	r0, r6
 8007240:	0039      	movs	r1, r7
 8007242:	b009      	add	sp, #36	@ 0x24
 8007244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007246:	2200      	movs	r2, #0
 8007248:	9802      	ldr	r0, [sp, #8]
 800724a:	9903      	ldr	r1, [sp, #12]
 800724c:	4b22      	ldr	r3, [pc, #136]	@ (80072d8 <__kernel_sin+0x154>)
 800724e:	f7fa ffdd 	bl	800220c <__aeabi_dmul>
 8007252:	9a04      	ldr	r2, [sp, #16]
 8007254:	9b05      	ldr	r3, [sp, #20]
 8007256:	9006      	str	r0, [sp, #24]
 8007258:	9107      	str	r1, [sp, #28]
 800725a:	9800      	ldr	r0, [sp, #0]
 800725c:	9901      	ldr	r1, [sp, #4]
 800725e:	f7fa ffd5 	bl	800220c <__aeabi_dmul>
 8007262:	0002      	movs	r2, r0
 8007264:	000b      	movs	r3, r1
 8007266:	9806      	ldr	r0, [sp, #24]
 8007268:	9907      	ldr	r1, [sp, #28]
 800726a:	f7fb fa97 	bl	800279c <__aeabi_dsub>
 800726e:	0022      	movs	r2, r4
 8007270:	002b      	movs	r3, r5
 8007272:	f7fa ffcb 	bl	800220c <__aeabi_dmul>
 8007276:	9a02      	ldr	r2, [sp, #8]
 8007278:	9b03      	ldr	r3, [sp, #12]
 800727a:	f7fb fa8f 	bl	800279c <__aeabi_dsub>
 800727e:	4a14      	ldr	r2, [pc, #80]	@ (80072d0 <__kernel_sin+0x14c>)
 8007280:	0004      	movs	r4, r0
 8007282:	000d      	movs	r5, r1
 8007284:	9800      	ldr	r0, [sp, #0]
 8007286:	9901      	ldr	r1, [sp, #4]
 8007288:	4b12      	ldr	r3, [pc, #72]	@ (80072d4 <__kernel_sin+0x150>)
 800728a:	f7fa ffbf 	bl	800220c <__aeabi_dmul>
 800728e:	0002      	movs	r2, r0
 8007290:	000b      	movs	r3, r1
 8007292:	0020      	movs	r0, r4
 8007294:	0029      	movs	r1, r5
 8007296:	f7fa f811 	bl	80012bc <__aeabi_dadd>
 800729a:	0002      	movs	r2, r0
 800729c:	000b      	movs	r3, r1
 800729e:	0030      	movs	r0, r6
 80072a0:	0039      	movs	r1, r7
 80072a2:	f7fb fa7b 	bl	800279c <__aeabi_dsub>
 80072a6:	e7c8      	b.n	800723a <__kernel_sin+0xb6>
 80072a8:	5acfd57c 	.word	0x5acfd57c
 80072ac:	3de5d93a 	.word	0x3de5d93a
 80072b0:	8a2b9ceb 	.word	0x8a2b9ceb
 80072b4:	3e5ae5e6 	.word	0x3e5ae5e6
 80072b8:	57b1fe7d 	.word	0x57b1fe7d
 80072bc:	3ec71de3 	.word	0x3ec71de3
 80072c0:	19c161d5 	.word	0x19c161d5
 80072c4:	3f2a01a0 	.word	0x3f2a01a0
 80072c8:	3f811111 	.word	0x3f811111
 80072cc:	1110f8a6 	.word	0x1110f8a6
 80072d0:	55555549 	.word	0x55555549
 80072d4:	3fc55555 	.word	0x3fc55555
 80072d8:	3fe00000 	.word	0x3fe00000

080072dc <__ieee754_acos>:
 80072dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072de:	004b      	lsls	r3, r1, #1
 80072e0:	000f      	movs	r7, r1
 80072e2:	49db      	ldr	r1, [pc, #876]	@ (8007650 <__ieee754_acos+0x374>)
 80072e4:	0006      	movs	r6, r0
 80072e6:	b085      	sub	sp, #20
 80072e8:	085b      	lsrs	r3, r3, #1
 80072ea:	428b      	cmp	r3, r1
 80072ec:	d914      	bls.n	8007318 <__ieee754_acos+0x3c>
 80072ee:	49d9      	ldr	r1, [pc, #868]	@ (8007654 <__ieee754_acos+0x378>)
 80072f0:	185b      	adds	r3, r3, r1
 80072f2:	4303      	orrs	r3, r0
 80072f4:	d106      	bne.n	8007304 <__ieee754_acos+0x28>
 80072f6:	2f00      	cmp	r7, #0
 80072f8:	dc00      	bgt.n	80072fc <__ieee754_acos+0x20>
 80072fa:	e1a2      	b.n	8007642 <__ieee754_acos+0x366>
 80072fc:	2000      	movs	r0, #0
 80072fe:	2100      	movs	r1, #0
 8007300:	b005      	add	sp, #20
 8007302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007304:	003b      	movs	r3, r7
 8007306:	0002      	movs	r2, r0
 8007308:	0039      	movs	r1, r7
 800730a:	f7fb fa47 	bl	800279c <__aeabi_dsub>
 800730e:	0002      	movs	r2, r0
 8007310:	000b      	movs	r3, r1
 8007312:	f7fa fb37 	bl	8001984 <__aeabi_ddiv>
 8007316:	e7f3      	b.n	8007300 <__ieee754_acos+0x24>
 8007318:	49cf      	ldr	r1, [pc, #828]	@ (8007658 <__ieee754_acos+0x37c>)
 800731a:	428b      	cmp	r3, r1
 800731c:	d877      	bhi.n	800740e <__ieee754_acos+0x132>
 800731e:	4acf      	ldr	r2, [pc, #828]	@ (800765c <__ieee754_acos+0x380>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d800      	bhi.n	8007326 <__ieee754_acos+0x4a>
 8007324:	e190      	b.n	8007648 <__ieee754_acos+0x36c>
 8007326:	0002      	movs	r2, r0
 8007328:	003b      	movs	r3, r7
 800732a:	0039      	movs	r1, r7
 800732c:	f7fa ff6e 	bl	800220c <__aeabi_dmul>
 8007330:	0004      	movs	r4, r0
 8007332:	000d      	movs	r5, r1
 8007334:	4aca      	ldr	r2, [pc, #808]	@ (8007660 <__ieee754_acos+0x384>)
 8007336:	4bcb      	ldr	r3, [pc, #812]	@ (8007664 <__ieee754_acos+0x388>)
 8007338:	f7fa ff68 	bl	800220c <__aeabi_dmul>
 800733c:	4aca      	ldr	r2, [pc, #808]	@ (8007668 <__ieee754_acos+0x38c>)
 800733e:	4bcb      	ldr	r3, [pc, #812]	@ (800766c <__ieee754_acos+0x390>)
 8007340:	f7f9 ffbc 	bl	80012bc <__aeabi_dadd>
 8007344:	0022      	movs	r2, r4
 8007346:	002b      	movs	r3, r5
 8007348:	f7fa ff60 	bl	800220c <__aeabi_dmul>
 800734c:	4ac8      	ldr	r2, [pc, #800]	@ (8007670 <__ieee754_acos+0x394>)
 800734e:	4bc9      	ldr	r3, [pc, #804]	@ (8007674 <__ieee754_acos+0x398>)
 8007350:	f7fb fa24 	bl	800279c <__aeabi_dsub>
 8007354:	0022      	movs	r2, r4
 8007356:	002b      	movs	r3, r5
 8007358:	f7fa ff58 	bl	800220c <__aeabi_dmul>
 800735c:	4ac6      	ldr	r2, [pc, #792]	@ (8007678 <__ieee754_acos+0x39c>)
 800735e:	4bc7      	ldr	r3, [pc, #796]	@ (800767c <__ieee754_acos+0x3a0>)
 8007360:	f7f9 ffac 	bl	80012bc <__aeabi_dadd>
 8007364:	0022      	movs	r2, r4
 8007366:	002b      	movs	r3, r5
 8007368:	f7fa ff50 	bl	800220c <__aeabi_dmul>
 800736c:	4ac4      	ldr	r2, [pc, #784]	@ (8007680 <__ieee754_acos+0x3a4>)
 800736e:	4bc5      	ldr	r3, [pc, #788]	@ (8007684 <__ieee754_acos+0x3a8>)
 8007370:	f7fb fa14 	bl	800279c <__aeabi_dsub>
 8007374:	0022      	movs	r2, r4
 8007376:	002b      	movs	r3, r5
 8007378:	f7fa ff48 	bl	800220c <__aeabi_dmul>
 800737c:	4ac2      	ldr	r2, [pc, #776]	@ (8007688 <__ieee754_acos+0x3ac>)
 800737e:	4bc3      	ldr	r3, [pc, #780]	@ (800768c <__ieee754_acos+0x3b0>)
 8007380:	f7f9 ff9c 	bl	80012bc <__aeabi_dadd>
 8007384:	0022      	movs	r2, r4
 8007386:	002b      	movs	r3, r5
 8007388:	f7fa ff40 	bl	800220c <__aeabi_dmul>
 800738c:	4ac0      	ldr	r2, [pc, #768]	@ (8007690 <__ieee754_acos+0x3b4>)
 800738e:	9000      	str	r0, [sp, #0]
 8007390:	9101      	str	r1, [sp, #4]
 8007392:	4bc0      	ldr	r3, [pc, #768]	@ (8007694 <__ieee754_acos+0x3b8>)
 8007394:	0020      	movs	r0, r4
 8007396:	0029      	movs	r1, r5
 8007398:	f7fa ff38 	bl	800220c <__aeabi_dmul>
 800739c:	4abe      	ldr	r2, [pc, #760]	@ (8007698 <__ieee754_acos+0x3bc>)
 800739e:	4bbf      	ldr	r3, [pc, #764]	@ (800769c <__ieee754_acos+0x3c0>)
 80073a0:	f7fb f9fc 	bl	800279c <__aeabi_dsub>
 80073a4:	0022      	movs	r2, r4
 80073a6:	002b      	movs	r3, r5
 80073a8:	f7fa ff30 	bl	800220c <__aeabi_dmul>
 80073ac:	4abc      	ldr	r2, [pc, #752]	@ (80076a0 <__ieee754_acos+0x3c4>)
 80073ae:	4bbd      	ldr	r3, [pc, #756]	@ (80076a4 <__ieee754_acos+0x3c8>)
 80073b0:	f7f9 ff84 	bl	80012bc <__aeabi_dadd>
 80073b4:	0022      	movs	r2, r4
 80073b6:	002b      	movs	r3, r5
 80073b8:	f7fa ff28 	bl	800220c <__aeabi_dmul>
 80073bc:	4aba      	ldr	r2, [pc, #744]	@ (80076a8 <__ieee754_acos+0x3cc>)
 80073be:	4bbb      	ldr	r3, [pc, #748]	@ (80076ac <__ieee754_acos+0x3d0>)
 80073c0:	f7fb f9ec 	bl	800279c <__aeabi_dsub>
 80073c4:	0022      	movs	r2, r4
 80073c6:	002b      	movs	r3, r5
 80073c8:	f7fa ff20 	bl	800220c <__aeabi_dmul>
 80073cc:	2200      	movs	r2, #0
 80073ce:	4bb8      	ldr	r3, [pc, #736]	@ (80076b0 <__ieee754_acos+0x3d4>)
 80073d0:	f7f9 ff74 	bl	80012bc <__aeabi_dadd>
 80073d4:	0002      	movs	r2, r0
 80073d6:	000b      	movs	r3, r1
 80073d8:	9800      	ldr	r0, [sp, #0]
 80073da:	9901      	ldr	r1, [sp, #4]
 80073dc:	f7fa fad2 	bl	8001984 <__aeabi_ddiv>
 80073e0:	0032      	movs	r2, r6
 80073e2:	003b      	movs	r3, r7
 80073e4:	f7fa ff12 	bl	800220c <__aeabi_dmul>
 80073e8:	0002      	movs	r2, r0
 80073ea:	000b      	movs	r3, r1
 80073ec:	48b1      	ldr	r0, [pc, #708]	@ (80076b4 <__ieee754_acos+0x3d8>)
 80073ee:	49b2      	ldr	r1, [pc, #712]	@ (80076b8 <__ieee754_acos+0x3dc>)
 80073f0:	f7fb f9d4 	bl	800279c <__aeabi_dsub>
 80073f4:	0002      	movs	r2, r0
 80073f6:	000b      	movs	r3, r1
 80073f8:	0030      	movs	r0, r6
 80073fa:	0039      	movs	r1, r7
 80073fc:	f7fb f9ce 	bl	800279c <__aeabi_dsub>
 8007400:	0002      	movs	r2, r0
 8007402:	000b      	movs	r3, r1
 8007404:	48ad      	ldr	r0, [pc, #692]	@ (80076bc <__ieee754_acos+0x3e0>)
 8007406:	49ae      	ldr	r1, [pc, #696]	@ (80076c0 <__ieee754_acos+0x3e4>)
 8007408:	f7fb f9c8 	bl	800279c <__aeabi_dsub>
 800740c:	e778      	b.n	8007300 <__ieee754_acos+0x24>
 800740e:	2f00      	cmp	r7, #0
 8007410:	da7d      	bge.n	800750e <__ieee754_acos+0x232>
 8007412:	2200      	movs	r2, #0
 8007414:	0039      	movs	r1, r7
 8007416:	4ba6      	ldr	r3, [pc, #664]	@ (80076b0 <__ieee754_acos+0x3d4>)
 8007418:	f7f9 ff50 	bl	80012bc <__aeabi_dadd>
 800741c:	2200      	movs	r2, #0
 800741e:	4ba9      	ldr	r3, [pc, #676]	@ (80076c4 <__ieee754_acos+0x3e8>)
 8007420:	f7fa fef4 	bl	800220c <__aeabi_dmul>
 8007424:	0004      	movs	r4, r0
 8007426:	000d      	movs	r5, r1
 8007428:	4a8d      	ldr	r2, [pc, #564]	@ (8007660 <__ieee754_acos+0x384>)
 800742a:	4b8e      	ldr	r3, [pc, #568]	@ (8007664 <__ieee754_acos+0x388>)
 800742c:	f7fa feee 	bl	800220c <__aeabi_dmul>
 8007430:	4a8d      	ldr	r2, [pc, #564]	@ (8007668 <__ieee754_acos+0x38c>)
 8007432:	4b8e      	ldr	r3, [pc, #568]	@ (800766c <__ieee754_acos+0x390>)
 8007434:	f7f9 ff42 	bl	80012bc <__aeabi_dadd>
 8007438:	0022      	movs	r2, r4
 800743a:	002b      	movs	r3, r5
 800743c:	f7fa fee6 	bl	800220c <__aeabi_dmul>
 8007440:	4a8b      	ldr	r2, [pc, #556]	@ (8007670 <__ieee754_acos+0x394>)
 8007442:	4b8c      	ldr	r3, [pc, #560]	@ (8007674 <__ieee754_acos+0x398>)
 8007444:	f7fb f9aa 	bl	800279c <__aeabi_dsub>
 8007448:	0022      	movs	r2, r4
 800744a:	002b      	movs	r3, r5
 800744c:	f7fa fede 	bl	800220c <__aeabi_dmul>
 8007450:	4a89      	ldr	r2, [pc, #548]	@ (8007678 <__ieee754_acos+0x39c>)
 8007452:	4b8a      	ldr	r3, [pc, #552]	@ (800767c <__ieee754_acos+0x3a0>)
 8007454:	f7f9 ff32 	bl	80012bc <__aeabi_dadd>
 8007458:	0022      	movs	r2, r4
 800745a:	002b      	movs	r3, r5
 800745c:	f7fa fed6 	bl	800220c <__aeabi_dmul>
 8007460:	4a87      	ldr	r2, [pc, #540]	@ (8007680 <__ieee754_acos+0x3a4>)
 8007462:	4b88      	ldr	r3, [pc, #544]	@ (8007684 <__ieee754_acos+0x3a8>)
 8007464:	f7fb f99a 	bl	800279c <__aeabi_dsub>
 8007468:	0022      	movs	r2, r4
 800746a:	002b      	movs	r3, r5
 800746c:	f7fa fece 	bl	800220c <__aeabi_dmul>
 8007470:	4a85      	ldr	r2, [pc, #532]	@ (8007688 <__ieee754_acos+0x3ac>)
 8007472:	4b86      	ldr	r3, [pc, #536]	@ (800768c <__ieee754_acos+0x3b0>)
 8007474:	f7f9 ff22 	bl	80012bc <__aeabi_dadd>
 8007478:	0022      	movs	r2, r4
 800747a:	002b      	movs	r3, r5
 800747c:	f7fa fec6 	bl	800220c <__aeabi_dmul>
 8007480:	4a83      	ldr	r2, [pc, #524]	@ (8007690 <__ieee754_acos+0x3b4>)
 8007482:	0006      	movs	r6, r0
 8007484:	000f      	movs	r7, r1
 8007486:	0020      	movs	r0, r4
 8007488:	0029      	movs	r1, r5
 800748a:	4b82      	ldr	r3, [pc, #520]	@ (8007694 <__ieee754_acos+0x3b8>)
 800748c:	f7fa febe 	bl	800220c <__aeabi_dmul>
 8007490:	4a81      	ldr	r2, [pc, #516]	@ (8007698 <__ieee754_acos+0x3bc>)
 8007492:	4b82      	ldr	r3, [pc, #520]	@ (800769c <__ieee754_acos+0x3c0>)
 8007494:	f7fb f982 	bl	800279c <__aeabi_dsub>
 8007498:	0022      	movs	r2, r4
 800749a:	002b      	movs	r3, r5
 800749c:	f7fa feb6 	bl	800220c <__aeabi_dmul>
 80074a0:	4a7f      	ldr	r2, [pc, #508]	@ (80076a0 <__ieee754_acos+0x3c4>)
 80074a2:	4b80      	ldr	r3, [pc, #512]	@ (80076a4 <__ieee754_acos+0x3c8>)
 80074a4:	f7f9 ff0a 	bl	80012bc <__aeabi_dadd>
 80074a8:	0022      	movs	r2, r4
 80074aa:	002b      	movs	r3, r5
 80074ac:	f7fa feae 	bl	800220c <__aeabi_dmul>
 80074b0:	4a7d      	ldr	r2, [pc, #500]	@ (80076a8 <__ieee754_acos+0x3cc>)
 80074b2:	4b7e      	ldr	r3, [pc, #504]	@ (80076ac <__ieee754_acos+0x3d0>)
 80074b4:	f7fb f972 	bl	800279c <__aeabi_dsub>
 80074b8:	0022      	movs	r2, r4
 80074ba:	002b      	movs	r3, r5
 80074bc:	f7fa fea6 	bl	800220c <__aeabi_dmul>
 80074c0:	2200      	movs	r2, #0
 80074c2:	4b7b      	ldr	r3, [pc, #492]	@ (80076b0 <__ieee754_acos+0x3d4>)
 80074c4:	f7f9 fefa 	bl	80012bc <__aeabi_dadd>
 80074c8:	9000      	str	r0, [sp, #0]
 80074ca:	9101      	str	r1, [sp, #4]
 80074cc:	0020      	movs	r0, r4
 80074ce:	0029      	movs	r1, r5
 80074d0:	f7ff fc34 	bl	8006d3c <__ieee754_sqrt>
 80074d4:	9a00      	ldr	r2, [sp, #0]
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	0004      	movs	r4, r0
 80074da:	000d      	movs	r5, r1
 80074dc:	0030      	movs	r0, r6
 80074de:	0039      	movs	r1, r7
 80074e0:	f7fa fa50 	bl	8001984 <__aeabi_ddiv>
 80074e4:	0022      	movs	r2, r4
 80074e6:	002b      	movs	r3, r5
 80074e8:	f7fa fe90 	bl	800220c <__aeabi_dmul>
 80074ec:	4a71      	ldr	r2, [pc, #452]	@ (80076b4 <__ieee754_acos+0x3d8>)
 80074ee:	4b72      	ldr	r3, [pc, #456]	@ (80076b8 <__ieee754_acos+0x3dc>)
 80074f0:	f7fb f954 	bl	800279c <__aeabi_dsub>
 80074f4:	0022      	movs	r2, r4
 80074f6:	002b      	movs	r3, r5
 80074f8:	f7f9 fee0 	bl	80012bc <__aeabi_dadd>
 80074fc:	0002      	movs	r2, r0
 80074fe:	000b      	movs	r3, r1
 8007500:	f7f9 fedc 	bl	80012bc <__aeabi_dadd>
 8007504:	0002      	movs	r2, r0
 8007506:	000b      	movs	r3, r1
 8007508:	486c      	ldr	r0, [pc, #432]	@ (80076bc <__ieee754_acos+0x3e0>)
 800750a:	496f      	ldr	r1, [pc, #444]	@ (80076c8 <__ieee754_acos+0x3ec>)
 800750c:	e77c      	b.n	8007408 <__ieee754_acos+0x12c>
 800750e:	0002      	movs	r2, r0
 8007510:	003b      	movs	r3, r7
 8007512:	2000      	movs	r0, #0
 8007514:	4966      	ldr	r1, [pc, #408]	@ (80076b0 <__ieee754_acos+0x3d4>)
 8007516:	f7fb f941 	bl	800279c <__aeabi_dsub>
 800751a:	2200      	movs	r2, #0
 800751c:	4b69      	ldr	r3, [pc, #420]	@ (80076c4 <__ieee754_acos+0x3e8>)
 800751e:	f7fa fe75 	bl	800220c <__aeabi_dmul>
 8007522:	0004      	movs	r4, r0
 8007524:	000d      	movs	r5, r1
 8007526:	f7ff fc09 	bl	8006d3c <__ieee754_sqrt>
 800752a:	4a4d      	ldr	r2, [pc, #308]	@ (8007660 <__ieee754_acos+0x384>)
 800752c:	9000      	str	r0, [sp, #0]
 800752e:	9101      	str	r1, [sp, #4]
 8007530:	9e00      	ldr	r6, [sp, #0]
 8007532:	9f01      	ldr	r7, [sp, #4]
 8007534:	0020      	movs	r0, r4
 8007536:	0029      	movs	r1, r5
 8007538:	4b4a      	ldr	r3, [pc, #296]	@ (8007664 <__ieee754_acos+0x388>)
 800753a:	f7fa fe67 	bl	800220c <__aeabi_dmul>
 800753e:	4a4a      	ldr	r2, [pc, #296]	@ (8007668 <__ieee754_acos+0x38c>)
 8007540:	4b4a      	ldr	r3, [pc, #296]	@ (800766c <__ieee754_acos+0x390>)
 8007542:	f7f9 febb 	bl	80012bc <__aeabi_dadd>
 8007546:	0022      	movs	r2, r4
 8007548:	002b      	movs	r3, r5
 800754a:	f7fa fe5f 	bl	800220c <__aeabi_dmul>
 800754e:	4a48      	ldr	r2, [pc, #288]	@ (8007670 <__ieee754_acos+0x394>)
 8007550:	4b48      	ldr	r3, [pc, #288]	@ (8007674 <__ieee754_acos+0x398>)
 8007552:	f7fb f923 	bl	800279c <__aeabi_dsub>
 8007556:	0022      	movs	r2, r4
 8007558:	002b      	movs	r3, r5
 800755a:	f7fa fe57 	bl	800220c <__aeabi_dmul>
 800755e:	4a46      	ldr	r2, [pc, #280]	@ (8007678 <__ieee754_acos+0x39c>)
 8007560:	4b46      	ldr	r3, [pc, #280]	@ (800767c <__ieee754_acos+0x3a0>)
 8007562:	f7f9 feab 	bl	80012bc <__aeabi_dadd>
 8007566:	0022      	movs	r2, r4
 8007568:	002b      	movs	r3, r5
 800756a:	f7fa fe4f 	bl	800220c <__aeabi_dmul>
 800756e:	4a44      	ldr	r2, [pc, #272]	@ (8007680 <__ieee754_acos+0x3a4>)
 8007570:	4b44      	ldr	r3, [pc, #272]	@ (8007684 <__ieee754_acos+0x3a8>)
 8007572:	f7fb f913 	bl	800279c <__aeabi_dsub>
 8007576:	0022      	movs	r2, r4
 8007578:	002b      	movs	r3, r5
 800757a:	f7fa fe47 	bl	800220c <__aeabi_dmul>
 800757e:	4a42      	ldr	r2, [pc, #264]	@ (8007688 <__ieee754_acos+0x3ac>)
 8007580:	4b42      	ldr	r3, [pc, #264]	@ (800768c <__ieee754_acos+0x3b0>)
 8007582:	f7f9 fe9b 	bl	80012bc <__aeabi_dadd>
 8007586:	0022      	movs	r2, r4
 8007588:	002b      	movs	r3, r5
 800758a:	f7fa fe3f 	bl	800220c <__aeabi_dmul>
 800758e:	4a40      	ldr	r2, [pc, #256]	@ (8007690 <__ieee754_acos+0x3b4>)
 8007590:	9002      	str	r0, [sp, #8]
 8007592:	9103      	str	r1, [sp, #12]
 8007594:	4b3f      	ldr	r3, [pc, #252]	@ (8007694 <__ieee754_acos+0x3b8>)
 8007596:	0020      	movs	r0, r4
 8007598:	0029      	movs	r1, r5
 800759a:	f7fa fe37 	bl	800220c <__aeabi_dmul>
 800759e:	4a3e      	ldr	r2, [pc, #248]	@ (8007698 <__ieee754_acos+0x3bc>)
 80075a0:	4b3e      	ldr	r3, [pc, #248]	@ (800769c <__ieee754_acos+0x3c0>)
 80075a2:	f7fb f8fb 	bl	800279c <__aeabi_dsub>
 80075a6:	0022      	movs	r2, r4
 80075a8:	002b      	movs	r3, r5
 80075aa:	f7fa fe2f 	bl	800220c <__aeabi_dmul>
 80075ae:	4a3c      	ldr	r2, [pc, #240]	@ (80076a0 <__ieee754_acos+0x3c4>)
 80075b0:	4b3c      	ldr	r3, [pc, #240]	@ (80076a4 <__ieee754_acos+0x3c8>)
 80075b2:	f7f9 fe83 	bl	80012bc <__aeabi_dadd>
 80075b6:	0022      	movs	r2, r4
 80075b8:	002b      	movs	r3, r5
 80075ba:	f7fa fe27 	bl	800220c <__aeabi_dmul>
 80075be:	4a3a      	ldr	r2, [pc, #232]	@ (80076a8 <__ieee754_acos+0x3cc>)
 80075c0:	4b3a      	ldr	r3, [pc, #232]	@ (80076ac <__ieee754_acos+0x3d0>)
 80075c2:	f7fb f8eb 	bl	800279c <__aeabi_dsub>
 80075c6:	0022      	movs	r2, r4
 80075c8:	002b      	movs	r3, r5
 80075ca:	f7fa fe1f 	bl	800220c <__aeabi_dmul>
 80075ce:	2200      	movs	r2, #0
 80075d0:	4b37      	ldr	r3, [pc, #220]	@ (80076b0 <__ieee754_acos+0x3d4>)
 80075d2:	f7f9 fe73 	bl	80012bc <__aeabi_dadd>
 80075d6:	0002      	movs	r2, r0
 80075d8:	000b      	movs	r3, r1
 80075da:	9802      	ldr	r0, [sp, #8]
 80075dc:	9903      	ldr	r1, [sp, #12]
 80075de:	f7fa f9d1 	bl	8001984 <__aeabi_ddiv>
 80075e2:	9a00      	ldr	r2, [sp, #0]
 80075e4:	9b01      	ldr	r3, [sp, #4]
 80075e6:	f7fa fe11 	bl	800220c <__aeabi_dmul>
 80075ea:	2600      	movs	r6, #0
 80075ec:	9002      	str	r0, [sp, #8]
 80075ee:	9103      	str	r1, [sp, #12]
 80075f0:	0032      	movs	r2, r6
 80075f2:	003b      	movs	r3, r7
 80075f4:	0030      	movs	r0, r6
 80075f6:	0039      	movs	r1, r7
 80075f8:	f7fa fe08 	bl	800220c <__aeabi_dmul>
 80075fc:	0002      	movs	r2, r0
 80075fe:	000b      	movs	r3, r1
 8007600:	0020      	movs	r0, r4
 8007602:	0029      	movs	r1, r5
 8007604:	f7fb f8ca 	bl	800279c <__aeabi_dsub>
 8007608:	0032      	movs	r2, r6
 800760a:	0004      	movs	r4, r0
 800760c:	000d      	movs	r5, r1
 800760e:	9800      	ldr	r0, [sp, #0]
 8007610:	9901      	ldr	r1, [sp, #4]
 8007612:	003b      	movs	r3, r7
 8007614:	f7f9 fe52 	bl	80012bc <__aeabi_dadd>
 8007618:	0002      	movs	r2, r0
 800761a:	000b      	movs	r3, r1
 800761c:	0020      	movs	r0, r4
 800761e:	0029      	movs	r1, r5
 8007620:	f7fa f9b0 	bl	8001984 <__aeabi_ddiv>
 8007624:	0002      	movs	r2, r0
 8007626:	000b      	movs	r3, r1
 8007628:	9802      	ldr	r0, [sp, #8]
 800762a:	9903      	ldr	r1, [sp, #12]
 800762c:	f7f9 fe46 	bl	80012bc <__aeabi_dadd>
 8007630:	0032      	movs	r2, r6
 8007632:	003b      	movs	r3, r7
 8007634:	f7f9 fe42 	bl	80012bc <__aeabi_dadd>
 8007638:	0002      	movs	r2, r0
 800763a:	000b      	movs	r3, r1
 800763c:	f7f9 fe3e 	bl	80012bc <__aeabi_dadd>
 8007640:	e65e      	b.n	8007300 <__ieee754_acos+0x24>
 8007642:	481e      	ldr	r0, [pc, #120]	@ (80076bc <__ieee754_acos+0x3e0>)
 8007644:	4920      	ldr	r1, [pc, #128]	@ (80076c8 <__ieee754_acos+0x3ec>)
 8007646:	e65b      	b.n	8007300 <__ieee754_acos+0x24>
 8007648:	481c      	ldr	r0, [pc, #112]	@ (80076bc <__ieee754_acos+0x3e0>)
 800764a:	491d      	ldr	r1, [pc, #116]	@ (80076c0 <__ieee754_acos+0x3e4>)
 800764c:	e658      	b.n	8007300 <__ieee754_acos+0x24>
 800764e:	46c0      	nop			@ (mov r8, r8)
 8007650:	3fefffff 	.word	0x3fefffff
 8007654:	c0100000 	.word	0xc0100000
 8007658:	3fdfffff 	.word	0x3fdfffff
 800765c:	3c600000 	.word	0x3c600000
 8007660:	0dfdf709 	.word	0x0dfdf709
 8007664:	3f023de1 	.word	0x3f023de1
 8007668:	7501b288 	.word	0x7501b288
 800766c:	3f49efe0 	.word	0x3f49efe0
 8007670:	b5688f3b 	.word	0xb5688f3b
 8007674:	3fa48228 	.word	0x3fa48228
 8007678:	0e884455 	.word	0x0e884455
 800767c:	3fc9c155 	.word	0x3fc9c155
 8007680:	03eb6f7d 	.word	0x03eb6f7d
 8007684:	3fd4d612 	.word	0x3fd4d612
 8007688:	55555555 	.word	0x55555555
 800768c:	3fc55555 	.word	0x3fc55555
 8007690:	b12e9282 	.word	0xb12e9282
 8007694:	3fb3b8c5 	.word	0x3fb3b8c5
 8007698:	1b8d0159 	.word	0x1b8d0159
 800769c:	3fe6066c 	.word	0x3fe6066c
 80076a0:	9c598ac8 	.word	0x9c598ac8
 80076a4:	40002ae5 	.word	0x40002ae5
 80076a8:	1c8a2d4b 	.word	0x1c8a2d4b
 80076ac:	40033a27 	.word	0x40033a27
 80076b0:	3ff00000 	.word	0x3ff00000
 80076b4:	33145c07 	.word	0x33145c07
 80076b8:	3c91a626 	.word	0x3c91a626
 80076bc:	54442d18 	.word	0x54442d18
 80076c0:	3ff921fb 	.word	0x3ff921fb
 80076c4:	3fe00000 	.word	0x3fe00000
 80076c8:	400921fb 	.word	0x400921fb

080076cc <__ieee754_log10>:
 80076cc:	2280      	movs	r2, #128	@ 0x80
 80076ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076d0:	000b      	movs	r3, r1
 80076d2:	0004      	movs	r4, r0
 80076d4:	000d      	movs	r5, r1
 80076d6:	b085      	sub	sp, #20
 80076d8:	0352      	lsls	r2, r2, #13
 80076da:	4291      	cmp	r1, r2
 80076dc:	da26      	bge.n	800772c <__ieee754_log10+0x60>
 80076de:	004a      	lsls	r2, r1, #1
 80076e0:	0852      	lsrs	r2, r2, #1
 80076e2:	4302      	orrs	r2, r0
 80076e4:	d107      	bne.n	80076f6 <__ieee754_log10+0x2a>
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	2000      	movs	r0, #0
 80076ec:	4929      	ldr	r1, [pc, #164]	@ (8007794 <__ieee754_log10+0xc8>)
 80076ee:	f7fa f949 	bl	8001984 <__aeabi_ddiv>
 80076f2:	b005      	add	sp, #20
 80076f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076f6:	2900      	cmp	r1, #0
 80076f8:	da05      	bge.n	8007706 <__ieee754_log10+0x3a>
 80076fa:	0002      	movs	r2, r0
 80076fc:	f7fb f84e 	bl	800279c <__aeabi_dsub>
 8007700:	2200      	movs	r2, #0
 8007702:	2300      	movs	r3, #0
 8007704:	e7f3      	b.n	80076ee <__ieee754_log10+0x22>
 8007706:	2200      	movs	r2, #0
 8007708:	4b23      	ldr	r3, [pc, #140]	@ (8007798 <__ieee754_log10+0xcc>)
 800770a:	f7fa fd7f 	bl	800220c <__aeabi_dmul>
 800770e:	2236      	movs	r2, #54	@ 0x36
 8007710:	0004      	movs	r4, r0
 8007712:	000d      	movs	r5, r1
 8007714:	000b      	movs	r3, r1
 8007716:	4252      	negs	r2, r2
 8007718:	4920      	ldr	r1, [pc, #128]	@ (800779c <__ieee754_log10+0xd0>)
 800771a:	428b      	cmp	r3, r1
 800771c:	dd08      	ble.n	8007730 <__ieee754_log10+0x64>
 800771e:	0022      	movs	r2, r4
 8007720:	002b      	movs	r3, r5
 8007722:	0020      	movs	r0, r4
 8007724:	0029      	movs	r1, r5
 8007726:	f7f9 fdc9 	bl	80012bc <__aeabi_dadd>
 800772a:	e7e2      	b.n	80076f2 <__ieee754_log10+0x26>
 800772c:	2200      	movs	r2, #0
 800772e:	e7f3      	b.n	8007718 <__ieee754_log10+0x4c>
 8007730:	491b      	ldr	r1, [pc, #108]	@ (80077a0 <__ieee754_log10+0xd4>)
 8007732:	1518      	asrs	r0, r3, #20
 8007734:	1840      	adds	r0, r0, r1
 8007736:	1880      	adds	r0, r0, r2
 8007738:	0fc2      	lsrs	r2, r0, #31
 800773a:	031b      	lsls	r3, r3, #12
 800773c:	0b1b      	lsrs	r3, r3, #12
 800773e:	1880      	adds	r0, r0, r2
 8007740:	9203      	str	r2, [sp, #12]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	f7fb fc24 	bl	8002f90 <__aeabi_i2d>
 8007748:	9a03      	ldr	r2, [sp, #12]
 800774a:	4b16      	ldr	r3, [pc, #88]	@ (80077a4 <__ieee754_log10+0xd8>)
 800774c:	0006      	movs	r6, r0
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	9a00      	ldr	r2, [sp, #0]
 8007752:	051b      	lsls	r3, r3, #20
 8007754:	431a      	orrs	r2, r3
 8007756:	0015      	movs	r5, r2
 8007758:	4b13      	ldr	r3, [pc, #76]	@ (80077a8 <__ieee754_log10+0xdc>)
 800775a:	4a14      	ldr	r2, [pc, #80]	@ (80077ac <__ieee754_log10+0xe0>)
 800775c:	000f      	movs	r7, r1
 800775e:	f7fa fd55 	bl	800220c <__aeabi_dmul>
 8007762:	9000      	str	r0, [sp, #0]
 8007764:	9101      	str	r1, [sp, #4]
 8007766:	0020      	movs	r0, r4
 8007768:	0029      	movs	r1, r5
 800776a:	f001 fb1d 	bl	8008da8 <__ieee754_log>
 800776e:	4a10      	ldr	r2, [pc, #64]	@ (80077b0 <__ieee754_log10+0xe4>)
 8007770:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <__ieee754_log10+0xe8>)
 8007772:	f7fa fd4b 	bl	800220c <__aeabi_dmul>
 8007776:	9a00      	ldr	r2, [sp, #0]
 8007778:	9b01      	ldr	r3, [sp, #4]
 800777a:	f7f9 fd9f 	bl	80012bc <__aeabi_dadd>
 800777e:	4a0e      	ldr	r2, [pc, #56]	@ (80077b8 <__ieee754_log10+0xec>)
 8007780:	4b0e      	ldr	r3, [pc, #56]	@ (80077bc <__ieee754_log10+0xf0>)
 8007782:	0004      	movs	r4, r0
 8007784:	000d      	movs	r5, r1
 8007786:	0030      	movs	r0, r6
 8007788:	0039      	movs	r1, r7
 800778a:	f7fa fd3f 	bl	800220c <__aeabi_dmul>
 800778e:	0002      	movs	r2, r0
 8007790:	000b      	movs	r3, r1
 8007792:	e7c6      	b.n	8007722 <__ieee754_log10+0x56>
 8007794:	c3500000 	.word	0xc3500000
 8007798:	43500000 	.word	0x43500000
 800779c:	7fefffff 	.word	0x7fefffff
 80077a0:	fffffc01 	.word	0xfffffc01
 80077a4:	000003ff 	.word	0x000003ff
 80077a8:	3d59fef3 	.word	0x3d59fef3
 80077ac:	11f12b36 	.word	0x11f12b36
 80077b0:	1526e50e 	.word	0x1526e50e
 80077b4:	3fdbcb7b 	.word	0x3fdbcb7b
 80077b8:	509f6000 	.word	0x509f6000
 80077bc:	3fd34413 	.word	0x3fd34413

080077c0 <__ieee754_pow>:
 80077c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077c2:	b095      	sub	sp, #84	@ 0x54
 80077c4:	9202      	str	r2, [sp, #8]
 80077c6:	9303      	str	r3, [sp, #12]
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	9a03      	ldr	r2, [sp, #12]
 80077cc:	9306      	str	r3, [sp, #24]
 80077ce:	0052      	lsls	r2, r2, #1
 80077d0:	9b02      	ldr	r3, [sp, #8]
 80077d2:	0852      	lsrs	r2, r2, #1
 80077d4:	9204      	str	r2, [sp, #16]
 80077d6:	001a      	movs	r2, r3
 80077d8:	000f      	movs	r7, r1
 80077da:	9904      	ldr	r1, [sp, #16]
 80077dc:	0006      	movs	r6, r0
 80077de:	430a      	orrs	r2, r1
 80077e0:	d119      	bne.n	8007816 <__ieee754_pow+0x56>
 80077e2:	2180      	movs	r1, #128	@ 0x80
 80077e4:	0309      	lsls	r1, r1, #12
 80077e6:	4079      	eors	r1, r7
 80077e8:	0002      	movs	r2, r0
 80077ea:	000b      	movs	r3, r1
 80077ec:	1892      	adds	r2, r2, r2
 80077ee:	415b      	adcs	r3, r3
 80077f0:	499b      	ldr	r1, [pc, #620]	@ (8007a60 <__ieee754_pow+0x2a0>)
 80077f2:	428b      	cmp	r3, r1
 80077f4:	d806      	bhi.n	8007804 <__ieee754_pow+0x44>
 80077f6:	d001      	beq.n	80077fc <__ieee754_pow+0x3c>
 80077f8:	f000 fcde 	bl	80081b8 <__ieee754_pow+0x9f8>
 80077fc:	2a00      	cmp	r2, #0
 80077fe:	d101      	bne.n	8007804 <__ieee754_pow+0x44>
 8007800:	f000 fcda 	bl	80081b8 <__ieee754_pow+0x9f8>
 8007804:	9a02      	ldr	r2, [sp, #8]
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	0030      	movs	r0, r6
 800780a:	0039      	movs	r1, r7
 800780c:	f7f9 fd56 	bl	80012bc <__aeabi_dadd>
 8007810:	9000      	str	r0, [sp, #0]
 8007812:	9101      	str	r1, [sp, #4]
 8007814:	e0af      	b.n	8007976 <__ieee754_pow+0x1b6>
 8007816:	4a93      	ldr	r2, [pc, #588]	@ (8007a64 <__ieee754_pow+0x2a4>)
 8007818:	007c      	lsls	r4, r7, #1
 800781a:	9708      	str	r7, [sp, #32]
 800781c:	900e      	str	r0, [sp, #56]	@ 0x38
 800781e:	0864      	lsrs	r4, r4, #1
 8007820:	4294      	cmp	r4, r2
 8007822:	d809      	bhi.n	8007838 <__ieee754_pow+0x78>
 8007824:	d101      	bne.n	800782a <__ieee754_pow+0x6a>
 8007826:	2800      	cmp	r0, #0
 8007828:	d1ec      	bne.n	8007804 <__ieee754_pow+0x44>
 800782a:	9904      	ldr	r1, [sp, #16]
 800782c:	4a8d      	ldr	r2, [pc, #564]	@ (8007a64 <__ieee754_pow+0x2a4>)
 800782e:	4291      	cmp	r1, r2
 8007830:	d802      	bhi.n	8007838 <__ieee754_pow+0x78>
 8007832:	d10c      	bne.n	800784e <__ieee754_pow+0x8e>
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00a      	beq.n	800784e <__ieee754_pow+0x8e>
 8007838:	4b8b      	ldr	r3, [pc, #556]	@ (8007a68 <__ieee754_pow+0x2a8>)
 800783a:	18fb      	adds	r3, r7, r3
 800783c:	4333      	orrs	r3, r6
 800783e:	d1e1      	bne.n	8007804 <__ieee754_pow+0x44>
 8007840:	2180      	movs	r1, #128	@ 0x80
 8007842:	9803      	ldr	r0, [sp, #12]
 8007844:	0309      	lsls	r1, r1, #12
 8007846:	4048      	eors	r0, r1
 8007848:	0003      	movs	r3, r0
 800784a:	9a02      	ldr	r2, [sp, #8]
 800784c:	e7ce      	b.n	80077ec <__ieee754_pow+0x2c>
 800784e:	2500      	movs	r5, #0
 8007850:	9a08      	ldr	r2, [sp, #32]
 8007852:	940a      	str	r4, [sp, #40]	@ 0x28
 8007854:	42aa      	cmp	r2, r5
 8007856:	da68      	bge.n	800792a <__ieee754_pow+0x16a>
 8007858:	4a84      	ldr	r2, [pc, #528]	@ (8007a6c <__ieee754_pow+0x2ac>)
 800785a:	9904      	ldr	r1, [sp, #16]
 800785c:	4291      	cmp	r1, r2
 800785e:	d863      	bhi.n	8007928 <__ieee754_pow+0x168>
 8007860:	4a83      	ldr	r2, [pc, #524]	@ (8007a70 <__ieee754_pow+0x2b0>)
 8007862:	4291      	cmp	r1, r2
 8007864:	d910      	bls.n	8007888 <__ieee754_pow+0xc8>
 8007866:	150a      	asrs	r2, r1, #20
 8007868:	4982      	ldr	r1, [pc, #520]	@ (8007a74 <__ieee754_pow+0x2b4>)
 800786a:	1852      	adds	r2, r2, r1
 800786c:	2a14      	cmp	r2, #20
 800786e:	dd3b      	ble.n	80078e8 <__ieee754_pow+0x128>
 8007870:	2134      	movs	r1, #52	@ 0x34
 8007872:	1a89      	subs	r1, r1, r2
 8007874:	9a02      	ldr	r2, [sp, #8]
 8007876:	40ca      	lsrs	r2, r1
 8007878:	0010      	movs	r0, r2
 800787a:	4088      	lsls	r0, r1
 800787c:	4298      	cmp	r0, r3
 800787e:	d103      	bne.n	8007888 <__ieee754_pow+0xc8>
 8007880:	2101      	movs	r1, #1
 8007882:	3502      	adds	r5, #2
 8007884:	400a      	ands	r2, r1
 8007886:	1aad      	subs	r5, r5, r2
 8007888:	2b00      	cmp	r3, #0
 800788a:	d03d      	beq.n	8007908 <__ieee754_pow+0x148>
 800788c:	0030      	movs	r0, r6
 800788e:	0039      	movs	r1, r7
 8007890:	f7ff f9fe 	bl	8006c90 <fabs>
 8007894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007896:	9000      	str	r0, [sp, #0]
 8007898:	9101      	str	r1, [sp, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d000      	beq.n	80078a0 <__ieee754_pow+0xe0>
 800789e:	e093      	b.n	80079c8 <__ieee754_pow+0x208>
 80078a0:	4a75      	ldr	r2, [pc, #468]	@ (8007a78 <__ieee754_pow+0x2b8>)
 80078a2:	00bb      	lsls	r3, r7, #2
 80078a4:	089b      	lsrs	r3, r3, #2
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d002      	beq.n	80078b0 <__ieee754_pow+0xf0>
 80078aa:	2c00      	cmp	r4, #0
 80078ac:	d000      	beq.n	80078b0 <__ieee754_pow+0xf0>
 80078ae:	e08b      	b.n	80079c8 <__ieee754_pow+0x208>
 80078b0:	9b06      	ldr	r3, [sp, #24]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da07      	bge.n	80078c6 <__ieee754_pow+0x106>
 80078b6:	9a00      	ldr	r2, [sp, #0]
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	2000      	movs	r0, #0
 80078bc:	496e      	ldr	r1, [pc, #440]	@ (8007a78 <__ieee754_pow+0x2b8>)
 80078be:	f7fa f861 	bl	8001984 <__aeabi_ddiv>
 80078c2:	9000      	str	r0, [sp, #0]
 80078c4:	9101      	str	r1, [sp, #4]
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	da54      	bge.n	8007976 <__ieee754_pow+0x1b6>
 80078cc:	4b66      	ldr	r3, [pc, #408]	@ (8007a68 <__ieee754_pow+0x2a8>)
 80078ce:	18e4      	adds	r4, r4, r3
 80078d0:	432c      	orrs	r4, r5
 80078d2:	d000      	beq.n	80078d6 <__ieee754_pow+0x116>
 80078d4:	e06d      	b.n	80079b2 <__ieee754_pow+0x1f2>
 80078d6:	9a00      	ldr	r2, [sp, #0]
 80078d8:	9b01      	ldr	r3, [sp, #4]
 80078da:	0010      	movs	r0, r2
 80078dc:	0019      	movs	r1, r3
 80078de:	f7fa ff5d 	bl	800279c <__aeabi_dsub>
 80078e2:	0002      	movs	r2, r0
 80078e4:	000b      	movs	r3, r1
 80078e6:	e01c      	b.n	8007922 <__ieee754_pow+0x162>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d1cf      	bne.n	800788c <__ieee754_pow+0xcc>
 80078ec:	3314      	adds	r3, #20
 80078ee:	1a9a      	subs	r2, r3, r2
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	4113      	asrs	r3, r2
 80078f4:	0019      	movs	r1, r3
 80078f6:	4091      	lsls	r1, r2
 80078f8:	000a      	movs	r2, r1
 80078fa:	9904      	ldr	r1, [sp, #16]
 80078fc:	428a      	cmp	r2, r1
 80078fe:	d103      	bne.n	8007908 <__ieee754_pow+0x148>
 8007900:	2201      	movs	r2, #1
 8007902:	2502      	movs	r5, #2
 8007904:	4013      	ands	r3, r2
 8007906:	1aed      	subs	r5, r5, r3
 8007908:	4b5b      	ldr	r3, [pc, #364]	@ (8007a78 <__ieee754_pow+0x2b8>)
 800790a:	9a04      	ldr	r2, [sp, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	d136      	bne.n	800797e <__ieee754_pow+0x1be>
 8007910:	9b06      	ldr	r3, [sp, #24]
 8007912:	9600      	str	r6, [sp, #0]
 8007914:	9701      	str	r7, [sp, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	da2d      	bge.n	8007976 <__ieee754_pow+0x1b6>
 800791a:	0032      	movs	r2, r6
 800791c:	003b      	movs	r3, r7
 800791e:	2000      	movs	r0, #0
 8007920:	4955      	ldr	r1, [pc, #340]	@ (8007a78 <__ieee754_pow+0x2b8>)
 8007922:	f7fa f82f 	bl	8001984 <__aeabi_ddiv>
 8007926:	e773      	b.n	8007810 <__ieee754_pow+0x50>
 8007928:	2502      	movs	r5, #2
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1ae      	bne.n	800788c <__ieee754_pow+0xcc>
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	4a4c      	ldr	r2, [pc, #304]	@ (8007a64 <__ieee754_pow+0x2a4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d1e8      	bne.n	8007908 <__ieee754_pow+0x148>
 8007936:	4b4c      	ldr	r3, [pc, #304]	@ (8007a68 <__ieee754_pow+0x2a8>)
 8007938:	18e3      	adds	r3, r4, r3
 800793a:	4333      	orrs	r3, r6
 800793c:	d101      	bne.n	8007942 <__ieee754_pow+0x182>
 800793e:	f000 fc3b 	bl	80081b8 <__ieee754_pow+0x9f8>
 8007942:	4b4b      	ldr	r3, [pc, #300]	@ (8007a70 <__ieee754_pow+0x2b0>)
 8007944:	429c      	cmp	r4, r3
 8007946:	d909      	bls.n	800795c <__ieee754_pow+0x19c>
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	2b00      	cmp	r3, #0
 800794c:	da01      	bge.n	8007952 <__ieee754_pow+0x192>
 800794e:	f000 fc37 	bl	80081c0 <__ieee754_pow+0xa00>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	9c03      	ldr	r4, [sp, #12]
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	9401      	str	r4, [sp, #4]
 800795a:	e00c      	b.n	8007976 <__ieee754_pow+0x1b6>
 800795c:	9b06      	ldr	r3, [sp, #24]
 800795e:	2b00      	cmp	r3, #0
 8007960:	db01      	blt.n	8007966 <__ieee754_pow+0x1a6>
 8007962:	f000 fc2d 	bl	80081c0 <__ieee754_pow+0xa00>
 8007966:	2280      	movs	r2, #128	@ 0x80
 8007968:	0612      	lsls	r2, r2, #24
 800796a:	4694      	mov	ip, r2
 800796c:	9b02      	ldr	r3, [sp, #8]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	9b03      	ldr	r3, [sp, #12]
 8007972:	4463      	add	r3, ip
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	9800      	ldr	r0, [sp, #0]
 8007978:	9901      	ldr	r1, [sp, #4]
 800797a:	b015      	add	sp, #84	@ 0x54
 800797c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800797e:	2380      	movs	r3, #128	@ 0x80
 8007980:	9a06      	ldr	r2, [sp, #24]
 8007982:	05db      	lsls	r3, r3, #23
 8007984:	429a      	cmp	r2, r3
 8007986:	d106      	bne.n	8007996 <__ieee754_pow+0x1d6>
 8007988:	0032      	movs	r2, r6
 800798a:	003b      	movs	r3, r7
 800798c:	0030      	movs	r0, r6
 800798e:	0039      	movs	r1, r7
 8007990:	f7fa fc3c 	bl	800220c <__aeabi_dmul>
 8007994:	e73c      	b.n	8007810 <__ieee754_pow+0x50>
 8007996:	4b39      	ldr	r3, [pc, #228]	@ (8007a7c <__ieee754_pow+0x2bc>)
 8007998:	9a06      	ldr	r2, [sp, #24]
 800799a:	429a      	cmp	r2, r3
 800799c:	d000      	beq.n	80079a0 <__ieee754_pow+0x1e0>
 800799e:	e775      	b.n	800788c <__ieee754_pow+0xcc>
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	da00      	bge.n	80079a8 <__ieee754_pow+0x1e8>
 80079a6:	e771      	b.n	800788c <__ieee754_pow+0xcc>
 80079a8:	0030      	movs	r0, r6
 80079aa:	0039      	movs	r1, r7
 80079ac:	f7ff f9c6 	bl	8006d3c <__ieee754_sqrt>
 80079b0:	e72e      	b.n	8007810 <__ieee754_pow+0x50>
 80079b2:	2d01      	cmp	r5, #1
 80079b4:	d1df      	bne.n	8007976 <__ieee754_pow+0x1b6>
 80079b6:	9800      	ldr	r0, [sp, #0]
 80079b8:	2180      	movs	r1, #128	@ 0x80
 80079ba:	0002      	movs	r2, r0
 80079bc:	9801      	ldr	r0, [sp, #4]
 80079be:	0609      	lsls	r1, r1, #24
 80079c0:	1843      	adds	r3, r0, r1
 80079c2:	9200      	str	r2, [sp, #0]
 80079c4:	9301      	str	r3, [sp, #4]
 80079c6:	e7d6      	b.n	8007976 <__ieee754_pow+0x1b6>
 80079c8:	0ffb      	lsrs	r3, r7, #31
 80079ca:	3b01      	subs	r3, #1
 80079cc:	001a      	movs	r2, r3
 80079ce:	432a      	orrs	r2, r5
 80079d0:	d104      	bne.n	80079dc <__ieee754_pow+0x21c>
 80079d2:	0032      	movs	r2, r6
 80079d4:	003b      	movs	r3, r7
 80079d6:	0030      	movs	r0, r6
 80079d8:	0039      	movs	r1, r7
 80079da:	e780      	b.n	80078de <__ieee754_pow+0x11e>
 80079dc:	3d01      	subs	r5, #1
 80079de:	2200      	movs	r2, #0
 80079e0:	431d      	orrs	r5, r3
 80079e2:	d015      	beq.n	8007a10 <__ieee754_pow+0x250>
 80079e4:	4b24      	ldr	r3, [pc, #144]	@ (8007a78 <__ieee754_pow+0x2b8>)
 80079e6:	9208      	str	r2, [sp, #32]
 80079e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80079ea:	2384      	movs	r3, #132	@ 0x84
 80079ec:	9a04      	ldr	r2, [sp, #16]
 80079ee:	05db      	lsls	r3, r3, #23
 80079f0:	429a      	cmp	r2, r3
 80079f2:	d800      	bhi.n	80079f6 <__ieee754_pow+0x236>
 80079f4:	e102      	b.n	8007bfc <__ieee754_pow+0x43c>
 80079f6:	4b22      	ldr	r3, [pc, #136]	@ (8007a80 <__ieee754_pow+0x2c0>)
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d912      	bls.n	8007a22 <__ieee754_pow+0x262>
 80079fc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a70 <__ieee754_pow+0x2b0>)
 80079fe:	429c      	cmp	r4, r3
 8007a00:	d808      	bhi.n	8007a14 <__ieee754_pow+0x254>
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	da08      	bge.n	8007a1a <__ieee754_pow+0x25a>
 8007a08:	2000      	movs	r0, #0
 8007a0a:	f000 fe73 	bl	80086f4 <__math_oflow>
 8007a0e:	e6ff      	b.n	8007810 <__ieee754_pow+0x50>
 8007a10:	4b1c      	ldr	r3, [pc, #112]	@ (8007a84 <__ieee754_pow+0x2c4>)
 8007a12:	e7e8      	b.n	80079e6 <__ieee754_pow+0x226>
 8007a14:	9b06      	ldr	r3, [sp, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	dcf6      	bgt.n	8007a08 <__ieee754_pow+0x248>
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	f000 fe63 	bl	80086e6 <__math_uflow>
 8007a20:	e6f6      	b.n	8007810 <__ieee754_pow+0x50>
 8007a22:	4b19      	ldr	r3, [pc, #100]	@ (8007a88 <__ieee754_pow+0x2c8>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d80b      	bhi.n	8007a40 <__ieee754_pow+0x280>
 8007a28:	9808      	ldr	r0, [sp, #32]
 8007a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f7f8 fd00 	bl	8000434 <__aeabi_dcmplt>
 8007a34:	1e43      	subs	r3, r0, #1
 8007a36:	4198      	sbcs	r0, r3
 8007a38:	9b06      	ldr	r3, [sp, #24]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	daee      	bge.n	8007a1c <__ieee754_pow+0x25c>
 8007a3e:	e7e4      	b.n	8007a0a <__ieee754_pow+0x24a>
 8007a40:	4b0d      	ldr	r3, [pc, #52]	@ (8007a78 <__ieee754_pow+0x2b8>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	429c      	cmp	r4, r3
 8007a46:	d921      	bls.n	8007a8c <__ieee754_pow+0x2cc>
 8007a48:	9808      	ldr	r0, [sp, #32]
 8007a4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f7f8 fcf1 	bl	8000434 <__aeabi_dcmplt>
 8007a52:	1e43      	subs	r3, r0, #1
 8007a54:	4198      	sbcs	r0, r3
 8007a56:	9b06      	ldr	r3, [sp, #24]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	dcd6      	bgt.n	8007a0a <__ieee754_pow+0x24a>
 8007a5c:	e7de      	b.n	8007a1c <__ieee754_pow+0x25c>
 8007a5e:	46c0      	nop			@ (mov r8, r8)
 8007a60:	fff00000 	.word	0xfff00000
 8007a64:	7ff00000 	.word	0x7ff00000
 8007a68:	c0100000 	.word	0xc0100000
 8007a6c:	433fffff 	.word	0x433fffff
 8007a70:	3fefffff 	.word	0x3fefffff
 8007a74:	fffffc01 	.word	0xfffffc01
 8007a78:	3ff00000 	.word	0x3ff00000
 8007a7c:	3fe00000 	.word	0x3fe00000
 8007a80:	43f00000 	.word	0x43f00000
 8007a84:	bff00000 	.word	0xbff00000
 8007a88:	3feffffe 	.word	0x3feffffe
 8007a8c:	9800      	ldr	r0, [sp, #0]
 8007a8e:	9901      	ldr	r1, [sp, #4]
 8007a90:	4b4f      	ldr	r3, [pc, #316]	@ (8007bd0 <__ieee754_pow+0x410>)
 8007a92:	f7fa fe83 	bl	800279c <__aeabi_dsub>
 8007a96:	22c0      	movs	r2, #192	@ 0xc0
 8007a98:	4b4e      	ldr	r3, [pc, #312]	@ (8007bd4 <__ieee754_pow+0x414>)
 8007a9a:	05d2      	lsls	r2, r2, #23
 8007a9c:	0006      	movs	r6, r0
 8007a9e:	000f      	movs	r7, r1
 8007aa0:	f7fa fbb4 	bl	800220c <__aeabi_dmul>
 8007aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8007bd8 <__ieee754_pow+0x418>)
 8007aa6:	9004      	str	r0, [sp, #16]
 8007aa8:	9105      	str	r1, [sp, #20]
 8007aaa:	4b4c      	ldr	r3, [pc, #304]	@ (8007bdc <__ieee754_pow+0x41c>)
 8007aac:	0030      	movs	r0, r6
 8007aae:	0039      	movs	r1, r7
 8007ab0:	f7fa fbac 	bl	800220c <__aeabi_dmul>
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	9000      	str	r0, [sp, #0]
 8007ab8:	9101      	str	r1, [sp, #4]
 8007aba:	4b49      	ldr	r3, [pc, #292]	@ (8007be0 <__ieee754_pow+0x420>)
 8007abc:	0030      	movs	r0, r6
 8007abe:	0039      	movs	r1, r7
 8007ac0:	f7fa fba4 	bl	800220c <__aeabi_dmul>
 8007ac4:	0002      	movs	r2, r0
 8007ac6:	000b      	movs	r3, r1
 8007ac8:	4846      	ldr	r0, [pc, #280]	@ (8007be4 <__ieee754_pow+0x424>)
 8007aca:	4947      	ldr	r1, [pc, #284]	@ (8007be8 <__ieee754_pow+0x428>)
 8007acc:	f7fa fe66 	bl	800279c <__aeabi_dsub>
 8007ad0:	0032      	movs	r2, r6
 8007ad2:	003b      	movs	r3, r7
 8007ad4:	f7fa fb9a 	bl	800220c <__aeabi_dmul>
 8007ad8:	0002      	movs	r2, r0
 8007ada:	000b      	movs	r3, r1
 8007adc:	2000      	movs	r0, #0
 8007ade:	4943      	ldr	r1, [pc, #268]	@ (8007bec <__ieee754_pow+0x42c>)
 8007ae0:	f7fa fe5c 	bl	800279c <__aeabi_dsub>
 8007ae4:	0032      	movs	r2, r6
 8007ae6:	0004      	movs	r4, r0
 8007ae8:	000d      	movs	r5, r1
 8007aea:	003b      	movs	r3, r7
 8007aec:	0030      	movs	r0, r6
 8007aee:	0039      	movs	r1, r7
 8007af0:	f7fa fb8c 	bl	800220c <__aeabi_dmul>
 8007af4:	0002      	movs	r2, r0
 8007af6:	000b      	movs	r3, r1
 8007af8:	0020      	movs	r0, r4
 8007afa:	0029      	movs	r1, r5
 8007afc:	f7fa fb86 	bl	800220c <__aeabi_dmul>
 8007b00:	4a3b      	ldr	r2, [pc, #236]	@ (8007bf0 <__ieee754_pow+0x430>)
 8007b02:	4b34      	ldr	r3, [pc, #208]	@ (8007bd4 <__ieee754_pow+0x414>)
 8007b04:	f7fa fb82 	bl	800220c <__aeabi_dmul>
 8007b08:	0002      	movs	r2, r0
 8007b0a:	000b      	movs	r3, r1
 8007b0c:	9800      	ldr	r0, [sp, #0]
 8007b0e:	9901      	ldr	r1, [sp, #4]
 8007b10:	f7fa fe44 	bl	800279c <__aeabi_dsub>
 8007b14:	0002      	movs	r2, r0
 8007b16:	000b      	movs	r3, r1
 8007b18:	0004      	movs	r4, r0
 8007b1a:	000d      	movs	r5, r1
 8007b1c:	9804      	ldr	r0, [sp, #16]
 8007b1e:	9905      	ldr	r1, [sp, #20]
 8007b20:	f7f9 fbcc 	bl	80012bc <__aeabi_dadd>
 8007b24:	9a04      	ldr	r2, [sp, #16]
 8007b26:	9b05      	ldr	r3, [sp, #20]
 8007b28:	2000      	movs	r0, #0
 8007b2a:	9000      	str	r0, [sp, #0]
 8007b2c:	9101      	str	r1, [sp, #4]
 8007b2e:	f7fa fe35 	bl	800279c <__aeabi_dsub>
 8007b32:	0002      	movs	r2, r0
 8007b34:	000b      	movs	r3, r1
 8007b36:	0020      	movs	r0, r4
 8007b38:	0029      	movs	r1, r5
 8007b3a:	f7fa fe2f 	bl	800279c <__aeabi_dsub>
 8007b3e:	9b02      	ldr	r3, [sp, #8]
 8007b40:	9c03      	ldr	r4, [sp, #12]
 8007b42:	9304      	str	r3, [sp, #16]
 8007b44:	9405      	str	r4, [sp, #20]
 8007b46:	2300      	movs	r3, #0
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	9c04      	ldr	r4, [sp, #16]
 8007b4c:	9d05      	ldr	r5, [sp, #20]
 8007b4e:	0006      	movs	r6, r0
 8007b50:	000f      	movs	r7, r1
 8007b52:	9802      	ldr	r0, [sp, #8]
 8007b54:	9903      	ldr	r1, [sp, #12]
 8007b56:	0022      	movs	r2, r4
 8007b58:	002b      	movs	r3, r5
 8007b5a:	f7fa fe1f 	bl	800279c <__aeabi_dsub>
 8007b5e:	9a00      	ldr	r2, [sp, #0]
 8007b60:	9b01      	ldr	r3, [sp, #4]
 8007b62:	f7fa fb53 	bl	800220c <__aeabi_dmul>
 8007b66:	9a02      	ldr	r2, [sp, #8]
 8007b68:	9b03      	ldr	r3, [sp, #12]
 8007b6a:	9006      	str	r0, [sp, #24]
 8007b6c:	9107      	str	r1, [sp, #28]
 8007b6e:	0030      	movs	r0, r6
 8007b70:	0039      	movs	r1, r7
 8007b72:	f7fa fb4b 	bl	800220c <__aeabi_dmul>
 8007b76:	0002      	movs	r2, r0
 8007b78:	000b      	movs	r3, r1
 8007b7a:	9806      	ldr	r0, [sp, #24]
 8007b7c:	9907      	ldr	r1, [sp, #28]
 8007b7e:	f7f9 fb9d 	bl	80012bc <__aeabi_dadd>
 8007b82:	0022      	movs	r2, r4
 8007b84:	002b      	movs	r3, r5
 8007b86:	9002      	str	r0, [sp, #8]
 8007b88:	9103      	str	r1, [sp, #12]
 8007b8a:	9800      	ldr	r0, [sp, #0]
 8007b8c:	9901      	ldr	r1, [sp, #4]
 8007b8e:	f7fa fb3d 	bl	800220c <__aeabi_dmul>
 8007b92:	000b      	movs	r3, r1
 8007b94:	0002      	movs	r2, r0
 8007b96:	0006      	movs	r6, r0
 8007b98:	000f      	movs	r7, r1
 8007b9a:	9802      	ldr	r0, [sp, #8]
 8007b9c:	9903      	ldr	r1, [sp, #12]
 8007b9e:	f7f9 fb8d 	bl	80012bc <__aeabi_dadd>
 8007ba2:	9000      	str	r0, [sp, #0]
 8007ba4:	9101      	str	r1, [sp, #4]
 8007ba6:	9c01      	ldr	r4, [sp, #4]
 8007ba8:	4b12      	ldr	r3, [pc, #72]	@ (8007bf4 <__ieee754_pow+0x434>)
 8007baa:	9406      	str	r4, [sp, #24]
 8007bac:	429c      	cmp	r4, r3
 8007bae:	dc00      	bgt.n	8007bb2 <__ieee754_pow+0x3f2>
 8007bb0:	e222      	b.n	8007ff8 <__ieee754_pow+0x838>
 8007bb2:	4a11      	ldr	r2, [pc, #68]	@ (8007bf8 <__ieee754_pow+0x438>)
 8007bb4:	18a3      	adds	r3, r4, r2
 8007bb6:	9a00      	ldr	r2, [sp, #0]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	d100      	bne.n	8007bbe <__ieee754_pow+0x3fe>
 8007bbc:	e1a0      	b.n	8007f00 <__ieee754_pow+0x740>
 8007bbe:	9808      	ldr	r0, [sp, #32]
 8007bc0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f7f8 fc35 	bl	8000434 <__aeabi_dcmplt>
 8007bca:	1e43      	subs	r3, r0, #1
 8007bcc:	4198      	sbcs	r0, r3
 8007bce:	e71c      	b.n	8007a0a <__ieee754_pow+0x24a>
 8007bd0:	3ff00000 	.word	0x3ff00000
 8007bd4:	3ff71547 	.word	0x3ff71547
 8007bd8:	f85ddf44 	.word	0xf85ddf44
 8007bdc:	3e54ae0b 	.word	0x3e54ae0b
 8007be0:	3fd00000 	.word	0x3fd00000
 8007be4:	55555555 	.word	0x55555555
 8007be8:	3fd55555 	.word	0x3fd55555
 8007bec:	3fe00000 	.word	0x3fe00000
 8007bf0:	652b82fe 	.word	0x652b82fe
 8007bf4:	408fffff 	.word	0x408fffff
 8007bf8:	bf700000 	.word	0xbf700000
 8007bfc:	4be0      	ldr	r3, [pc, #896]	@ (8007f80 <__ieee754_pow+0x7c0>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	423b      	tst	r3, r7
 8007c02:	d10b      	bne.n	8007c1c <__ieee754_pow+0x45c>
 8007c04:	9800      	ldr	r0, [sp, #0]
 8007c06:	9901      	ldr	r1, [sp, #4]
 8007c08:	2200      	movs	r2, #0
 8007c0a:	4bde      	ldr	r3, [pc, #888]	@ (8007f84 <__ieee754_pow+0x7c4>)
 8007c0c:	f7fa fafe 	bl	800220c <__aeabi_dmul>
 8007c10:	2235      	movs	r2, #53	@ 0x35
 8007c12:	9000      	str	r0, [sp, #0]
 8007c14:	9101      	str	r1, [sp, #4]
 8007c16:	9b01      	ldr	r3, [sp, #4]
 8007c18:	4252      	negs	r2, r2
 8007c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c1e:	49da      	ldr	r1, [pc, #872]	@ (8007f88 <__ieee754_pow+0x7c8>)
 8007c20:	151b      	asrs	r3, r3, #20
 8007c22:	185b      	adds	r3, r3, r1
 8007c24:	189b      	adds	r3, r3, r2
 8007c26:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c2a:	4dd8      	ldr	r5, [pc, #864]	@ (8007f8c <__ieee754_pow+0x7cc>)
 8007c2c:	031b      	lsls	r3, r3, #12
 8007c2e:	4ad8      	ldr	r2, [pc, #864]	@ (8007f90 <__ieee754_pow+0x7d0>)
 8007c30:	0b1b      	lsrs	r3, r3, #12
 8007c32:	2600      	movs	r6, #0
 8007c34:	431d      	orrs	r5, r3
 8007c36:	4293      	cmp	r3, r2
 8007c38:	dd09      	ble.n	8007c4e <__ieee754_pow+0x48e>
 8007c3a:	4ad6      	ldr	r2, [pc, #856]	@ (8007f94 <__ieee754_pow+0x7d4>)
 8007c3c:	3601      	adds	r6, #1
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	dd05      	ble.n	8007c4e <__ieee754_pow+0x48e>
 8007c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c44:	199b      	adds	r3, r3, r6
 8007c46:	2600      	movs	r6, #0
 8007c48:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c4a:	4bd3      	ldr	r3, [pc, #844]	@ (8007f98 <__ieee754_pow+0x7d8>)
 8007c4c:	18ed      	adds	r5, r5, r3
 8007c4e:	9800      	ldr	r0, [sp, #0]
 8007c50:	9901      	ldr	r1, [sp, #4]
 8007c52:	0029      	movs	r1, r5
 8007c54:	4bd1      	ldr	r3, [pc, #836]	@ (8007f9c <__ieee754_pow+0x7dc>)
 8007c56:	00f2      	lsls	r2, r6, #3
 8007c58:	189b      	adds	r3, r3, r2
 8007c5a:	685c      	ldr	r4, [r3, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c62:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c64:	001a      	movs	r2, r3
 8007c66:	0023      	movs	r3, r4
 8007c68:	900c      	str	r0, [sp, #48]	@ 0x30
 8007c6a:	910d      	str	r1, [sp, #52]	@ 0x34
 8007c6c:	f7fa fd96 	bl	800279c <__aeabi_dsub>
 8007c70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c74:	9010      	str	r0, [sp, #64]	@ 0x40
 8007c76:	9111      	str	r1, [sp, #68]	@ 0x44
 8007c78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c7c:	f7f9 fb1e 	bl	80012bc <__aeabi_dadd>
 8007c80:	0002      	movs	r2, r0
 8007c82:	000b      	movs	r3, r1
 8007c84:	2000      	movs	r0, #0
 8007c86:	49c1      	ldr	r1, [pc, #772]	@ (8007f8c <__ieee754_pow+0x7cc>)
 8007c88:	f7f9 fe7c 	bl	8001984 <__aeabi_ddiv>
 8007c8c:	0002      	movs	r2, r0
 8007c8e:	000b      	movs	r3, r1
 8007c90:	9012      	str	r0, [sp, #72]	@ 0x48
 8007c92:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007c94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007c96:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007c98:	f7fa fab8 	bl	800220c <__aeabi_dmul>
 8007c9c:	9006      	str	r0, [sp, #24]
 8007c9e:	9107      	str	r1, [sp, #28]
 8007ca0:	9b06      	ldr	r3, [sp, #24]
 8007ca2:	9c07      	ldr	r4, [sp, #28]
 8007ca4:	2180      	movs	r1, #128	@ 0x80
 8007ca6:	9304      	str	r3, [sp, #16]
 8007ca8:	9405      	str	r4, [sp, #20]
 8007caa:	2080      	movs	r0, #128	@ 0x80
 8007cac:	2300      	movs	r3, #0
 8007cae:	2200      	movs	r2, #0
 8007cb0:	106d      	asrs	r5, r5, #1
 8007cb2:	0589      	lsls	r1, r1, #22
 8007cb4:	9304      	str	r3, [sp, #16]
 8007cb6:	4329      	orrs	r1, r5
 8007cb8:	0300      	lsls	r0, r0, #12
 8007cba:	9b04      	ldr	r3, [sp, #16]
 8007cbc:	9c05      	ldr	r4, [sp, #20]
 8007cbe:	1809      	adds	r1, r1, r0
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	9401      	str	r4, [sp, #4]
 8007cc4:	04b6      	lsls	r6, r6, #18
 8007cc6:	198b      	adds	r3, r1, r6
 8007cc8:	9800      	ldr	r0, [sp, #0]
 8007cca:	9901      	ldr	r1, [sp, #4]
 8007ccc:	0014      	movs	r4, r2
 8007cce:	001d      	movs	r5, r3
 8007cd0:	f7fa fa9c 	bl	800220c <__aeabi_dmul>
 8007cd4:	0002      	movs	r2, r0
 8007cd6:	000b      	movs	r3, r1
 8007cd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8007cda:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8007cdc:	f7fa fd5e 	bl	800279c <__aeabi_dsub>
 8007ce0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ce2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ce4:	0006      	movs	r6, r0
 8007ce6:	000f      	movs	r7, r1
 8007ce8:	0020      	movs	r0, r4
 8007cea:	0029      	movs	r1, r5
 8007cec:	f7fa fd56 	bl	800279c <__aeabi_dsub>
 8007cf0:	0002      	movs	r2, r0
 8007cf2:	000b      	movs	r3, r1
 8007cf4:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007cf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007cf8:	f7fa fd50 	bl	800279c <__aeabi_dsub>
 8007cfc:	9a00      	ldr	r2, [sp, #0]
 8007cfe:	9b01      	ldr	r3, [sp, #4]
 8007d00:	f7fa fa84 	bl	800220c <__aeabi_dmul>
 8007d04:	0002      	movs	r2, r0
 8007d06:	000b      	movs	r3, r1
 8007d08:	0030      	movs	r0, r6
 8007d0a:	0039      	movs	r1, r7
 8007d0c:	f7fa fd46 	bl	800279c <__aeabi_dsub>
 8007d10:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d14:	f7fa fa7a 	bl	800220c <__aeabi_dmul>
 8007d18:	9a06      	ldr	r2, [sp, #24]
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d1e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007d20:	0010      	movs	r0, r2
 8007d22:	0019      	movs	r1, r3
 8007d24:	f7fa fa72 	bl	800220c <__aeabi_dmul>
 8007d28:	0006      	movs	r6, r0
 8007d2a:	000f      	movs	r7, r1
 8007d2c:	4a9c      	ldr	r2, [pc, #624]	@ (8007fa0 <__ieee754_pow+0x7e0>)
 8007d2e:	4b9d      	ldr	r3, [pc, #628]	@ (8007fa4 <__ieee754_pow+0x7e4>)
 8007d30:	f7fa fa6c 	bl	800220c <__aeabi_dmul>
 8007d34:	4a9c      	ldr	r2, [pc, #624]	@ (8007fa8 <__ieee754_pow+0x7e8>)
 8007d36:	4b9d      	ldr	r3, [pc, #628]	@ (8007fac <__ieee754_pow+0x7ec>)
 8007d38:	f7f9 fac0 	bl	80012bc <__aeabi_dadd>
 8007d3c:	0032      	movs	r2, r6
 8007d3e:	003b      	movs	r3, r7
 8007d40:	f7fa fa64 	bl	800220c <__aeabi_dmul>
 8007d44:	4a9a      	ldr	r2, [pc, #616]	@ (8007fb0 <__ieee754_pow+0x7f0>)
 8007d46:	4b9b      	ldr	r3, [pc, #620]	@ (8007fb4 <__ieee754_pow+0x7f4>)
 8007d48:	f7f9 fab8 	bl	80012bc <__aeabi_dadd>
 8007d4c:	0032      	movs	r2, r6
 8007d4e:	003b      	movs	r3, r7
 8007d50:	f7fa fa5c 	bl	800220c <__aeabi_dmul>
 8007d54:	4a98      	ldr	r2, [pc, #608]	@ (8007fb8 <__ieee754_pow+0x7f8>)
 8007d56:	4b99      	ldr	r3, [pc, #612]	@ (8007fbc <__ieee754_pow+0x7fc>)
 8007d58:	f7f9 fab0 	bl	80012bc <__aeabi_dadd>
 8007d5c:	0032      	movs	r2, r6
 8007d5e:	003b      	movs	r3, r7
 8007d60:	f7fa fa54 	bl	800220c <__aeabi_dmul>
 8007d64:	4a96      	ldr	r2, [pc, #600]	@ (8007fc0 <__ieee754_pow+0x800>)
 8007d66:	4b97      	ldr	r3, [pc, #604]	@ (8007fc4 <__ieee754_pow+0x804>)
 8007d68:	f7f9 faa8 	bl	80012bc <__aeabi_dadd>
 8007d6c:	0032      	movs	r2, r6
 8007d6e:	003b      	movs	r3, r7
 8007d70:	f7fa fa4c 	bl	800220c <__aeabi_dmul>
 8007d74:	4a94      	ldr	r2, [pc, #592]	@ (8007fc8 <__ieee754_pow+0x808>)
 8007d76:	4b95      	ldr	r3, [pc, #596]	@ (8007fcc <__ieee754_pow+0x80c>)
 8007d78:	f7f9 faa0 	bl	80012bc <__aeabi_dadd>
 8007d7c:	0032      	movs	r2, r6
 8007d7e:	0004      	movs	r4, r0
 8007d80:	000d      	movs	r5, r1
 8007d82:	003b      	movs	r3, r7
 8007d84:	0030      	movs	r0, r6
 8007d86:	0039      	movs	r1, r7
 8007d88:	f7fa fa40 	bl	800220c <__aeabi_dmul>
 8007d8c:	0002      	movs	r2, r0
 8007d8e:	000b      	movs	r3, r1
 8007d90:	0020      	movs	r0, r4
 8007d92:	0029      	movs	r1, r5
 8007d94:	f7fa fa3a 	bl	800220c <__aeabi_dmul>
 8007d98:	9a00      	ldr	r2, [sp, #0]
 8007d9a:	9b01      	ldr	r3, [sp, #4]
 8007d9c:	0004      	movs	r4, r0
 8007d9e:	000d      	movs	r5, r1
 8007da0:	9806      	ldr	r0, [sp, #24]
 8007da2:	9907      	ldr	r1, [sp, #28]
 8007da4:	f7f9 fa8a 	bl	80012bc <__aeabi_dadd>
 8007da8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007daa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007dac:	f7fa fa2e 	bl	800220c <__aeabi_dmul>
 8007db0:	0022      	movs	r2, r4
 8007db2:	002b      	movs	r3, r5
 8007db4:	f7f9 fa82 	bl	80012bc <__aeabi_dadd>
 8007db8:	9a00      	ldr	r2, [sp, #0]
 8007dba:	9b01      	ldr	r3, [sp, #4]
 8007dbc:	900c      	str	r0, [sp, #48]	@ 0x30
 8007dbe:	910d      	str	r1, [sp, #52]	@ 0x34
 8007dc0:	0010      	movs	r0, r2
 8007dc2:	0019      	movs	r1, r3
 8007dc4:	f7fa fa22 	bl	800220c <__aeabi_dmul>
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4b81      	ldr	r3, [pc, #516]	@ (8007fd0 <__ieee754_pow+0x810>)
 8007dcc:	0004      	movs	r4, r0
 8007dce:	000d      	movs	r5, r1
 8007dd0:	f7f9 fa74 	bl	80012bc <__aeabi_dadd>
 8007dd4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dd8:	f7f9 fa70 	bl	80012bc <__aeabi_dadd>
 8007ddc:	2000      	movs	r0, #0
 8007dde:	000f      	movs	r7, r1
 8007de0:	0006      	movs	r6, r0
 8007de2:	0002      	movs	r2, r0
 8007de4:	000b      	movs	r3, r1
 8007de6:	9800      	ldr	r0, [sp, #0]
 8007de8:	9901      	ldr	r1, [sp, #4]
 8007dea:	f7fa fa0f 	bl	800220c <__aeabi_dmul>
 8007dee:	2200      	movs	r2, #0
 8007df0:	9000      	str	r0, [sp, #0]
 8007df2:	9101      	str	r1, [sp, #4]
 8007df4:	4b76      	ldr	r3, [pc, #472]	@ (8007fd0 <__ieee754_pow+0x810>)
 8007df6:	0030      	movs	r0, r6
 8007df8:	0039      	movs	r1, r7
 8007dfa:	f7fa fccf 	bl	800279c <__aeabi_dsub>
 8007dfe:	0022      	movs	r2, r4
 8007e00:	002b      	movs	r3, r5
 8007e02:	f7fa fccb 	bl	800279c <__aeabi_dsub>
 8007e06:	0002      	movs	r2, r0
 8007e08:	000b      	movs	r3, r1
 8007e0a:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007e0c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e0e:	f7fa fcc5 	bl	800279c <__aeabi_dsub>
 8007e12:	9a06      	ldr	r2, [sp, #24]
 8007e14:	9b07      	ldr	r3, [sp, #28]
 8007e16:	f7fa f9f9 	bl	800220c <__aeabi_dmul>
 8007e1a:	0032      	movs	r2, r6
 8007e1c:	0004      	movs	r4, r0
 8007e1e:	000d      	movs	r5, r1
 8007e20:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007e22:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e24:	003b      	movs	r3, r7
 8007e26:	f7fa f9f1 	bl	800220c <__aeabi_dmul>
 8007e2a:	0002      	movs	r2, r0
 8007e2c:	000b      	movs	r3, r1
 8007e2e:	0020      	movs	r0, r4
 8007e30:	0029      	movs	r1, r5
 8007e32:	f7f9 fa43 	bl	80012bc <__aeabi_dadd>
 8007e36:	0004      	movs	r4, r0
 8007e38:	000d      	movs	r5, r1
 8007e3a:	0002      	movs	r2, r0
 8007e3c:	000b      	movs	r3, r1
 8007e3e:	9800      	ldr	r0, [sp, #0]
 8007e40:	9901      	ldr	r1, [sp, #4]
 8007e42:	f7f9 fa3b 	bl	80012bc <__aeabi_dadd>
 8007e46:	22e0      	movs	r2, #224	@ 0xe0
 8007e48:	2000      	movs	r0, #0
 8007e4a:	4b62      	ldr	r3, [pc, #392]	@ (8007fd4 <__ieee754_pow+0x814>)
 8007e4c:	0612      	lsls	r2, r2, #24
 8007e4e:	0006      	movs	r6, r0
 8007e50:	000f      	movs	r7, r1
 8007e52:	f7fa f9db 	bl	800220c <__aeabi_dmul>
 8007e56:	9006      	str	r0, [sp, #24]
 8007e58:	9107      	str	r1, [sp, #28]
 8007e5a:	9a00      	ldr	r2, [sp, #0]
 8007e5c:	9b01      	ldr	r3, [sp, #4]
 8007e5e:	0030      	movs	r0, r6
 8007e60:	0039      	movs	r1, r7
 8007e62:	f7fa fc9b 	bl	800279c <__aeabi_dsub>
 8007e66:	0002      	movs	r2, r0
 8007e68:	000b      	movs	r3, r1
 8007e6a:	0020      	movs	r0, r4
 8007e6c:	0029      	movs	r1, r5
 8007e6e:	f7fa fc95 	bl	800279c <__aeabi_dsub>
 8007e72:	4a59      	ldr	r2, [pc, #356]	@ (8007fd8 <__ieee754_pow+0x818>)
 8007e74:	4b57      	ldr	r3, [pc, #348]	@ (8007fd4 <__ieee754_pow+0x814>)
 8007e76:	f7fa f9c9 	bl	800220c <__aeabi_dmul>
 8007e7a:	4a58      	ldr	r2, [pc, #352]	@ (8007fdc <__ieee754_pow+0x81c>)
 8007e7c:	0004      	movs	r4, r0
 8007e7e:	000d      	movs	r5, r1
 8007e80:	0030      	movs	r0, r6
 8007e82:	0039      	movs	r1, r7
 8007e84:	4b56      	ldr	r3, [pc, #344]	@ (8007fe0 <__ieee754_pow+0x820>)
 8007e86:	f7fa f9c1 	bl	800220c <__aeabi_dmul>
 8007e8a:	0002      	movs	r2, r0
 8007e8c:	000b      	movs	r3, r1
 8007e8e:	0020      	movs	r0, r4
 8007e90:	0029      	movs	r1, r5
 8007e92:	f7f9 fa13 	bl	80012bc <__aeabi_dadd>
 8007e96:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e98:	4b52      	ldr	r3, [pc, #328]	@ (8007fe4 <__ieee754_pow+0x824>)
 8007e9a:	189b      	adds	r3, r3, r2
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f7f9 fa0c 	bl	80012bc <__aeabi_dadd>
 8007ea4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ea6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007ea8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8007eaa:	f7fb f871 	bl	8002f90 <__aeabi_i2d>
 8007eae:	0004      	movs	r4, r0
 8007eb0:	000d      	movs	r5, r1
 8007eb2:	9806      	ldr	r0, [sp, #24]
 8007eb4:	9907      	ldr	r1, [sp, #28]
 8007eb6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8007fe8 <__ieee754_pow+0x828>)
 8007eba:	189b      	adds	r3, r3, r2
 8007ebc:	681e      	ldr	r6, [r3, #0]
 8007ebe:	685f      	ldr	r7, [r3, #4]
 8007ec0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ec2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ec4:	f7f9 f9fa 	bl	80012bc <__aeabi_dadd>
 8007ec8:	0032      	movs	r2, r6
 8007eca:	003b      	movs	r3, r7
 8007ecc:	f7f9 f9f6 	bl	80012bc <__aeabi_dadd>
 8007ed0:	0022      	movs	r2, r4
 8007ed2:	002b      	movs	r3, r5
 8007ed4:	f7f9 f9f2 	bl	80012bc <__aeabi_dadd>
 8007ed8:	2000      	movs	r0, #0
 8007eda:	0022      	movs	r2, r4
 8007edc:	002b      	movs	r3, r5
 8007ede:	9000      	str	r0, [sp, #0]
 8007ee0:	9101      	str	r1, [sp, #4]
 8007ee2:	f7fa fc5b 	bl	800279c <__aeabi_dsub>
 8007ee6:	0032      	movs	r2, r6
 8007ee8:	003b      	movs	r3, r7
 8007eea:	f7fa fc57 	bl	800279c <__aeabi_dsub>
 8007eee:	9a06      	ldr	r2, [sp, #24]
 8007ef0:	9b07      	ldr	r3, [sp, #28]
 8007ef2:	f7fa fc53 	bl	800279c <__aeabi_dsub>
 8007ef6:	0002      	movs	r2, r0
 8007ef8:	000b      	movs	r3, r1
 8007efa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007efe:	e61c      	b.n	8007b3a <__ieee754_pow+0x37a>
 8007f00:	4a3a      	ldr	r2, [pc, #232]	@ (8007fec <__ieee754_pow+0x82c>)
 8007f02:	4b3b      	ldr	r3, [pc, #236]	@ (8007ff0 <__ieee754_pow+0x830>)
 8007f04:	9802      	ldr	r0, [sp, #8]
 8007f06:	9903      	ldr	r1, [sp, #12]
 8007f08:	f7f9 f9d8 	bl	80012bc <__aeabi_dadd>
 8007f0c:	0032      	movs	r2, r6
 8007f0e:	003b      	movs	r3, r7
 8007f10:	9004      	str	r0, [sp, #16]
 8007f12:	9105      	str	r1, [sp, #20]
 8007f14:	9800      	ldr	r0, [sp, #0]
 8007f16:	9901      	ldr	r1, [sp, #4]
 8007f18:	f7fa fc40 	bl	800279c <__aeabi_dsub>
 8007f1c:	0002      	movs	r2, r0
 8007f1e:	000b      	movs	r3, r1
 8007f20:	9804      	ldr	r0, [sp, #16]
 8007f22:	9905      	ldr	r1, [sp, #20]
 8007f24:	f7f8 fa9a 	bl	800045c <__aeabi_dcmpgt>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d000      	beq.n	8007f2e <__ieee754_pow+0x76e>
 8007f2c:	e647      	b.n	8007bbe <__ieee754_pow+0x3fe>
 8007f2e:	2580      	movs	r5, #128	@ 0x80
 8007f30:	4b30      	ldr	r3, [pc, #192]	@ (8007ff4 <__ieee754_pow+0x834>)
 8007f32:	036d      	lsls	r5, r5, #13
 8007f34:	1524      	asrs	r4, r4, #20
 8007f36:	18e4      	adds	r4, r4, r3
 8007f38:	002b      	movs	r3, r5
 8007f3a:	4123      	asrs	r3, r4
 8007f3c:	9a06      	ldr	r2, [sp, #24]
 8007f3e:	4912      	ldr	r1, [pc, #72]	@ (8007f88 <__ieee754_pow+0x7c8>)
 8007f40:	189b      	adds	r3, r3, r2
 8007f42:	005a      	lsls	r2, r3, #1
 8007f44:	4c14      	ldr	r4, [pc, #80]	@ (8007f98 <__ieee754_pow+0x7d8>)
 8007f46:	0d52      	lsrs	r2, r2, #21
 8007f48:	1852      	adds	r2, r2, r1
 8007f4a:	4114      	asrs	r4, r2
 8007f4c:	401c      	ands	r4, r3
 8007f4e:	0021      	movs	r1, r4
 8007f50:	2414      	movs	r4, #20
 8007f52:	031b      	lsls	r3, r3, #12
 8007f54:	0b1b      	lsrs	r3, r3, #12
 8007f56:	432b      	orrs	r3, r5
 8007f58:	1aa2      	subs	r2, r4, r2
 8007f5a:	4113      	asrs	r3, r2
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	9b06      	ldr	r3, [sp, #24]
 8007f60:	2000      	movs	r0, #0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	da02      	bge.n	8007f6c <__ieee754_pow+0x7ac>
 8007f66:	9b00      	ldr	r3, [sp, #0]
 8007f68:	425b      	negs	r3, r3
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	0002      	movs	r2, r0
 8007f6e:	000b      	movs	r3, r1
 8007f70:	0030      	movs	r0, r6
 8007f72:	0039      	movs	r1, r7
 8007f74:	f7fa fc12 	bl	800279c <__aeabi_dsub>
 8007f78:	0006      	movs	r6, r0
 8007f7a:	000f      	movs	r7, r1
 8007f7c:	e065      	b.n	800804a <__ieee754_pow+0x88a>
 8007f7e:	46c0      	nop			@ (mov r8, r8)
 8007f80:	7ff00000 	.word	0x7ff00000
 8007f84:	43400000 	.word	0x43400000
 8007f88:	fffffc01 	.word	0xfffffc01
 8007f8c:	3ff00000 	.word	0x3ff00000
 8007f90:	0003988e 	.word	0x0003988e
 8007f94:	000bb679 	.word	0x000bb679
 8007f98:	fff00000 	.word	0xfff00000
 8007f9c:	0800a2f0 	.word	0x0800a2f0
 8007fa0:	4a454eef 	.word	0x4a454eef
 8007fa4:	3fca7e28 	.word	0x3fca7e28
 8007fa8:	93c9db65 	.word	0x93c9db65
 8007fac:	3fcd864a 	.word	0x3fcd864a
 8007fb0:	a91d4101 	.word	0xa91d4101
 8007fb4:	3fd17460 	.word	0x3fd17460
 8007fb8:	518f264d 	.word	0x518f264d
 8007fbc:	3fd55555 	.word	0x3fd55555
 8007fc0:	db6fabff 	.word	0xdb6fabff
 8007fc4:	3fdb6db6 	.word	0x3fdb6db6
 8007fc8:	33333303 	.word	0x33333303
 8007fcc:	3fe33333 	.word	0x3fe33333
 8007fd0:	40080000 	.word	0x40080000
 8007fd4:	3feec709 	.word	0x3feec709
 8007fd8:	dc3a03fd 	.word	0xdc3a03fd
 8007fdc:	145b01f5 	.word	0x145b01f5
 8007fe0:	be3e2fe0 	.word	0xbe3e2fe0
 8007fe4:	0800a2d0 	.word	0x0800a2d0
 8007fe8:	0800a2e0 	.word	0x0800a2e0
 8007fec:	652b82fe 	.word	0x652b82fe
 8007ff0:	3c971547 	.word	0x3c971547
 8007ff4:	fffffc02 	.word	0xfffffc02
 8007ff8:	9b01      	ldr	r3, [sp, #4]
 8007ffa:	005c      	lsls	r4, r3, #1
 8007ffc:	4b72      	ldr	r3, [pc, #456]	@ (80081c8 <__ieee754_pow+0xa08>)
 8007ffe:	0864      	lsrs	r4, r4, #1
 8008000:	429c      	cmp	r4, r3
 8008002:	d91c      	bls.n	800803e <__ieee754_pow+0x87e>
 8008004:	4a71      	ldr	r2, [pc, #452]	@ (80081cc <__ieee754_pow+0xa0c>)
 8008006:	9b01      	ldr	r3, [sp, #4]
 8008008:	189b      	adds	r3, r3, r2
 800800a:	9a00      	ldr	r2, [sp, #0]
 800800c:	4313      	orrs	r3, r2
 800800e:	d008      	beq.n	8008022 <__ieee754_pow+0x862>
 8008010:	9808      	ldr	r0, [sp, #32]
 8008012:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008014:	2300      	movs	r3, #0
 8008016:	2200      	movs	r2, #0
 8008018:	f7f8 fa0c 	bl	8000434 <__aeabi_dcmplt>
 800801c:	1e43      	subs	r3, r0, #1
 800801e:	4198      	sbcs	r0, r3
 8008020:	e4fc      	b.n	8007a1c <__ieee754_pow+0x25c>
 8008022:	0032      	movs	r2, r6
 8008024:	9800      	ldr	r0, [sp, #0]
 8008026:	9901      	ldr	r1, [sp, #4]
 8008028:	003b      	movs	r3, r7
 800802a:	f7fa fbb7 	bl	800279c <__aeabi_dsub>
 800802e:	9a02      	ldr	r2, [sp, #8]
 8008030:	9b03      	ldr	r3, [sp, #12]
 8008032:	f7f8 fa1d 	bl	8000470 <__aeabi_dcmpge>
 8008036:	2800      	cmp	r0, #0
 8008038:	d1ea      	bne.n	8008010 <__ieee754_pow+0x850>
 800803a:	4c65      	ldr	r4, [pc, #404]	@ (80081d0 <__ieee754_pow+0xa10>)
 800803c:	e777      	b.n	8007f2e <__ieee754_pow+0x76e>
 800803e:	9a04      	ldr	r2, [sp, #16]
 8008040:	4b64      	ldr	r3, [pc, #400]	@ (80081d4 <__ieee754_pow+0xa14>)
 8008042:	9200      	str	r2, [sp, #0]
 8008044:	429c      	cmp	r4, r3
 8008046:	d900      	bls.n	800804a <__ieee754_pow+0x88a>
 8008048:	e771      	b.n	8007f2e <__ieee754_pow+0x76e>
 800804a:	9a02      	ldr	r2, [sp, #8]
 800804c:	9b03      	ldr	r3, [sp, #12]
 800804e:	0030      	movs	r0, r6
 8008050:	0039      	movs	r1, r7
 8008052:	f7f9 f933 	bl	80012bc <__aeabi_dadd>
 8008056:	2000      	movs	r0, #0
 8008058:	2200      	movs	r2, #0
 800805a:	4b5f      	ldr	r3, [pc, #380]	@ (80081d8 <__ieee754_pow+0xa18>)
 800805c:	9004      	str	r0, [sp, #16]
 800805e:	9105      	str	r1, [sp, #20]
 8008060:	f7fa f8d4 	bl	800220c <__aeabi_dmul>
 8008064:	0032      	movs	r2, r6
 8008066:	003b      	movs	r3, r7
 8008068:	9006      	str	r0, [sp, #24]
 800806a:	9107      	str	r1, [sp, #28]
 800806c:	9804      	ldr	r0, [sp, #16]
 800806e:	9905      	ldr	r1, [sp, #20]
 8008070:	f7fa fb94 	bl	800279c <__aeabi_dsub>
 8008074:	0002      	movs	r2, r0
 8008076:	000b      	movs	r3, r1
 8008078:	9802      	ldr	r0, [sp, #8]
 800807a:	9903      	ldr	r1, [sp, #12]
 800807c:	f7fa fb8e 	bl	800279c <__aeabi_dsub>
 8008080:	4a56      	ldr	r2, [pc, #344]	@ (80081dc <__ieee754_pow+0xa1c>)
 8008082:	4b57      	ldr	r3, [pc, #348]	@ (80081e0 <__ieee754_pow+0xa20>)
 8008084:	f7fa f8c2 	bl	800220c <__aeabi_dmul>
 8008088:	4a56      	ldr	r2, [pc, #344]	@ (80081e4 <__ieee754_pow+0xa24>)
 800808a:	0004      	movs	r4, r0
 800808c:	000d      	movs	r5, r1
 800808e:	9804      	ldr	r0, [sp, #16]
 8008090:	9905      	ldr	r1, [sp, #20]
 8008092:	4b55      	ldr	r3, [pc, #340]	@ (80081e8 <__ieee754_pow+0xa28>)
 8008094:	f7fa f8ba 	bl	800220c <__aeabi_dmul>
 8008098:	0002      	movs	r2, r0
 800809a:	000b      	movs	r3, r1
 800809c:	0020      	movs	r0, r4
 800809e:	0029      	movs	r1, r5
 80080a0:	f7f9 f90c 	bl	80012bc <__aeabi_dadd>
 80080a4:	0004      	movs	r4, r0
 80080a6:	000d      	movs	r5, r1
 80080a8:	0002      	movs	r2, r0
 80080aa:	000b      	movs	r3, r1
 80080ac:	9806      	ldr	r0, [sp, #24]
 80080ae:	9907      	ldr	r1, [sp, #28]
 80080b0:	f7f9 f904 	bl	80012bc <__aeabi_dadd>
 80080b4:	9a06      	ldr	r2, [sp, #24]
 80080b6:	9b07      	ldr	r3, [sp, #28]
 80080b8:	0006      	movs	r6, r0
 80080ba:	000f      	movs	r7, r1
 80080bc:	f7fa fb6e 	bl	800279c <__aeabi_dsub>
 80080c0:	0002      	movs	r2, r0
 80080c2:	000b      	movs	r3, r1
 80080c4:	0020      	movs	r0, r4
 80080c6:	0029      	movs	r1, r5
 80080c8:	f7fa fb68 	bl	800279c <__aeabi_dsub>
 80080cc:	0032      	movs	r2, r6
 80080ce:	9002      	str	r0, [sp, #8]
 80080d0:	9103      	str	r1, [sp, #12]
 80080d2:	003b      	movs	r3, r7
 80080d4:	0030      	movs	r0, r6
 80080d6:	0039      	movs	r1, r7
 80080d8:	f7fa f898 	bl	800220c <__aeabi_dmul>
 80080dc:	0004      	movs	r4, r0
 80080de:	000d      	movs	r5, r1
 80080e0:	4a42      	ldr	r2, [pc, #264]	@ (80081ec <__ieee754_pow+0xa2c>)
 80080e2:	4b43      	ldr	r3, [pc, #268]	@ (80081f0 <__ieee754_pow+0xa30>)
 80080e4:	f7fa f892 	bl	800220c <__aeabi_dmul>
 80080e8:	4a42      	ldr	r2, [pc, #264]	@ (80081f4 <__ieee754_pow+0xa34>)
 80080ea:	4b43      	ldr	r3, [pc, #268]	@ (80081f8 <__ieee754_pow+0xa38>)
 80080ec:	f7fa fb56 	bl	800279c <__aeabi_dsub>
 80080f0:	0022      	movs	r2, r4
 80080f2:	002b      	movs	r3, r5
 80080f4:	f7fa f88a 	bl	800220c <__aeabi_dmul>
 80080f8:	4a40      	ldr	r2, [pc, #256]	@ (80081fc <__ieee754_pow+0xa3c>)
 80080fa:	4b41      	ldr	r3, [pc, #260]	@ (8008200 <__ieee754_pow+0xa40>)
 80080fc:	f7f9 f8de 	bl	80012bc <__aeabi_dadd>
 8008100:	0022      	movs	r2, r4
 8008102:	002b      	movs	r3, r5
 8008104:	f7fa f882 	bl	800220c <__aeabi_dmul>
 8008108:	4a3e      	ldr	r2, [pc, #248]	@ (8008204 <__ieee754_pow+0xa44>)
 800810a:	4b3f      	ldr	r3, [pc, #252]	@ (8008208 <__ieee754_pow+0xa48>)
 800810c:	f7fa fb46 	bl	800279c <__aeabi_dsub>
 8008110:	0022      	movs	r2, r4
 8008112:	002b      	movs	r3, r5
 8008114:	f7fa f87a 	bl	800220c <__aeabi_dmul>
 8008118:	4a3c      	ldr	r2, [pc, #240]	@ (800820c <__ieee754_pow+0xa4c>)
 800811a:	4b3d      	ldr	r3, [pc, #244]	@ (8008210 <__ieee754_pow+0xa50>)
 800811c:	f7f9 f8ce 	bl	80012bc <__aeabi_dadd>
 8008120:	0022      	movs	r2, r4
 8008122:	002b      	movs	r3, r5
 8008124:	f7fa f872 	bl	800220c <__aeabi_dmul>
 8008128:	0002      	movs	r2, r0
 800812a:	000b      	movs	r3, r1
 800812c:	0030      	movs	r0, r6
 800812e:	0039      	movs	r1, r7
 8008130:	f7fa fb34 	bl	800279c <__aeabi_dsub>
 8008134:	0004      	movs	r4, r0
 8008136:	000d      	movs	r5, r1
 8008138:	0002      	movs	r2, r0
 800813a:	000b      	movs	r3, r1
 800813c:	0030      	movs	r0, r6
 800813e:	0039      	movs	r1, r7
 8008140:	f7fa f864 	bl	800220c <__aeabi_dmul>
 8008144:	2380      	movs	r3, #128	@ 0x80
 8008146:	9004      	str	r0, [sp, #16]
 8008148:	9105      	str	r1, [sp, #20]
 800814a:	2200      	movs	r2, #0
 800814c:	0020      	movs	r0, r4
 800814e:	0029      	movs	r1, r5
 8008150:	05db      	lsls	r3, r3, #23
 8008152:	f7fa fb23 	bl	800279c <__aeabi_dsub>
 8008156:	0002      	movs	r2, r0
 8008158:	000b      	movs	r3, r1
 800815a:	9804      	ldr	r0, [sp, #16]
 800815c:	9905      	ldr	r1, [sp, #20]
 800815e:	f7f9 fc11 	bl	8001984 <__aeabi_ddiv>
 8008162:	9a02      	ldr	r2, [sp, #8]
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	0004      	movs	r4, r0
 8008168:	000d      	movs	r5, r1
 800816a:	0030      	movs	r0, r6
 800816c:	0039      	movs	r1, r7
 800816e:	f7fa f84d 	bl	800220c <__aeabi_dmul>
 8008172:	9a02      	ldr	r2, [sp, #8]
 8008174:	9b03      	ldr	r3, [sp, #12]
 8008176:	f7f9 f8a1 	bl	80012bc <__aeabi_dadd>
 800817a:	0002      	movs	r2, r0
 800817c:	000b      	movs	r3, r1
 800817e:	0020      	movs	r0, r4
 8008180:	0029      	movs	r1, r5
 8008182:	f7fa fb0b 	bl	800279c <__aeabi_dsub>
 8008186:	0032      	movs	r2, r6
 8008188:	003b      	movs	r3, r7
 800818a:	f7fa fb07 	bl	800279c <__aeabi_dsub>
 800818e:	0002      	movs	r2, r0
 8008190:	000b      	movs	r3, r1
 8008192:	2000      	movs	r0, #0
 8008194:	491f      	ldr	r1, [pc, #124]	@ (8008214 <__ieee754_pow+0xa54>)
 8008196:	f7fa fb01 	bl	800279c <__aeabi_dsub>
 800819a:	9b00      	ldr	r3, [sp, #0]
 800819c:	051b      	lsls	r3, r3, #20
 800819e:	185b      	adds	r3, r3, r1
 80081a0:	151a      	asrs	r2, r3, #20
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	dc06      	bgt.n	80081b4 <__ieee754_pow+0x9f4>
 80081a6:	9a00      	ldr	r2, [sp, #0]
 80081a8:	f000 fa12 	bl	80085d0 <scalbn>
 80081ac:	9a08      	ldr	r2, [sp, #32]
 80081ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b0:	f7ff fbee 	bl	8007990 <__ieee754_pow+0x1d0>
 80081b4:	0019      	movs	r1, r3
 80081b6:	e7f9      	b.n	80081ac <__ieee754_pow+0x9ec>
 80081b8:	2300      	movs	r3, #0
 80081ba:	4c16      	ldr	r4, [pc, #88]	@ (8008214 <__ieee754_pow+0xa54>)
 80081bc:	f7ff fbcb 	bl	8007956 <__ieee754_pow+0x196>
 80081c0:	2300      	movs	r3, #0
 80081c2:	2400      	movs	r4, #0
 80081c4:	f7ff fbc7 	bl	8007956 <__ieee754_pow+0x196>
 80081c8:	4090cbff 	.word	0x4090cbff
 80081cc:	3f6f3400 	.word	0x3f6f3400
 80081d0:	4090cc00 	.word	0x4090cc00
 80081d4:	3fe00000 	.word	0x3fe00000
 80081d8:	3fe62e43 	.word	0x3fe62e43
 80081dc:	fefa39ef 	.word	0xfefa39ef
 80081e0:	3fe62e42 	.word	0x3fe62e42
 80081e4:	0ca86c39 	.word	0x0ca86c39
 80081e8:	be205c61 	.word	0xbe205c61
 80081ec:	72bea4d0 	.word	0x72bea4d0
 80081f0:	3e663769 	.word	0x3e663769
 80081f4:	c5d26bf1 	.word	0xc5d26bf1
 80081f8:	3ebbbd41 	.word	0x3ebbbd41
 80081fc:	af25de2c 	.word	0xaf25de2c
 8008200:	3f11566a 	.word	0x3f11566a
 8008204:	16bebd93 	.word	0x16bebd93
 8008208:	3f66c16c 	.word	0x3f66c16c
 800820c:	5555553e 	.word	0x5555553e
 8008210:	3fc55555 	.word	0x3fc55555
 8008214:	3ff00000 	.word	0x3ff00000

08008218 <__ieee754_rem_pio2>:
 8008218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800821a:	4baf      	ldr	r3, [pc, #700]	@ (80084d8 <__ieee754_rem_pio2+0x2c0>)
 800821c:	b095      	sub	sp, #84	@ 0x54
 800821e:	004d      	lsls	r5, r1, #1
 8008220:	0017      	movs	r7, r2
 8008222:	910d      	str	r1, [sp, #52]	@ 0x34
 8008224:	086d      	lsrs	r5, r5, #1
 8008226:	429d      	cmp	r5, r3
 8008228:	d807      	bhi.n	800823a <__ieee754_rem_pio2+0x22>
 800822a:	6010      	str	r0, [r2, #0]
 800822c:	6051      	str	r1, [r2, #4]
 800822e:	2300      	movs	r3, #0
 8008230:	2200      	movs	r2, #0
 8008232:	60ba      	str	r2, [r7, #8]
 8008234:	60fb      	str	r3, [r7, #12]
 8008236:	2300      	movs	r3, #0
 8008238:	e024      	b.n	8008284 <__ieee754_rem_pio2+0x6c>
 800823a:	4ba8      	ldr	r3, [pc, #672]	@ (80084dc <__ieee754_rem_pio2+0x2c4>)
 800823c:	429d      	cmp	r5, r3
 800823e:	d900      	bls.n	8008242 <__ieee754_rem_pio2+0x2a>
 8008240:	e072      	b.n	8008328 <__ieee754_rem_pio2+0x110>
 8008242:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008244:	4ca6      	ldr	r4, [pc, #664]	@ (80084e0 <__ieee754_rem_pio2+0x2c8>)
 8008246:	4aa7      	ldr	r2, [pc, #668]	@ (80084e4 <__ieee754_rem_pio2+0x2cc>)
 8008248:	2b00      	cmp	r3, #0
 800824a:	dd37      	ble.n	80082bc <__ieee754_rem_pio2+0xa4>
 800824c:	4ba4      	ldr	r3, [pc, #656]	@ (80084e0 <__ieee754_rem_pio2+0x2c8>)
 800824e:	f7fa faa5 	bl	800279c <__aeabi_dsub>
 8008252:	9002      	str	r0, [sp, #8]
 8008254:	9103      	str	r1, [sp, #12]
 8008256:	42a5      	cmp	r5, r4
 8008258:	d018      	beq.n	800828c <__ieee754_rem_pio2+0x74>
 800825a:	4aa3      	ldr	r2, [pc, #652]	@ (80084e8 <__ieee754_rem_pio2+0x2d0>)
 800825c:	4ba3      	ldr	r3, [pc, #652]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 800825e:	f7fa fa9d 	bl	800279c <__aeabi_dsub>
 8008262:	0002      	movs	r2, r0
 8008264:	000b      	movs	r3, r1
 8008266:	0004      	movs	r4, r0
 8008268:	000d      	movs	r5, r1
 800826a:	9802      	ldr	r0, [sp, #8]
 800826c:	9903      	ldr	r1, [sp, #12]
 800826e:	f7fa fa95 	bl	800279c <__aeabi_dsub>
 8008272:	4a9d      	ldr	r2, [pc, #628]	@ (80084e8 <__ieee754_rem_pio2+0x2d0>)
 8008274:	4b9d      	ldr	r3, [pc, #628]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 8008276:	f7fa fa91 	bl	800279c <__aeabi_dsub>
 800827a:	2301      	movs	r3, #1
 800827c:	603c      	str	r4, [r7, #0]
 800827e:	607d      	str	r5, [r7, #4]
 8008280:	60b8      	str	r0, [r7, #8]
 8008282:	60f9      	str	r1, [r7, #12]
 8008284:	9302      	str	r3, [sp, #8]
 8008286:	9802      	ldr	r0, [sp, #8]
 8008288:	b015      	add	sp, #84	@ 0x54
 800828a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800828c:	22d3      	movs	r2, #211	@ 0xd3
 800828e:	9802      	ldr	r0, [sp, #8]
 8008290:	9903      	ldr	r1, [sp, #12]
 8008292:	4b96      	ldr	r3, [pc, #600]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 8008294:	0552      	lsls	r2, r2, #21
 8008296:	f7fa fa81 	bl	800279c <__aeabi_dsub>
 800829a:	4a95      	ldr	r2, [pc, #596]	@ (80084f0 <__ieee754_rem_pio2+0x2d8>)
 800829c:	4b95      	ldr	r3, [pc, #596]	@ (80084f4 <__ieee754_rem_pio2+0x2dc>)
 800829e:	9002      	str	r0, [sp, #8]
 80082a0:	9103      	str	r1, [sp, #12]
 80082a2:	f7fa fa7b 	bl	800279c <__aeabi_dsub>
 80082a6:	0002      	movs	r2, r0
 80082a8:	000b      	movs	r3, r1
 80082aa:	0004      	movs	r4, r0
 80082ac:	000d      	movs	r5, r1
 80082ae:	9802      	ldr	r0, [sp, #8]
 80082b0:	9903      	ldr	r1, [sp, #12]
 80082b2:	f7fa fa73 	bl	800279c <__aeabi_dsub>
 80082b6:	4a8e      	ldr	r2, [pc, #568]	@ (80084f0 <__ieee754_rem_pio2+0x2d8>)
 80082b8:	4b8e      	ldr	r3, [pc, #568]	@ (80084f4 <__ieee754_rem_pio2+0x2dc>)
 80082ba:	e7dc      	b.n	8008276 <__ieee754_rem_pio2+0x5e>
 80082bc:	4b88      	ldr	r3, [pc, #544]	@ (80084e0 <__ieee754_rem_pio2+0x2c8>)
 80082be:	f7f8 fffd 	bl	80012bc <__aeabi_dadd>
 80082c2:	9002      	str	r0, [sp, #8]
 80082c4:	9103      	str	r1, [sp, #12]
 80082c6:	42a5      	cmp	r5, r4
 80082c8:	d016      	beq.n	80082f8 <__ieee754_rem_pio2+0xe0>
 80082ca:	4a87      	ldr	r2, [pc, #540]	@ (80084e8 <__ieee754_rem_pio2+0x2d0>)
 80082cc:	4b87      	ldr	r3, [pc, #540]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 80082ce:	f7f8 fff5 	bl	80012bc <__aeabi_dadd>
 80082d2:	0002      	movs	r2, r0
 80082d4:	000b      	movs	r3, r1
 80082d6:	0004      	movs	r4, r0
 80082d8:	000d      	movs	r5, r1
 80082da:	9802      	ldr	r0, [sp, #8]
 80082dc:	9903      	ldr	r1, [sp, #12]
 80082de:	f7fa fa5d 	bl	800279c <__aeabi_dsub>
 80082e2:	4a81      	ldr	r2, [pc, #516]	@ (80084e8 <__ieee754_rem_pio2+0x2d0>)
 80082e4:	4b81      	ldr	r3, [pc, #516]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 80082e6:	f7f8 ffe9 	bl	80012bc <__aeabi_dadd>
 80082ea:	2301      	movs	r3, #1
 80082ec:	603c      	str	r4, [r7, #0]
 80082ee:	607d      	str	r5, [r7, #4]
 80082f0:	60b8      	str	r0, [r7, #8]
 80082f2:	60f9      	str	r1, [r7, #12]
 80082f4:	425b      	negs	r3, r3
 80082f6:	e7c5      	b.n	8008284 <__ieee754_rem_pio2+0x6c>
 80082f8:	22d3      	movs	r2, #211	@ 0xd3
 80082fa:	9802      	ldr	r0, [sp, #8]
 80082fc:	9903      	ldr	r1, [sp, #12]
 80082fe:	4b7b      	ldr	r3, [pc, #492]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 8008300:	0552      	lsls	r2, r2, #21
 8008302:	f7f8 ffdb 	bl	80012bc <__aeabi_dadd>
 8008306:	4a7a      	ldr	r2, [pc, #488]	@ (80084f0 <__ieee754_rem_pio2+0x2d8>)
 8008308:	4b7a      	ldr	r3, [pc, #488]	@ (80084f4 <__ieee754_rem_pio2+0x2dc>)
 800830a:	9002      	str	r0, [sp, #8]
 800830c:	9103      	str	r1, [sp, #12]
 800830e:	f7f8 ffd5 	bl	80012bc <__aeabi_dadd>
 8008312:	0002      	movs	r2, r0
 8008314:	000b      	movs	r3, r1
 8008316:	0004      	movs	r4, r0
 8008318:	000d      	movs	r5, r1
 800831a:	9802      	ldr	r0, [sp, #8]
 800831c:	9903      	ldr	r1, [sp, #12]
 800831e:	f7fa fa3d 	bl	800279c <__aeabi_dsub>
 8008322:	4a73      	ldr	r2, [pc, #460]	@ (80084f0 <__ieee754_rem_pio2+0x2d8>)
 8008324:	4b73      	ldr	r3, [pc, #460]	@ (80084f4 <__ieee754_rem_pio2+0x2dc>)
 8008326:	e7de      	b.n	80082e6 <__ieee754_rem_pio2+0xce>
 8008328:	4b73      	ldr	r3, [pc, #460]	@ (80084f8 <__ieee754_rem_pio2+0x2e0>)
 800832a:	429d      	cmp	r5, r3
 800832c:	d900      	bls.n	8008330 <__ieee754_rem_pio2+0x118>
 800832e:	e0c6      	b.n	80084be <__ieee754_rem_pio2+0x2a6>
 8008330:	f7fe fcae 	bl	8006c90 <fabs>
 8008334:	4a71      	ldr	r2, [pc, #452]	@ (80084fc <__ieee754_rem_pio2+0x2e4>)
 8008336:	4b72      	ldr	r3, [pc, #456]	@ (8008500 <__ieee754_rem_pio2+0x2e8>)
 8008338:	9004      	str	r0, [sp, #16]
 800833a:	9105      	str	r1, [sp, #20]
 800833c:	f7f9 ff66 	bl	800220c <__aeabi_dmul>
 8008340:	2200      	movs	r2, #0
 8008342:	4b70      	ldr	r3, [pc, #448]	@ (8008504 <__ieee754_rem_pio2+0x2ec>)
 8008344:	f7f8 ffba 	bl	80012bc <__aeabi_dadd>
 8008348:	f7fa fde6 	bl	8002f18 <__aeabi_d2iz>
 800834c:	9002      	str	r0, [sp, #8]
 800834e:	f7fa fe1f 	bl	8002f90 <__aeabi_i2d>
 8008352:	4a64      	ldr	r2, [pc, #400]	@ (80084e4 <__ieee754_rem_pio2+0x2cc>)
 8008354:	4b62      	ldr	r3, [pc, #392]	@ (80084e0 <__ieee754_rem_pio2+0x2c8>)
 8008356:	9008      	str	r0, [sp, #32]
 8008358:	9109      	str	r1, [sp, #36]	@ 0x24
 800835a:	f7f9 ff57 	bl	800220c <__aeabi_dmul>
 800835e:	0002      	movs	r2, r0
 8008360:	000b      	movs	r3, r1
 8008362:	9804      	ldr	r0, [sp, #16]
 8008364:	9905      	ldr	r1, [sp, #20]
 8008366:	f7fa fa19 	bl	800279c <__aeabi_dsub>
 800836a:	4b60      	ldr	r3, [pc, #384]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 800836c:	9004      	str	r0, [sp, #16]
 800836e:	9105      	str	r1, [sp, #20]
 8008370:	9808      	ldr	r0, [sp, #32]
 8008372:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008374:	4a5c      	ldr	r2, [pc, #368]	@ (80084e8 <__ieee754_rem_pio2+0x2d0>)
 8008376:	f7f9 ff49 	bl	800220c <__aeabi_dmul>
 800837a:	9b02      	ldr	r3, [sp, #8]
 800837c:	9006      	str	r0, [sp, #24]
 800837e:	9107      	str	r1, [sp, #28]
 8008380:	2b1f      	cmp	r3, #31
 8008382:	dc0d      	bgt.n	80083a0 <__ieee754_rem_pio2+0x188>
 8008384:	9a02      	ldr	r2, [sp, #8]
 8008386:	4b60      	ldr	r3, [pc, #384]	@ (8008508 <__ieee754_rem_pio2+0x2f0>)
 8008388:	3a01      	subs	r2, #1
 800838a:	0092      	lsls	r2, r2, #2
 800838c:	58d3      	ldr	r3, [r2, r3]
 800838e:	42ab      	cmp	r3, r5
 8008390:	d006      	beq.n	80083a0 <__ieee754_rem_pio2+0x188>
 8008392:	0002      	movs	r2, r0
 8008394:	000b      	movs	r3, r1
 8008396:	9804      	ldr	r0, [sp, #16]
 8008398:	9905      	ldr	r1, [sp, #20]
 800839a:	f7fa f9ff 	bl	800279c <__aeabi_dsub>
 800839e:	e00b      	b.n	80083b8 <__ieee754_rem_pio2+0x1a0>
 80083a0:	9a06      	ldr	r2, [sp, #24]
 80083a2:	9b07      	ldr	r3, [sp, #28]
 80083a4:	9804      	ldr	r0, [sp, #16]
 80083a6:	9905      	ldr	r1, [sp, #20]
 80083a8:	f7fa f9f8 	bl	800279c <__aeabi_dsub>
 80083ac:	004b      	lsls	r3, r1, #1
 80083ae:	152e      	asrs	r6, r5, #20
 80083b0:	0d5b      	lsrs	r3, r3, #21
 80083b2:	1af3      	subs	r3, r6, r3
 80083b4:	2b10      	cmp	r3, #16
 80083b6:	dc02      	bgt.n	80083be <__ieee754_rem_pio2+0x1a6>
 80083b8:	6038      	str	r0, [r7, #0]
 80083ba:	6079      	str	r1, [r7, #4]
 80083bc:	e039      	b.n	8008432 <__ieee754_rem_pio2+0x21a>
 80083be:	22d3      	movs	r2, #211	@ 0xd3
 80083c0:	9808      	ldr	r0, [sp, #32]
 80083c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083c4:	4b49      	ldr	r3, [pc, #292]	@ (80084ec <__ieee754_rem_pio2+0x2d4>)
 80083c6:	0552      	lsls	r2, r2, #21
 80083c8:	f7f9 ff20 	bl	800220c <__aeabi_dmul>
 80083cc:	0004      	movs	r4, r0
 80083ce:	000d      	movs	r5, r1
 80083d0:	0002      	movs	r2, r0
 80083d2:	000b      	movs	r3, r1
 80083d4:	9804      	ldr	r0, [sp, #16]
 80083d6:	9905      	ldr	r1, [sp, #20]
 80083d8:	f7fa f9e0 	bl	800279c <__aeabi_dsub>
 80083dc:	0002      	movs	r2, r0
 80083de:	000b      	movs	r3, r1
 80083e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80083e2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80083e4:	9804      	ldr	r0, [sp, #16]
 80083e6:	9905      	ldr	r1, [sp, #20]
 80083e8:	f7fa f9d8 	bl	800279c <__aeabi_dsub>
 80083ec:	0022      	movs	r2, r4
 80083ee:	002b      	movs	r3, r5
 80083f0:	f7fa f9d4 	bl	800279c <__aeabi_dsub>
 80083f4:	0004      	movs	r4, r0
 80083f6:	000d      	movs	r5, r1
 80083f8:	9808      	ldr	r0, [sp, #32]
 80083fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083fc:	4a3c      	ldr	r2, [pc, #240]	@ (80084f0 <__ieee754_rem_pio2+0x2d8>)
 80083fe:	4b3d      	ldr	r3, [pc, #244]	@ (80084f4 <__ieee754_rem_pio2+0x2dc>)
 8008400:	f7f9 ff04 	bl	800220c <__aeabi_dmul>
 8008404:	0022      	movs	r2, r4
 8008406:	002b      	movs	r3, r5
 8008408:	f7fa f9c8 	bl	800279c <__aeabi_dsub>
 800840c:	000b      	movs	r3, r1
 800840e:	0002      	movs	r2, r0
 8008410:	9006      	str	r0, [sp, #24]
 8008412:	9107      	str	r1, [sp, #28]
 8008414:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008416:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008418:	f7fa f9c0 	bl	800279c <__aeabi_dsub>
 800841c:	004b      	lsls	r3, r1, #1
 800841e:	0d5b      	lsrs	r3, r3, #21
 8008420:	1af3      	subs	r3, r6, r3
 8008422:	2b31      	cmp	r3, #49	@ 0x31
 8008424:	dc21      	bgt.n	800846a <__ieee754_rem_pio2+0x252>
 8008426:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008428:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800842a:	6038      	str	r0, [r7, #0]
 800842c:	6079      	str	r1, [r7, #4]
 800842e:	9304      	str	r3, [sp, #16]
 8008430:	9405      	str	r4, [sp, #20]
 8008432:	683c      	ldr	r4, [r7, #0]
 8008434:	687d      	ldr	r5, [r7, #4]
 8008436:	9804      	ldr	r0, [sp, #16]
 8008438:	9905      	ldr	r1, [sp, #20]
 800843a:	0022      	movs	r2, r4
 800843c:	002b      	movs	r3, r5
 800843e:	f7fa f9ad 	bl	800279c <__aeabi_dsub>
 8008442:	9a06      	ldr	r2, [sp, #24]
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	f7fa f9a9 	bl	800279c <__aeabi_dsub>
 800844a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800844c:	60b8      	str	r0, [r7, #8]
 800844e:	60f9      	str	r1, [r7, #12]
 8008450:	2b00      	cmp	r3, #0
 8008452:	db00      	blt.n	8008456 <__ieee754_rem_pio2+0x23e>
 8008454:	e717      	b.n	8008286 <__ieee754_rem_pio2+0x6e>
 8008456:	2280      	movs	r2, #128	@ 0x80
 8008458:	0612      	lsls	r2, r2, #24
 800845a:	18ab      	adds	r3, r5, r2
 800845c:	607b      	str	r3, [r7, #4]
 800845e:	188b      	adds	r3, r1, r2
 8008460:	603c      	str	r4, [r7, #0]
 8008462:	60b8      	str	r0, [r7, #8]
 8008464:	60fb      	str	r3, [r7, #12]
 8008466:	9b02      	ldr	r3, [sp, #8]
 8008468:	e744      	b.n	80082f4 <__ieee754_rem_pio2+0xdc>
 800846a:	22b8      	movs	r2, #184	@ 0xb8
 800846c:	9808      	ldr	r0, [sp, #32]
 800846e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008470:	4b20      	ldr	r3, [pc, #128]	@ (80084f4 <__ieee754_rem_pio2+0x2dc>)
 8008472:	0592      	lsls	r2, r2, #22
 8008474:	f7f9 feca 	bl	800220c <__aeabi_dmul>
 8008478:	0004      	movs	r4, r0
 800847a:	000d      	movs	r5, r1
 800847c:	0002      	movs	r2, r0
 800847e:	000b      	movs	r3, r1
 8008480:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008482:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008484:	f7fa f98a 	bl	800279c <__aeabi_dsub>
 8008488:	0002      	movs	r2, r0
 800848a:	000b      	movs	r3, r1
 800848c:	9004      	str	r0, [sp, #16]
 800848e:	9105      	str	r1, [sp, #20]
 8008490:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008492:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008494:	f7fa f982 	bl	800279c <__aeabi_dsub>
 8008498:	0022      	movs	r2, r4
 800849a:	002b      	movs	r3, r5
 800849c:	f7fa f97e 	bl	800279c <__aeabi_dsub>
 80084a0:	0004      	movs	r4, r0
 80084a2:	000d      	movs	r5, r1
 80084a4:	9808      	ldr	r0, [sp, #32]
 80084a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084a8:	4a18      	ldr	r2, [pc, #96]	@ (800850c <__ieee754_rem_pio2+0x2f4>)
 80084aa:	4b19      	ldr	r3, [pc, #100]	@ (8008510 <__ieee754_rem_pio2+0x2f8>)
 80084ac:	f7f9 feae 	bl	800220c <__aeabi_dmul>
 80084b0:	0022      	movs	r2, r4
 80084b2:	002b      	movs	r3, r5
 80084b4:	f7fa f972 	bl	800279c <__aeabi_dsub>
 80084b8:	9006      	str	r0, [sp, #24]
 80084ba:	9107      	str	r1, [sp, #28]
 80084bc:	e769      	b.n	8008392 <__ieee754_rem_pio2+0x17a>
 80084be:	4b15      	ldr	r3, [pc, #84]	@ (8008514 <__ieee754_rem_pio2+0x2fc>)
 80084c0:	429d      	cmp	r5, r3
 80084c2:	d929      	bls.n	8008518 <__ieee754_rem_pio2+0x300>
 80084c4:	0002      	movs	r2, r0
 80084c6:	000b      	movs	r3, r1
 80084c8:	f7fa f968 	bl	800279c <__aeabi_dsub>
 80084cc:	60b8      	str	r0, [r7, #8]
 80084ce:	60f9      	str	r1, [r7, #12]
 80084d0:	6038      	str	r0, [r7, #0]
 80084d2:	6079      	str	r1, [r7, #4]
 80084d4:	e6af      	b.n	8008236 <__ieee754_rem_pio2+0x1e>
 80084d6:	46c0      	nop			@ (mov r8, r8)
 80084d8:	3fe921fb 	.word	0x3fe921fb
 80084dc:	4002d97b 	.word	0x4002d97b
 80084e0:	3ff921fb 	.word	0x3ff921fb
 80084e4:	54400000 	.word	0x54400000
 80084e8:	1a626331 	.word	0x1a626331
 80084ec:	3dd0b461 	.word	0x3dd0b461
 80084f0:	2e037073 	.word	0x2e037073
 80084f4:	3ba3198a 	.word	0x3ba3198a
 80084f8:	413921fb 	.word	0x413921fb
 80084fc:	6dc9c883 	.word	0x6dc9c883
 8008500:	3fe45f30 	.word	0x3fe45f30
 8008504:	3fe00000 	.word	0x3fe00000
 8008508:	0800a300 	.word	0x0800a300
 800850c:	252049c1 	.word	0x252049c1
 8008510:	397b839a 	.word	0x397b839a
 8008514:	7fefffff 	.word	0x7fefffff
 8008518:	4b2a      	ldr	r3, [pc, #168]	@ (80085c4 <__ieee754_rem_pio2+0x3ac>)
 800851a:	152e      	asrs	r6, r5, #20
 800851c:	18f6      	adds	r6, r6, r3
 800851e:	0531      	lsls	r1, r6, #20
 8008520:	1a6b      	subs	r3, r5, r1
 8008522:	0019      	movs	r1, r3
 8008524:	001d      	movs	r5, r3
 8008526:	0004      	movs	r4, r0
 8008528:	f7fa fcf6 	bl	8002f18 <__aeabi_d2iz>
 800852c:	f7fa fd30 	bl	8002f90 <__aeabi_i2d>
 8008530:	0002      	movs	r2, r0
 8008532:	000b      	movs	r3, r1
 8008534:	0020      	movs	r0, r4
 8008536:	0029      	movs	r1, r5
 8008538:	920e      	str	r2, [sp, #56]	@ 0x38
 800853a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800853c:	f7fa f92e 	bl	800279c <__aeabi_dsub>
 8008540:	2200      	movs	r2, #0
 8008542:	4b21      	ldr	r3, [pc, #132]	@ (80085c8 <__ieee754_rem_pio2+0x3b0>)
 8008544:	f7f9 fe62 	bl	800220c <__aeabi_dmul>
 8008548:	000d      	movs	r5, r1
 800854a:	0004      	movs	r4, r0
 800854c:	f7fa fce4 	bl	8002f18 <__aeabi_d2iz>
 8008550:	f7fa fd1e 	bl	8002f90 <__aeabi_i2d>
 8008554:	0002      	movs	r2, r0
 8008556:	000b      	movs	r3, r1
 8008558:	0020      	movs	r0, r4
 800855a:	0029      	movs	r1, r5
 800855c:	9210      	str	r2, [sp, #64]	@ 0x40
 800855e:	9311      	str	r3, [sp, #68]	@ 0x44
 8008560:	f7fa f91c 	bl	800279c <__aeabi_dsub>
 8008564:	2200      	movs	r2, #0
 8008566:	4b18      	ldr	r3, [pc, #96]	@ (80085c8 <__ieee754_rem_pio2+0x3b0>)
 8008568:	f7f9 fe50 	bl	800220c <__aeabi_dmul>
 800856c:	2503      	movs	r5, #3
 800856e:	9012      	str	r0, [sp, #72]	@ 0x48
 8008570:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008572:	ac0e      	add	r4, sp, #56	@ 0x38
 8008574:	2200      	movs	r2, #0
 8008576:	6920      	ldr	r0, [r4, #16]
 8008578:	6961      	ldr	r1, [r4, #20]
 800857a:	2300      	movs	r3, #0
 800857c:	9502      	str	r5, [sp, #8]
 800857e:	3c08      	subs	r4, #8
 8008580:	3d01      	subs	r5, #1
 8008582:	f7f7 ff51 	bl	8000428 <__aeabi_dcmpeq>
 8008586:	2800      	cmp	r0, #0
 8008588:	d1f4      	bne.n	8008574 <__ieee754_rem_pio2+0x35c>
 800858a:	4b10      	ldr	r3, [pc, #64]	@ (80085cc <__ieee754_rem_pio2+0x3b4>)
 800858c:	0032      	movs	r2, r6
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	2302      	movs	r3, #2
 8008592:	0039      	movs	r1, r7
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	a80e      	add	r0, sp, #56	@ 0x38
 8008598:	9b02      	ldr	r3, [sp, #8]
 800859a:	f000 f8b3 	bl	8008704 <__kernel_rem_pio2>
 800859e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085a0:	9002      	str	r0, [sp, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	db00      	blt.n	80085a8 <__ieee754_rem_pio2+0x390>
 80085a6:	e66e      	b.n	8008286 <__ieee754_rem_pio2+0x6e>
 80085a8:	2080      	movs	r0, #128	@ 0x80
 80085aa:	6879      	ldr	r1, [r7, #4]
 80085ac:	683a      	ldr	r2, [r7, #0]
 80085ae:	0600      	lsls	r0, r0, #24
 80085b0:	180b      	adds	r3, r1, r0
 80085b2:	68f9      	ldr	r1, [r7, #12]
 80085b4:	603a      	str	r2, [r7, #0]
 80085b6:	607b      	str	r3, [r7, #4]
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	180b      	adds	r3, r1, r0
 80085bc:	60ba      	str	r2, [r7, #8]
 80085be:	60fb      	str	r3, [r7, #12]
 80085c0:	e751      	b.n	8008466 <__ieee754_rem_pio2+0x24e>
 80085c2:	46c0      	nop			@ (mov r8, r8)
 80085c4:	fffffbea 	.word	0xfffffbea
 80085c8:	41700000 	.word	0x41700000
 80085cc:	0800a380 	.word	0x0800a380

080085d0 <scalbn>:
 80085d0:	004b      	lsls	r3, r1, #1
 80085d2:	b570      	push	{r4, r5, r6, lr}
 80085d4:	0d5b      	lsrs	r3, r3, #21
 80085d6:	0014      	movs	r4, r2
 80085d8:	000d      	movs	r5, r1
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d10f      	bne.n	80085fe <scalbn+0x2e>
 80085de:	004b      	lsls	r3, r1, #1
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	4303      	orrs	r3, r0
 80085e4:	d012      	beq.n	800860c <scalbn+0x3c>
 80085e6:	4b23      	ldr	r3, [pc, #140]	@ (8008674 <scalbn+0xa4>)
 80085e8:	2200      	movs	r2, #0
 80085ea:	f7f9 fe0f 	bl	800220c <__aeabi_dmul>
 80085ee:	4b22      	ldr	r3, [pc, #136]	@ (8008678 <scalbn+0xa8>)
 80085f0:	429c      	cmp	r4, r3
 80085f2:	da0c      	bge.n	800860e <scalbn+0x3e>
 80085f4:	4a21      	ldr	r2, [pc, #132]	@ (800867c <scalbn+0xac>)
 80085f6:	4b22      	ldr	r3, [pc, #136]	@ (8008680 <scalbn+0xb0>)
 80085f8:	f7f9 fe08 	bl	800220c <__aeabi_dmul>
 80085fc:	e006      	b.n	800860c <scalbn+0x3c>
 80085fe:	4a21      	ldr	r2, [pc, #132]	@ (8008684 <scalbn+0xb4>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d108      	bne.n	8008616 <scalbn+0x46>
 8008604:	0002      	movs	r2, r0
 8008606:	000b      	movs	r3, r1
 8008608:	f7f8 fe58 	bl	80012bc <__aeabi_dadd>
 800860c:	bd70      	pop	{r4, r5, r6, pc}
 800860e:	000d      	movs	r5, r1
 8008610:	004b      	lsls	r3, r1, #1
 8008612:	0d5b      	lsrs	r3, r3, #21
 8008614:	3b36      	subs	r3, #54	@ 0x36
 8008616:	4a1c      	ldr	r2, [pc, #112]	@ (8008688 <scalbn+0xb8>)
 8008618:	4294      	cmp	r4, r2
 800861a:	dd0a      	ble.n	8008632 <scalbn+0x62>
 800861c:	4c1b      	ldr	r4, [pc, #108]	@ (800868c <scalbn+0xbc>)
 800861e:	4d1c      	ldr	r5, [pc, #112]	@ (8008690 <scalbn+0xc0>)
 8008620:	2900      	cmp	r1, #0
 8008622:	da01      	bge.n	8008628 <scalbn+0x58>
 8008624:	4c19      	ldr	r4, [pc, #100]	@ (800868c <scalbn+0xbc>)
 8008626:	4d1b      	ldr	r5, [pc, #108]	@ (8008694 <scalbn+0xc4>)
 8008628:	4a18      	ldr	r2, [pc, #96]	@ (800868c <scalbn+0xbc>)
 800862a:	4b19      	ldr	r3, [pc, #100]	@ (8008690 <scalbn+0xc0>)
 800862c:	0020      	movs	r0, r4
 800862e:	0029      	movs	r1, r5
 8008630:	e7e2      	b.n	80085f8 <scalbn+0x28>
 8008632:	18e2      	adds	r2, r4, r3
 8008634:	4b18      	ldr	r3, [pc, #96]	@ (8008698 <scalbn+0xc8>)
 8008636:	429a      	cmp	r2, r3
 8008638:	dcf0      	bgt.n	800861c <scalbn+0x4c>
 800863a:	2a00      	cmp	r2, #0
 800863c:	dd05      	ble.n	800864a <scalbn+0x7a>
 800863e:	4b17      	ldr	r3, [pc, #92]	@ (800869c <scalbn+0xcc>)
 8008640:	0512      	lsls	r2, r2, #20
 8008642:	402b      	ands	r3, r5
 8008644:	431a      	orrs	r2, r3
 8008646:	0011      	movs	r1, r2
 8008648:	e7e0      	b.n	800860c <scalbn+0x3c>
 800864a:	0013      	movs	r3, r2
 800864c:	3335      	adds	r3, #53	@ 0x35
 800864e:	da08      	bge.n	8008662 <scalbn+0x92>
 8008650:	4c0a      	ldr	r4, [pc, #40]	@ (800867c <scalbn+0xac>)
 8008652:	4d0b      	ldr	r5, [pc, #44]	@ (8008680 <scalbn+0xb0>)
 8008654:	2900      	cmp	r1, #0
 8008656:	da01      	bge.n	800865c <scalbn+0x8c>
 8008658:	4c08      	ldr	r4, [pc, #32]	@ (800867c <scalbn+0xac>)
 800865a:	4d11      	ldr	r5, [pc, #68]	@ (80086a0 <scalbn+0xd0>)
 800865c:	4a07      	ldr	r2, [pc, #28]	@ (800867c <scalbn+0xac>)
 800865e:	4b08      	ldr	r3, [pc, #32]	@ (8008680 <scalbn+0xb0>)
 8008660:	e7e4      	b.n	800862c <scalbn+0x5c>
 8008662:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <scalbn+0xcc>)
 8008664:	3236      	adds	r2, #54	@ 0x36
 8008666:	401d      	ands	r5, r3
 8008668:	0512      	lsls	r2, r2, #20
 800866a:	432a      	orrs	r2, r5
 800866c:	0011      	movs	r1, r2
 800866e:	4b0d      	ldr	r3, [pc, #52]	@ (80086a4 <scalbn+0xd4>)
 8008670:	2200      	movs	r2, #0
 8008672:	e7c1      	b.n	80085f8 <scalbn+0x28>
 8008674:	43500000 	.word	0x43500000
 8008678:	ffff3cb0 	.word	0xffff3cb0
 800867c:	c2f8f359 	.word	0xc2f8f359
 8008680:	01a56e1f 	.word	0x01a56e1f
 8008684:	000007ff 	.word	0x000007ff
 8008688:	0000c350 	.word	0x0000c350
 800868c:	8800759c 	.word	0x8800759c
 8008690:	7e37e43c 	.word	0x7e37e43c
 8008694:	fe37e43c 	.word	0xfe37e43c
 8008698:	000007fe 	.word	0x000007fe
 800869c:	800fffff 	.word	0x800fffff
 80086a0:	81a56e1f 	.word	0x81a56e1f
 80086a4:	3c900000 	.word	0x3c900000

080086a8 <with_errno>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	000d      	movs	r5, r1
 80086ac:	0016      	movs	r6, r2
 80086ae:	0004      	movs	r4, r0
 80086b0:	f001 f900 	bl	80098b4 <__errno>
 80086b4:	0029      	movs	r1, r5
 80086b6:	6006      	str	r6, [r0, #0]
 80086b8:	0020      	movs	r0, r4
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <xflow>:
 80086bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086be:	0014      	movs	r4, r2
 80086c0:	001d      	movs	r5, r3
 80086c2:	2800      	cmp	r0, #0
 80086c4:	d002      	beq.n	80086cc <xflow+0x10>
 80086c6:	2180      	movs	r1, #128	@ 0x80
 80086c8:	0609      	lsls	r1, r1, #24
 80086ca:	185b      	adds	r3, r3, r1
 80086cc:	9200      	str	r2, [sp, #0]
 80086ce:	9301      	str	r3, [sp, #4]
 80086d0:	9a00      	ldr	r2, [sp, #0]
 80086d2:	9b01      	ldr	r3, [sp, #4]
 80086d4:	0020      	movs	r0, r4
 80086d6:	0029      	movs	r1, r5
 80086d8:	f7f9 fd98 	bl	800220c <__aeabi_dmul>
 80086dc:	2222      	movs	r2, #34	@ 0x22
 80086de:	f7ff ffe3 	bl	80086a8 <with_errno>
 80086e2:	b003      	add	sp, #12
 80086e4:	bd30      	pop	{r4, r5, pc}

080086e6 <__math_uflow>:
 80086e6:	2380      	movs	r3, #128	@ 0x80
 80086e8:	b510      	push	{r4, lr}
 80086ea:	2200      	movs	r2, #0
 80086ec:	055b      	lsls	r3, r3, #21
 80086ee:	f7ff ffe5 	bl	80086bc <xflow>
 80086f2:	bd10      	pop	{r4, pc}

080086f4 <__math_oflow>:
 80086f4:	23e0      	movs	r3, #224	@ 0xe0
 80086f6:	b510      	push	{r4, lr}
 80086f8:	2200      	movs	r2, #0
 80086fa:	05db      	lsls	r3, r3, #23
 80086fc:	f7ff ffde 	bl	80086bc <xflow>
 8008700:	bd10      	pop	{r4, pc}
	...

08008704 <__kernel_rem_pio2>:
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	4cc6      	ldr	r4, [pc, #792]	@ (8008a20 <__kernel_rem_pio2+0x31c>)
 8008708:	44a5      	add	sp, r4
 800870a:	0014      	movs	r4, r2
 800870c:	9aa4      	ldr	r2, [sp, #656]	@ 0x290
 800870e:	930e      	str	r3, [sp, #56]	@ 0x38
 8008710:	4bc4      	ldr	r3, [pc, #784]	@ (8008a24 <__kernel_rem_pio2+0x320>)
 8008712:	0092      	lsls	r2, r2, #2
 8008714:	58d3      	ldr	r3, [r2, r3]
 8008716:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800871c:	9105      	str	r1, [sp, #20]
 800871e:	3b01      	subs	r3, #1
 8008720:	930d      	str	r3, [sp, #52]	@ 0x34
 8008722:	2300      	movs	r3, #0
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	0023      	movs	r3, r4
 8008728:	3314      	adds	r3, #20
 800872a:	db04      	blt.n	8008736 <__kernel_rem_pio2+0x32>
 800872c:	2118      	movs	r1, #24
 800872e:	1ee0      	subs	r0, r4, #3
 8008730:	f7f7 fd7e 	bl	8000230 <__divsi3>
 8008734:	9000      	str	r0, [sp, #0]
 8008736:	9b00      	ldr	r3, [sp, #0]
 8008738:	ae26      	add	r6, sp, #152	@ 0x98
 800873a:	1c5a      	adds	r2, r3, #1
 800873c:	2318      	movs	r3, #24
 800873e:	425b      	negs	r3, r3
 8008740:	4353      	muls	r3, r2
 8008742:	191b      	adds	r3, r3, r4
 8008744:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008746:	9302      	str	r3, [sp, #8]
 8008748:	9b00      	ldr	r3, [sp, #0]
 800874a:	1a9d      	subs	r5, r3, r2
 800874c:	002c      	movs	r4, r5
 800874e:	9b08      	ldr	r3, [sp, #32]
 8008750:	189f      	adds	r7, r3, r2
 8008752:	1b63      	subs	r3, r4, r5
 8008754:	429f      	cmp	r7, r3
 8008756:	da0f      	bge.n	8008778 <__kernel_rem_pio2+0x74>
 8008758:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800875a:	af76      	add	r7, sp, #472	@ 0x1d8
 800875c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800875e:	9a08      	ldr	r2, [sp, #32]
 8008760:	1aeb      	subs	r3, r5, r3
 8008762:	429a      	cmp	r2, r3
 8008764:	db30      	blt.n	80087c8 <__kernel_rem_pio2+0xc4>
 8008766:	00eb      	lsls	r3, r5, #3
 8008768:	aa26      	add	r2, sp, #152	@ 0x98
 800876a:	2400      	movs	r4, #0
 800876c:	189e      	adds	r6, r3, r2
 800876e:	2300      	movs	r3, #0
 8008770:	9306      	str	r3, [sp, #24]
 8008772:	9407      	str	r4, [sp, #28]
 8008774:	2400      	movs	r4, #0
 8008776:	e01e      	b.n	80087b6 <__kernel_rem_pio2+0xb2>
 8008778:	2c00      	cmp	r4, #0
 800877a:	db07      	blt.n	800878c <__kernel_rem_pio2+0x88>
 800877c:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 800877e:	00a3      	lsls	r3, r4, #2
 8008780:	58d0      	ldr	r0, [r2, r3]
 8008782:	f7fa fc05 	bl	8002f90 <__aeabi_i2d>
 8008786:	c603      	stmia	r6!, {r0, r1}
 8008788:	3401      	adds	r4, #1
 800878a:	e7e2      	b.n	8008752 <__kernel_rem_pio2+0x4e>
 800878c:	2000      	movs	r0, #0
 800878e:	2100      	movs	r1, #0
 8008790:	e7f9      	b.n	8008786 <__kernel_rem_pio2+0x82>
 8008792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008794:	00e1      	lsls	r1, r4, #3
 8008796:	1859      	adds	r1, r3, r1
 8008798:	6808      	ldr	r0, [r1, #0]
 800879a:	6849      	ldr	r1, [r1, #4]
 800879c:	6832      	ldr	r2, [r6, #0]
 800879e:	6873      	ldr	r3, [r6, #4]
 80087a0:	f7f9 fd34 	bl	800220c <__aeabi_dmul>
 80087a4:	0002      	movs	r2, r0
 80087a6:	000b      	movs	r3, r1
 80087a8:	9806      	ldr	r0, [sp, #24]
 80087aa:	9907      	ldr	r1, [sp, #28]
 80087ac:	f7f8 fd86 	bl	80012bc <__aeabi_dadd>
 80087b0:	9006      	str	r0, [sp, #24]
 80087b2:	9107      	str	r1, [sp, #28]
 80087b4:	3401      	adds	r4, #1
 80087b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80087b8:	3e08      	subs	r6, #8
 80087ba:	429c      	cmp	r4, r3
 80087bc:	dde9      	ble.n	8008792 <__kernel_rem_pio2+0x8e>
 80087be:	9b06      	ldr	r3, [sp, #24]
 80087c0:	9c07      	ldr	r4, [sp, #28]
 80087c2:	3501      	adds	r5, #1
 80087c4:	c718      	stmia	r7!, {r3, r4}
 80087c6:	e7c9      	b.n	800875c <__kernel_rem_pio2+0x58>
 80087c8:	9b08      	ldr	r3, [sp, #32]
 80087ca:	aa12      	add	r2, sp, #72	@ 0x48
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	189b      	adds	r3, r3, r2
 80087d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80087d2:	9b00      	ldr	r3, [sp, #0]
 80087d4:	9aa5      	ldr	r2, [sp, #660]	@ 0x294
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	18d3      	adds	r3, r2, r3
 80087da:	9310      	str	r3, [sp, #64]	@ 0x40
 80087dc:	9b08      	ldr	r3, [sp, #32]
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	9b00      	ldr	r3, [sp, #0]
 80087e2:	aa76      	add	r2, sp, #472	@ 0x1d8
 80087e4:	00db      	lsls	r3, r3, #3
 80087e6:	18d3      	adds	r3, r2, r3
 80087e8:	681e      	ldr	r6, [r3, #0]
 80087ea:	685f      	ldr	r7, [r3, #4]
 80087ec:	ab12      	add	r3, sp, #72	@ 0x48
 80087ee:	001d      	movs	r5, r3
 80087f0:	9c00      	ldr	r4, [sp, #0]
 80087f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f4:	2c00      	cmp	r4, #0
 80087f6:	dc73      	bgt.n	80088e0 <__kernel_rem_pio2+0x1dc>
 80087f8:	0030      	movs	r0, r6
 80087fa:	0039      	movs	r1, r7
 80087fc:	9a02      	ldr	r2, [sp, #8]
 80087fe:	f7ff fee7 	bl	80085d0 <scalbn>
 8008802:	23ff      	movs	r3, #255	@ 0xff
 8008804:	2200      	movs	r2, #0
 8008806:	059b      	lsls	r3, r3, #22
 8008808:	0004      	movs	r4, r0
 800880a:	000d      	movs	r5, r1
 800880c:	f7f9 fcfe 	bl	800220c <__aeabi_dmul>
 8008810:	f7fe fb7c 	bl	8006f0c <floor>
 8008814:	2200      	movs	r2, #0
 8008816:	4b84      	ldr	r3, [pc, #528]	@ (8008a28 <__kernel_rem_pio2+0x324>)
 8008818:	f7f9 fcf8 	bl	800220c <__aeabi_dmul>
 800881c:	0002      	movs	r2, r0
 800881e:	000b      	movs	r3, r1
 8008820:	0020      	movs	r0, r4
 8008822:	0029      	movs	r1, r5
 8008824:	f7f9 ffba 	bl	800279c <__aeabi_dsub>
 8008828:	000d      	movs	r5, r1
 800882a:	0004      	movs	r4, r0
 800882c:	f7fa fb74 	bl	8002f18 <__aeabi_d2iz>
 8008830:	900c      	str	r0, [sp, #48]	@ 0x30
 8008832:	f7fa fbad 	bl	8002f90 <__aeabi_i2d>
 8008836:	000b      	movs	r3, r1
 8008838:	0002      	movs	r2, r0
 800883a:	0029      	movs	r1, r5
 800883c:	0020      	movs	r0, r4
 800883e:	f7f9 ffad 	bl	800279c <__aeabi_dsub>
 8008842:	9b02      	ldr	r3, [sp, #8]
 8008844:	0006      	movs	r6, r0
 8008846:	000f      	movs	r7, r1
 8008848:	2b00      	cmp	r3, #0
 800884a:	dd6f      	ble.n	800892c <__kernel_rem_pio2+0x228>
 800884c:	2018      	movs	r0, #24
 800884e:	9b00      	ldr	r3, [sp, #0]
 8008850:	aa12      	add	r2, sp, #72	@ 0x48
 8008852:	3b01      	subs	r3, #1
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	589a      	ldr	r2, [r3, r2]
 8008858:	9902      	ldr	r1, [sp, #8]
 800885a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800885c:	1a40      	subs	r0, r0, r1
 800885e:	0011      	movs	r1, r2
 8008860:	4101      	asrs	r1, r0
 8008862:	1864      	adds	r4, r4, r1
 8008864:	4081      	lsls	r1, r0
 8008866:	1a52      	subs	r2, r2, r1
 8008868:	a912      	add	r1, sp, #72	@ 0x48
 800886a:	505a      	str	r2, [r3, r1]
 800886c:	2317      	movs	r3, #23
 800886e:	9902      	ldr	r1, [sp, #8]
 8008870:	940c      	str	r4, [sp, #48]	@ 0x30
 8008872:	1a5b      	subs	r3, r3, r1
 8008874:	411a      	asrs	r2, r3
 8008876:	9206      	str	r2, [sp, #24]
 8008878:	9b06      	ldr	r3, [sp, #24]
 800887a:	2b00      	cmp	r3, #0
 800887c:	dd68      	ble.n	8008950 <__kernel_rem_pio2+0x24c>
 800887e:	2200      	movs	r2, #0
 8008880:	2580      	movs	r5, #128	@ 0x80
 8008882:	0014      	movs	r4, r2
 8008884:	2001      	movs	r0, #1
 8008886:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008888:	4968      	ldr	r1, [pc, #416]	@ (8008a2c <__kernel_rem_pio2+0x328>)
 800888a:	3301      	adds	r3, #1
 800888c:	930c      	str	r3, [sp, #48]	@ 0x30
 800888e:	046d      	lsls	r5, r5, #17
 8008890:	9b00      	ldr	r3, [sp, #0]
 8008892:	4293      	cmp	r3, r2
 8008894:	dd00      	ble.n	8008898 <__kernel_rem_pio2+0x194>
 8008896:	e098      	b.n	80089ca <__kernel_rem_pio2+0x2c6>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	dd05      	ble.n	80088aa <__kernel_rem_pio2+0x1a6>
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d100      	bne.n	80088a4 <__kernel_rem_pio2+0x1a0>
 80088a2:	e0a4      	b.n	80089ee <__kernel_rem_pio2+0x2ea>
 80088a4:	2b02      	cmp	r3, #2
 80088a6:	d100      	bne.n	80088aa <__kernel_rem_pio2+0x1a6>
 80088a8:	e0ab      	b.n	8008a02 <__kernel_rem_pio2+0x2fe>
 80088aa:	9b06      	ldr	r3, [sp, #24]
 80088ac:	2b02      	cmp	r3, #2
 80088ae:	d14f      	bne.n	8008950 <__kernel_rem_pio2+0x24c>
 80088b0:	0032      	movs	r2, r6
 80088b2:	003b      	movs	r3, r7
 80088b4:	2000      	movs	r0, #0
 80088b6:	495e      	ldr	r1, [pc, #376]	@ (8008a30 <__kernel_rem_pio2+0x32c>)
 80088b8:	f7f9 ff70 	bl	800279c <__aeabi_dsub>
 80088bc:	0006      	movs	r6, r0
 80088be:	000f      	movs	r7, r1
 80088c0:	2c00      	cmp	r4, #0
 80088c2:	d045      	beq.n	8008950 <__kernel_rem_pio2+0x24c>
 80088c4:	9a02      	ldr	r2, [sp, #8]
 80088c6:	2000      	movs	r0, #0
 80088c8:	4959      	ldr	r1, [pc, #356]	@ (8008a30 <__kernel_rem_pio2+0x32c>)
 80088ca:	f7ff fe81 	bl	80085d0 <scalbn>
 80088ce:	0002      	movs	r2, r0
 80088d0:	000b      	movs	r3, r1
 80088d2:	0030      	movs	r0, r6
 80088d4:	0039      	movs	r1, r7
 80088d6:	f7f9 ff61 	bl	800279c <__aeabi_dsub>
 80088da:	0006      	movs	r6, r0
 80088dc:	000f      	movs	r7, r1
 80088de:	e037      	b.n	8008950 <__kernel_rem_pio2+0x24c>
 80088e0:	2200      	movs	r2, #0
 80088e2:	4b54      	ldr	r3, [pc, #336]	@ (8008a34 <__kernel_rem_pio2+0x330>)
 80088e4:	0030      	movs	r0, r6
 80088e6:	0039      	movs	r1, r7
 80088e8:	f7f9 fc90 	bl	800220c <__aeabi_dmul>
 80088ec:	f7fa fb14 	bl	8002f18 <__aeabi_d2iz>
 80088f0:	f7fa fb4e 	bl	8002f90 <__aeabi_i2d>
 80088f4:	2200      	movs	r2, #0
 80088f6:	4b50      	ldr	r3, [pc, #320]	@ (8008a38 <__kernel_rem_pio2+0x334>)
 80088f8:	9006      	str	r0, [sp, #24]
 80088fa:	9107      	str	r1, [sp, #28]
 80088fc:	f7f9 fc86 	bl	800220c <__aeabi_dmul>
 8008900:	0002      	movs	r2, r0
 8008902:	000b      	movs	r3, r1
 8008904:	0030      	movs	r0, r6
 8008906:	0039      	movs	r1, r7
 8008908:	f7f9 ff48 	bl	800279c <__aeabi_dsub>
 800890c:	f7fa fb04 	bl	8002f18 <__aeabi_d2iz>
 8008910:	3c01      	subs	r4, #1
 8008912:	aa76      	add	r2, sp, #472	@ 0x1d8
 8008914:	00e3      	lsls	r3, r4, #3
 8008916:	18d3      	adds	r3, r2, r3
 8008918:	c501      	stmia	r5!, {r0}
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	685b      	ldr	r3, [r3, #4]
 800891e:	9806      	ldr	r0, [sp, #24]
 8008920:	9907      	ldr	r1, [sp, #28]
 8008922:	f7f8 fccb 	bl	80012bc <__aeabi_dadd>
 8008926:	0006      	movs	r6, r0
 8008928:	000f      	movs	r7, r1
 800892a:	e763      	b.n	80087f4 <__kernel_rem_pio2+0xf0>
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d107      	bne.n	8008942 <__kernel_rem_pio2+0x23e>
 8008932:	9b00      	ldr	r3, [sp, #0]
 8008934:	aa12      	add	r2, sp, #72	@ 0x48
 8008936:	3b01      	subs	r3, #1
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	589b      	ldr	r3, [r3, r2]
 800893c:	15db      	asrs	r3, r3, #23
 800893e:	9306      	str	r3, [sp, #24]
 8008940:	e79a      	b.n	8008878 <__kernel_rem_pio2+0x174>
 8008942:	2200      	movs	r2, #0
 8008944:	4b3d      	ldr	r3, [pc, #244]	@ (8008a3c <__kernel_rem_pio2+0x338>)
 8008946:	f7f7 fd93 	bl	8000470 <__aeabi_dcmpge>
 800894a:	2800      	cmp	r0, #0
 800894c:	d13a      	bne.n	80089c4 <__kernel_rem_pio2+0x2c0>
 800894e:	9006      	str	r0, [sp, #24]
 8008950:	2200      	movs	r2, #0
 8008952:	2300      	movs	r3, #0
 8008954:	0030      	movs	r0, r6
 8008956:	0039      	movs	r1, r7
 8008958:	f7f7 fd66 	bl	8000428 <__aeabi_dcmpeq>
 800895c:	2800      	cmp	r0, #0
 800895e:	d100      	bne.n	8008962 <__kernel_rem_pio2+0x25e>
 8008960:	e0b5      	b.n	8008ace <__kernel_rem_pio2+0x3ca>
 8008962:	2200      	movs	r2, #0
 8008964:	9b00      	ldr	r3, [sp, #0]
 8008966:	3b01      	subs	r3, #1
 8008968:	9908      	ldr	r1, [sp, #32]
 800896a:	428b      	cmp	r3, r1
 800896c:	da51      	bge.n	8008a12 <__kernel_rem_pio2+0x30e>
 800896e:	2a00      	cmp	r2, #0
 8008970:	d100      	bne.n	8008974 <__kernel_rem_pio2+0x270>
 8008972:	e096      	b.n	8008aa2 <__kernel_rem_pio2+0x39e>
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	aa12      	add	r2, sp, #72	@ 0x48
 8008978:	3b01      	subs	r3, #1
 800897a:	9300      	str	r3, [sp, #0]
 800897c:	9b02      	ldr	r3, [sp, #8]
 800897e:	3b18      	subs	r3, #24
 8008980:	9302      	str	r3, [sp, #8]
 8008982:	9b00      	ldr	r3, [sp, #0]
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	589b      	ldr	r3, [r3, r2]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0f3      	beq.n	8008974 <__kernel_rem_pio2+0x270>
 800898c:	2000      	movs	r0, #0
 800898e:	9a02      	ldr	r2, [sp, #8]
 8008990:	4927      	ldr	r1, [pc, #156]	@ (8008a30 <__kernel_rem_pio2+0x32c>)
 8008992:	f7ff fe1d 	bl	80085d0 <scalbn>
 8008996:	0004      	movs	r4, r0
 8008998:	000d      	movs	r5, r1
 800899a:	9e00      	ldr	r6, [sp, #0]
 800899c:	2e00      	cmp	r6, #0
 800899e:	db00      	blt.n	80089a2 <__kernel_rem_pio2+0x29e>
 80089a0:	e0d2      	b.n	8008b48 <__kernel_rem_pio2+0x444>
 80089a2:	4b27      	ldr	r3, [pc, #156]	@ (8008a40 <__kernel_rem_pio2+0x33c>)
 80089a4:	9c00      	ldr	r4, [sp, #0]
 80089a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80089a8:	2c00      	cmp	r4, #0
 80089aa:	da00      	bge.n	80089ae <__kernel_rem_pio2+0x2aa>
 80089ac:	e103      	b.n	8008bb6 <__kernel_rem_pio2+0x4b2>
 80089ae:	00e3      	lsls	r3, r4, #3
 80089b0:	aa76      	add	r2, sp, #472	@ 0x1d8
 80089b2:	189f      	adds	r7, r3, r2
 80089b4:	2300      	movs	r3, #0
 80089b6:	2200      	movs	r2, #0
 80089b8:	9202      	str	r2, [sp, #8]
 80089ba:	9303      	str	r3, [sp, #12]
 80089bc:	9b00      	ldr	r3, [sp, #0]
 80089be:	2500      	movs	r5, #0
 80089c0:	1b1e      	subs	r6, r3, r4
 80089c2:	e0ea      	b.n	8008b9a <__kernel_rem_pio2+0x496>
 80089c4:	2302      	movs	r3, #2
 80089c6:	9306      	str	r3, [sp, #24]
 80089c8:	e759      	b.n	800887e <__kernel_rem_pio2+0x17a>
 80089ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2c00      	cmp	r4, #0
 80089d0:	d10b      	bne.n	80089ea <__kernel_rem_pio2+0x2e6>
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d003      	beq.n	80089de <__kernel_rem_pio2+0x2da>
 80089d6:	1aeb      	subs	r3, r5, r3
 80089d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089da:	6023      	str	r3, [r4, #0]
 80089dc:	0003      	movs	r3, r0
 80089de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80089e0:	3201      	adds	r2, #1
 80089e2:	3404      	adds	r4, #4
 80089e4:	940a      	str	r4, [sp, #40]	@ 0x28
 80089e6:	001c      	movs	r4, r3
 80089e8:	e752      	b.n	8008890 <__kernel_rem_pio2+0x18c>
 80089ea:	1acb      	subs	r3, r1, r3
 80089ec:	e7f4      	b.n	80089d8 <__kernel_rem_pio2+0x2d4>
 80089ee:	9b00      	ldr	r3, [sp, #0]
 80089f0:	aa12      	add	r2, sp, #72	@ 0x48
 80089f2:	3b01      	subs	r3, #1
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	589a      	ldr	r2, [r3, r2]
 80089f8:	0252      	lsls	r2, r2, #9
 80089fa:	0a52      	lsrs	r2, r2, #9
 80089fc:	a912      	add	r1, sp, #72	@ 0x48
 80089fe:	505a      	str	r2, [r3, r1]
 8008a00:	e753      	b.n	80088aa <__kernel_rem_pio2+0x1a6>
 8008a02:	9b00      	ldr	r3, [sp, #0]
 8008a04:	aa12      	add	r2, sp, #72	@ 0x48
 8008a06:	3b01      	subs	r3, #1
 8008a08:	009b      	lsls	r3, r3, #2
 8008a0a:	589a      	ldr	r2, [r3, r2]
 8008a0c:	0292      	lsls	r2, r2, #10
 8008a0e:	0a92      	lsrs	r2, r2, #10
 8008a10:	e7f4      	b.n	80089fc <__kernel_rem_pio2+0x2f8>
 8008a12:	0099      	lsls	r1, r3, #2
 8008a14:	a812      	add	r0, sp, #72	@ 0x48
 8008a16:	5809      	ldr	r1, [r1, r0]
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	e7a4      	b.n	8008968 <__kernel_rem_pio2+0x264>
 8008a1e:	46c0      	nop			@ (mov r8, r8)
 8008a20:	fffffd84 	.word	0xfffffd84
 8008a24:	0800a4c8 	.word	0x0800a4c8
 8008a28:	40200000 	.word	0x40200000
 8008a2c:	00ffffff 	.word	0x00ffffff
 8008a30:	3ff00000 	.word	0x3ff00000
 8008a34:	3e700000 	.word	0x3e700000
 8008a38:	41700000 	.word	0x41700000
 8008a3c:	3fe00000 	.word	0x3fe00000
 8008a40:	0800a488 	.word	0x0800a488
 8008a44:	3301      	adds	r3, #1
 8008a46:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8008a48:	009a      	lsls	r2, r3, #2
 8008a4a:	4252      	negs	r2, r2
 8008a4c:	588a      	ldr	r2, [r1, r2]
 8008a4e:	2a00      	cmp	r2, #0
 8008a50:	d0f8      	beq.n	8008a44 <__kernel_rem_pio2+0x340>
 8008a52:	9a00      	ldr	r2, [sp, #0]
 8008a54:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008a56:	1c55      	adds	r5, r2, #1
 8008a58:	1852      	adds	r2, r2, r1
 8008a5a:	00d2      	lsls	r2, r2, #3
 8008a5c:	a926      	add	r1, sp, #152	@ 0x98
 8008a5e:	188c      	adds	r4, r1, r2
 8008a60:	9a00      	ldr	r2, [sp, #0]
 8008a62:	18d3      	adds	r3, r2, r3
 8008a64:	9306      	str	r3, [sp, #24]
 8008a66:	9b06      	ldr	r3, [sp, #24]
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	da00      	bge.n	8008a6e <__kernel_rem_pio2+0x36a>
 8008a6c:	e6b7      	b.n	80087de <__kernel_rem_pio2+0xda>
 8008a6e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008a70:	00ab      	lsls	r3, r5, #2
 8008a72:	58d0      	ldr	r0, [r2, r3]
 8008a74:	f7fa fa8c 	bl	8002f90 <__aeabi_i2d>
 8008a78:	2200      	movs	r2, #0
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	0027      	movs	r7, r4
 8008a7e:	2600      	movs	r6, #0
 8008a80:	6020      	str	r0, [r4, #0]
 8008a82:	6061      	str	r1, [r4, #4]
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a8a:	429e      	cmp	r6, r3
 8008a8c:	dd0b      	ble.n	8008aa6 <__kernel_rem_pio2+0x3a2>
 8008a8e:	00eb      	lsls	r3, r5, #3
 8008a90:	aa76      	add	r2, sp, #472	@ 0x1d8
 8008a92:	18d3      	adds	r3, r2, r3
 8008a94:	3501      	adds	r5, #1
 8008a96:	9900      	ldr	r1, [sp, #0]
 8008a98:	9a01      	ldr	r2, [sp, #4]
 8008a9a:	3408      	adds	r4, #8
 8008a9c:	6019      	str	r1, [r3, #0]
 8008a9e:	605a      	str	r2, [r3, #4]
 8008aa0:	e7e1      	b.n	8008a66 <__kernel_rem_pio2+0x362>
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e7cf      	b.n	8008a46 <__kernel_rem_pio2+0x342>
 8008aa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aa8:	00f1      	lsls	r1, r6, #3
 8008aaa:	1859      	adds	r1, r3, r1
 8008aac:	6808      	ldr	r0, [r1, #0]
 8008aae:	6849      	ldr	r1, [r1, #4]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f7f9 fbaa 	bl	800220c <__aeabi_dmul>
 8008ab8:	0002      	movs	r2, r0
 8008aba:	000b      	movs	r3, r1
 8008abc:	9800      	ldr	r0, [sp, #0]
 8008abe:	9901      	ldr	r1, [sp, #4]
 8008ac0:	f7f8 fbfc 	bl	80012bc <__aeabi_dadd>
 8008ac4:	3601      	adds	r6, #1
 8008ac6:	9000      	str	r0, [sp, #0]
 8008ac8:	9101      	str	r1, [sp, #4]
 8008aca:	3f08      	subs	r7, #8
 8008acc:	e7dc      	b.n	8008a88 <__kernel_rem_pio2+0x384>
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	0030      	movs	r0, r6
 8008ad2:	425a      	negs	r2, r3
 8008ad4:	0039      	movs	r1, r7
 8008ad6:	f7ff fd7b 	bl	80085d0 <scalbn>
 8008ada:	2200      	movs	r2, #0
 8008adc:	4bb0      	ldr	r3, [pc, #704]	@ (8008da0 <__kernel_rem_pio2+0x69c>)
 8008ade:	0006      	movs	r6, r0
 8008ae0:	000f      	movs	r7, r1
 8008ae2:	f7f7 fcc5 	bl	8000470 <__aeabi_dcmpge>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d025      	beq.n	8008b36 <__kernel_rem_pio2+0x432>
 8008aea:	2200      	movs	r2, #0
 8008aec:	4bad      	ldr	r3, [pc, #692]	@ (8008da4 <__kernel_rem_pio2+0x6a0>)
 8008aee:	0030      	movs	r0, r6
 8008af0:	0039      	movs	r1, r7
 8008af2:	f7f9 fb8b 	bl	800220c <__aeabi_dmul>
 8008af6:	f7fa fa0f 	bl	8002f18 <__aeabi_d2iz>
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	0004      	movs	r4, r0
 8008afe:	009d      	lsls	r5, r3, #2
 8008b00:	f7fa fa46 	bl	8002f90 <__aeabi_i2d>
 8008b04:	2200      	movs	r2, #0
 8008b06:	4ba6      	ldr	r3, [pc, #664]	@ (8008da0 <__kernel_rem_pio2+0x69c>)
 8008b08:	f7f9 fb80 	bl	800220c <__aeabi_dmul>
 8008b0c:	0002      	movs	r2, r0
 8008b0e:	000b      	movs	r3, r1
 8008b10:	0030      	movs	r0, r6
 8008b12:	0039      	movs	r1, r7
 8008b14:	f7f9 fe42 	bl	800279c <__aeabi_dsub>
 8008b18:	f7fa f9fe 	bl	8002f18 <__aeabi_d2iz>
 8008b1c:	ab12      	add	r3, sp, #72	@ 0x48
 8008b1e:	5158      	str	r0, [r3, r5]
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	aa12      	add	r2, sp, #72	@ 0x48
 8008b24:	3301      	adds	r3, #1
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	9b02      	ldr	r3, [sp, #8]
 8008b2a:	3318      	adds	r3, #24
 8008b2c:	9302      	str	r3, [sp, #8]
 8008b2e:	9b00      	ldr	r3, [sp, #0]
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	509c      	str	r4, [r3, r2]
 8008b34:	e72a      	b.n	800898c <__kernel_rem_pio2+0x288>
 8008b36:	9b00      	ldr	r3, [sp, #0]
 8008b38:	0030      	movs	r0, r6
 8008b3a:	0039      	movs	r1, r7
 8008b3c:	009c      	lsls	r4, r3, #2
 8008b3e:	f7fa f9eb 	bl	8002f18 <__aeabi_d2iz>
 8008b42:	ab12      	add	r3, sp, #72	@ 0x48
 8008b44:	5118      	str	r0, [r3, r4]
 8008b46:	e721      	b.n	800898c <__kernel_rem_pio2+0x288>
 8008b48:	00f3      	lsls	r3, r6, #3
 8008b4a:	aa76      	add	r2, sp, #472	@ 0x1d8
 8008b4c:	18d7      	adds	r7, r2, r3
 8008b4e:	00b3      	lsls	r3, r6, #2
 8008b50:	aa12      	add	r2, sp, #72	@ 0x48
 8008b52:	5898      	ldr	r0, [r3, r2]
 8008b54:	f7fa fa1c 	bl	8002f90 <__aeabi_i2d>
 8008b58:	0022      	movs	r2, r4
 8008b5a:	002b      	movs	r3, r5
 8008b5c:	f7f9 fb56 	bl	800220c <__aeabi_dmul>
 8008b60:	2200      	movs	r2, #0
 8008b62:	6038      	str	r0, [r7, #0]
 8008b64:	6079      	str	r1, [r7, #4]
 8008b66:	4b8f      	ldr	r3, [pc, #572]	@ (8008da4 <__kernel_rem_pio2+0x6a0>)
 8008b68:	0020      	movs	r0, r4
 8008b6a:	0029      	movs	r1, r5
 8008b6c:	f7f9 fb4e 	bl	800220c <__aeabi_dmul>
 8008b70:	3e01      	subs	r6, #1
 8008b72:	0004      	movs	r4, r0
 8008b74:	000d      	movs	r5, r1
 8008b76:	e711      	b.n	800899c <__kernel_rem_pio2+0x298>
 8008b78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b7a:	00e9      	lsls	r1, r5, #3
 8008b7c:	18c9      	adds	r1, r1, r3
 8008b7e:	6808      	ldr	r0, [r1, #0]
 8008b80:	6849      	ldr	r1, [r1, #4]
 8008b82:	cf0c      	ldmia	r7!, {r2, r3}
 8008b84:	f7f9 fb42 	bl	800220c <__aeabi_dmul>
 8008b88:	0002      	movs	r2, r0
 8008b8a:	000b      	movs	r3, r1
 8008b8c:	9802      	ldr	r0, [sp, #8]
 8008b8e:	9903      	ldr	r1, [sp, #12]
 8008b90:	f7f8 fb94 	bl	80012bc <__aeabi_dadd>
 8008b94:	9002      	str	r0, [sp, #8]
 8008b96:	9103      	str	r1, [sp, #12]
 8008b98:	3501      	adds	r5, #1
 8008b9a:	9b08      	ldr	r3, [sp, #32]
 8008b9c:	429d      	cmp	r5, r3
 8008b9e:	dc01      	bgt.n	8008ba4 <__kernel_rem_pio2+0x4a0>
 8008ba0:	42ae      	cmp	r6, r5
 8008ba2:	dae9      	bge.n	8008b78 <__kernel_rem_pio2+0x474>
 8008ba4:	00f6      	lsls	r6, r6, #3
 8008ba6:	ab4e      	add	r3, sp, #312	@ 0x138
 8008ba8:	199b      	adds	r3, r3, r6
 8008baa:	9902      	ldr	r1, [sp, #8]
 8008bac:	9a03      	ldr	r2, [sp, #12]
 8008bae:	3c01      	subs	r4, #1
 8008bb0:	6019      	str	r1, [r3, #0]
 8008bb2:	605a      	str	r2, [r3, #4]
 8008bb4:	e6f8      	b.n	80089a8 <__kernel_rem_pio2+0x2a4>
 8008bb6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	dc0b      	bgt.n	8008bd4 <__kernel_rem_pio2+0x4d0>
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dd00      	ble.n	8008bc2 <__kernel_rem_pio2+0x4be>
 8008bc0:	e084      	b.n	8008ccc <__kernel_rem_pio2+0x5c8>
 8008bc2:	d052      	beq.n	8008c6a <__kernel_rem_pio2+0x566>
 8008bc4:	2007      	movs	r0, #7
 8008bc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bc8:	4003      	ands	r3, r0
 8008bca:	0018      	movs	r0, r3
 8008bcc:	239f      	movs	r3, #159	@ 0x9f
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	449d      	add	sp, r3
 8008bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bd4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008bd6:	2b03      	cmp	r3, #3
 8008bd8:	d1f4      	bne.n	8008bc4 <__kernel_rem_pio2+0x4c0>
 8008bda:	9b00      	ldr	r3, [sp, #0]
 8008bdc:	aa4e      	add	r2, sp, #312	@ 0x138
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	18d4      	adds	r4, r2, r3
 8008be2:	0025      	movs	r5, r4
 8008be4:	9b00      	ldr	r3, [sp, #0]
 8008be6:	9302      	str	r3, [sp, #8]
 8008be8:	9b02      	ldr	r3, [sp, #8]
 8008bea:	3d08      	subs	r5, #8
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dd00      	ble.n	8008bf2 <__kernel_rem_pio2+0x4ee>
 8008bf0:	e07a      	b.n	8008ce8 <__kernel_rem_pio2+0x5e4>
 8008bf2:	9d00      	ldr	r5, [sp, #0]
 8008bf4:	3c08      	subs	r4, #8
 8008bf6:	2d01      	cmp	r5, #1
 8008bf8:	dd00      	ble.n	8008bfc <__kernel_rem_pio2+0x4f8>
 8008bfa:	e095      	b.n	8008d28 <__kernel_rem_pio2+0x624>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	2100      	movs	r1, #0
 8008c00:	9b00      	ldr	r3, [sp, #0]
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	dd00      	ble.n	8008c08 <__kernel_rem_pio2+0x504>
 8008c06:	e0ad      	b.n	8008d64 <__kernel_rem_pio2+0x660>
 8008c08:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 8008c0a:	9c4f      	ldr	r4, [sp, #316]	@ 0x13c
 8008c0c:	9e50      	ldr	r6, [sp, #320]	@ 0x140
 8008c0e:	9f51      	ldr	r7, [sp, #324]	@ 0x144
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	9401      	str	r4, [sp, #4]
 8008c14:	9b06      	ldr	r3, [sp, #24]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d000      	beq.n	8008c1c <__kernel_rem_pio2+0x518>
 8008c1a:	e0af      	b.n	8008d7c <__kernel_rem_pio2+0x678>
 8008c1c:	9c00      	ldr	r4, [sp, #0]
 8008c1e:	9d01      	ldr	r5, [sp, #4]
 8008c20:	9b05      	ldr	r3, [sp, #20]
 8008c22:	601c      	str	r4, [r3, #0]
 8008c24:	605d      	str	r5, [r3, #4]
 8008c26:	609e      	str	r6, [r3, #8]
 8008c28:	60df      	str	r7, [r3, #12]
 8008c2a:	6118      	str	r0, [r3, #16]
 8008c2c:	6159      	str	r1, [r3, #20]
 8008c2e:	e7c9      	b.n	8008bc4 <__kernel_rem_pio2+0x4c0>
 8008c30:	9b00      	ldr	r3, [sp, #0]
 8008c32:	aa4e      	add	r2, sp, #312	@ 0x138
 8008c34:	00db      	lsls	r3, r3, #3
 8008c36:	18d3      	adds	r3, r2, r3
 8008c38:	0020      	movs	r0, r4
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	0029      	movs	r1, r5
 8008c40:	f7f8 fb3c 	bl	80012bc <__aeabi_dadd>
 8008c44:	0004      	movs	r4, r0
 8008c46:	000d      	movs	r5, r1
 8008c48:	9b00      	ldr	r3, [sp, #0]
 8008c4a:	3b01      	subs	r3, #1
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	9b00      	ldr	r3, [sp, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	daed      	bge.n	8008c30 <__kernel_rem_pio2+0x52c>
 8008c54:	9b06      	ldr	r3, [sp, #24]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <__kernel_rem_pio2+0x55e>
 8008c5a:	2180      	movs	r1, #128	@ 0x80
 8008c5c:	0609      	lsls	r1, r1, #24
 8008c5e:	186b      	adds	r3, r5, r1
 8008c60:	001d      	movs	r5, r3
 8008c62:	9b05      	ldr	r3, [sp, #20]
 8008c64:	601c      	str	r4, [r3, #0]
 8008c66:	605d      	str	r5, [r3, #4]
 8008c68:	e7ac      	b.n	8008bc4 <__kernel_rem_pio2+0x4c0>
 8008c6a:	2400      	movs	r4, #0
 8008c6c:	2500      	movs	r5, #0
 8008c6e:	e7ee      	b.n	8008c4e <__kernel_rem_pio2+0x54a>
 8008c70:	00e3      	lsls	r3, r4, #3
 8008c72:	aa4e      	add	r2, sp, #312	@ 0x138
 8008c74:	18d3      	adds	r3, r2, r3
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f7f8 fb1f 	bl	80012bc <__aeabi_dadd>
 8008c7e:	3c01      	subs	r4, #1
 8008c80:	2c00      	cmp	r4, #0
 8008c82:	daf5      	bge.n	8008c70 <__kernel_rem_pio2+0x56c>
 8008c84:	9c06      	ldr	r4, [sp, #24]
 8008c86:	0002      	movs	r2, r0
 8008c88:	000b      	movs	r3, r1
 8008c8a:	2c00      	cmp	r4, #0
 8008c8c:	d002      	beq.n	8008c94 <__kernel_rem_pio2+0x590>
 8008c8e:	2480      	movs	r4, #128	@ 0x80
 8008c90:	0624      	lsls	r4, r4, #24
 8008c92:	190b      	adds	r3, r1, r4
 8008c94:	9c05      	ldr	r4, [sp, #20]
 8008c96:	2501      	movs	r5, #1
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	6063      	str	r3, [r4, #4]
 8008c9c:	0002      	movs	r2, r0
 8008c9e:	000b      	movs	r3, r1
 8008ca0:	984e      	ldr	r0, [sp, #312]	@ 0x138
 8008ca2:	994f      	ldr	r1, [sp, #316]	@ 0x13c
 8008ca4:	f7f9 fd7a 	bl	800279c <__aeabi_dsub>
 8008ca8:	0006      	movs	r6, r0
 8008caa:	000f      	movs	r7, r1
 8008cac:	ac4e      	add	r4, sp, #312	@ 0x138
 8008cae:	9b00      	ldr	r3, [sp, #0]
 8008cb0:	3408      	adds	r4, #8
 8008cb2:	42ab      	cmp	r3, r5
 8008cb4:	da0e      	bge.n	8008cd4 <__kernel_rem_pio2+0x5d0>
 8008cb6:	9b06      	ldr	r3, [sp, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d003      	beq.n	8008cc4 <__kernel_rem_pio2+0x5c0>
 8008cbc:	2180      	movs	r1, #128	@ 0x80
 8008cbe:	0609      	lsls	r1, r1, #24
 8008cc0:	187b      	adds	r3, r7, r1
 8008cc2:	001f      	movs	r7, r3
 8008cc4:	9b05      	ldr	r3, [sp, #20]
 8008cc6:	609e      	str	r6, [r3, #8]
 8008cc8:	60df      	str	r7, [r3, #12]
 8008cca:	e77b      	b.n	8008bc4 <__kernel_rem_pio2+0x4c0>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	2100      	movs	r1, #0
 8008cd0:	9c00      	ldr	r4, [sp, #0]
 8008cd2:	e7d5      	b.n	8008c80 <__kernel_rem_pio2+0x57c>
 8008cd4:	0030      	movs	r0, r6
 8008cd6:	6822      	ldr	r2, [r4, #0]
 8008cd8:	6863      	ldr	r3, [r4, #4]
 8008cda:	0039      	movs	r1, r7
 8008cdc:	f7f8 faee 	bl	80012bc <__aeabi_dadd>
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	0006      	movs	r6, r0
 8008ce4:	000f      	movs	r7, r1
 8008ce6:	e7e2      	b.n	8008cae <__kernel_rem_pio2+0x5aa>
 8008ce8:	9b02      	ldr	r3, [sp, #8]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	682a      	ldr	r2, [r5, #0]
 8008cf0:	686b      	ldr	r3, [r5, #4]
 8008cf2:	9208      	str	r2, [sp, #32]
 8008cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cf6:	9808      	ldr	r0, [sp, #32]
 8008cf8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cfa:	68aa      	ldr	r2, [r5, #8]
 8008cfc:	68eb      	ldr	r3, [r5, #12]
 8008cfe:	920a      	str	r2, [sp, #40]	@ 0x28
 8008d00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d02:	f7f8 fadb 	bl	80012bc <__aeabi_dadd>
 8008d06:	0002      	movs	r2, r0
 8008d08:	000b      	movs	r3, r1
 8008d0a:	0006      	movs	r6, r0
 8008d0c:	000f      	movs	r7, r1
 8008d0e:	9808      	ldr	r0, [sp, #32]
 8008d10:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d12:	f7f9 fd43 	bl	800279c <__aeabi_dsub>
 8008d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d1a:	f7f8 facf 	bl	80012bc <__aeabi_dadd>
 8008d1e:	602e      	str	r6, [r5, #0]
 8008d20:	606f      	str	r7, [r5, #4]
 8008d22:	60a8      	str	r0, [r5, #8]
 8008d24:	60e9      	str	r1, [r5, #12]
 8008d26:	e75f      	b.n	8008be8 <__kernel_rem_pio2+0x4e4>
 8008d28:	6822      	ldr	r2, [r4, #0]
 8008d2a:	6863      	ldr	r3, [r4, #4]
 8008d2c:	9202      	str	r2, [sp, #8]
 8008d2e:	9303      	str	r3, [sp, #12]
 8008d30:	9802      	ldr	r0, [sp, #8]
 8008d32:	9903      	ldr	r1, [sp, #12]
 8008d34:	68a2      	ldr	r2, [r4, #8]
 8008d36:	68e3      	ldr	r3, [r4, #12]
 8008d38:	9208      	str	r2, [sp, #32]
 8008d3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d3c:	f7f8 fabe 	bl	80012bc <__aeabi_dadd>
 8008d40:	0002      	movs	r2, r0
 8008d42:	000b      	movs	r3, r1
 8008d44:	0006      	movs	r6, r0
 8008d46:	000f      	movs	r7, r1
 8008d48:	9802      	ldr	r0, [sp, #8]
 8008d4a:	9903      	ldr	r1, [sp, #12]
 8008d4c:	f7f9 fd26 	bl	800279c <__aeabi_dsub>
 8008d50:	9a08      	ldr	r2, [sp, #32]
 8008d52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d54:	f7f8 fab2 	bl	80012bc <__aeabi_dadd>
 8008d58:	3d01      	subs	r5, #1
 8008d5a:	60a0      	str	r0, [r4, #8]
 8008d5c:	60e1      	str	r1, [r4, #12]
 8008d5e:	6026      	str	r6, [r4, #0]
 8008d60:	6067      	str	r7, [r4, #4]
 8008d62:	e747      	b.n	8008bf4 <__kernel_rem_pio2+0x4f0>
 8008d64:	9b00      	ldr	r3, [sp, #0]
 8008d66:	aa4e      	add	r2, sp, #312	@ 0x138
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	18d3      	adds	r3, r2, r3
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f7f8 faa4 	bl	80012bc <__aeabi_dadd>
 8008d74:	9b00      	ldr	r3, [sp, #0]
 8008d76:	3b01      	subs	r3, #1
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	e741      	b.n	8008c00 <__kernel_rem_pio2+0x4fc>
 8008d7c:	9c00      	ldr	r4, [sp, #0]
 8008d7e:	9b05      	ldr	r3, [sp, #20]
 8008d80:	9a01      	ldr	r2, [sp, #4]
 8008d82:	601c      	str	r4, [r3, #0]
 8008d84:	2380      	movs	r3, #128	@ 0x80
 8008d86:	061b      	lsls	r3, r3, #24
 8008d88:	18d4      	adds	r4, r2, r3
 8008d8a:	9a05      	ldr	r2, [sp, #20]
 8008d8c:	6054      	str	r4, [r2, #4]
 8008d8e:	001a      	movs	r2, r3
 8008d90:	9c05      	ldr	r4, [sp, #20]
 8008d92:	18fb      	adds	r3, r7, r3
 8008d94:	60e3      	str	r3, [r4, #12]
 8008d96:	188b      	adds	r3, r1, r2
 8008d98:	60a6      	str	r6, [r4, #8]
 8008d9a:	6120      	str	r0, [r4, #16]
 8008d9c:	6163      	str	r3, [r4, #20]
 8008d9e:	e711      	b.n	8008bc4 <__kernel_rem_pio2+0x4c0>
 8008da0:	41700000 	.word	0x41700000
 8008da4:	3e700000 	.word	0x3e700000

08008da8 <__ieee754_log>:
 8008da8:	2380      	movs	r3, #128	@ 0x80
 8008daa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dac:	035b      	lsls	r3, r3, #13
 8008dae:	000e      	movs	r6, r1
 8008db0:	b08d      	sub	sp, #52	@ 0x34
 8008db2:	4299      	cmp	r1, r3
 8008db4:	da23      	bge.n	8008dfe <__ieee754_log+0x56>
 8008db6:	004b      	lsls	r3, r1, #1
 8008db8:	085b      	lsrs	r3, r3, #1
 8008dba:	4303      	orrs	r3, r0
 8008dbc:	d107      	bne.n	8008dce <__ieee754_log+0x26>
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	49b4      	ldr	r1, [pc, #720]	@ (8009098 <__ieee754_log+0x2f0>)
 8008dc6:	f7f8 fddd 	bl	8001984 <__aeabi_ddiv>
 8008dca:	b00d      	add	sp, #52	@ 0x34
 8008dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dce:	2900      	cmp	r1, #0
 8008dd0:	da06      	bge.n	8008de0 <__ieee754_log+0x38>
 8008dd2:	0002      	movs	r2, r0
 8008dd4:	000b      	movs	r3, r1
 8008dd6:	f7f9 fce1 	bl	800279c <__aeabi_dsub>
 8008dda:	2200      	movs	r2, #0
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e7f2      	b.n	8008dc6 <__ieee754_log+0x1e>
 8008de0:	4bae      	ldr	r3, [pc, #696]	@ (800909c <__ieee754_log+0x2f4>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	f7f9 fa12 	bl	800220c <__aeabi_dmul>
 8008de8:	2336      	movs	r3, #54	@ 0x36
 8008dea:	000e      	movs	r6, r1
 8008dec:	425b      	negs	r3, r3
 8008dee:	4aac      	ldr	r2, [pc, #688]	@ (80090a0 <__ieee754_log+0x2f8>)
 8008df0:	4296      	cmp	r6, r2
 8008df2:	dd06      	ble.n	8008e02 <__ieee754_log+0x5a>
 8008df4:	0002      	movs	r2, r0
 8008df6:	000b      	movs	r3, r1
 8008df8:	f7f8 fa60 	bl	80012bc <__aeabi_dadd>
 8008dfc:	e7e5      	b.n	8008dca <__ieee754_log+0x22>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	e7f5      	b.n	8008dee <__ieee754_log+0x46>
 8008e02:	4ca8      	ldr	r4, [pc, #672]	@ (80090a4 <__ieee754_log+0x2fc>)
 8008e04:	1532      	asrs	r2, r6, #20
 8008e06:	1912      	adds	r2, r2, r4
 8008e08:	0336      	lsls	r6, r6, #12
 8008e0a:	4ca7      	ldr	r4, [pc, #668]	@ (80090a8 <__ieee754_log+0x300>)
 8008e0c:	18d2      	adds	r2, r2, r3
 8008e0e:	0b33      	lsrs	r3, r6, #12
 8008e10:	9302      	str	r3, [sp, #8]
 8008e12:	191b      	adds	r3, r3, r4
 8008e14:	2480      	movs	r4, #128	@ 0x80
 8008e16:	0364      	lsls	r4, r4, #13
 8008e18:	4023      	ands	r3, r4
 8008e1a:	4ca4      	ldr	r4, [pc, #656]	@ (80090ac <__ieee754_log+0x304>)
 8008e1c:	9d02      	ldr	r5, [sp, #8]
 8008e1e:	405c      	eors	r4, r3
 8008e20:	151b      	asrs	r3, r3, #20
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	4325      	orrs	r5, r4
 8008e26:	2200      	movs	r2, #0
 8008e28:	9300      	str	r3, [sp, #0]
 8008e2a:	0029      	movs	r1, r5
 8008e2c:	4b9f      	ldr	r3, [pc, #636]	@ (80090ac <__ieee754_log+0x304>)
 8008e2e:	f7f9 fcb5 	bl	800279c <__aeabi_dsub>
 8008e32:	9b02      	ldr	r3, [sp, #8]
 8008e34:	0006      	movs	r6, r0
 8008e36:	3302      	adds	r3, #2
 8008e38:	031b      	lsls	r3, r3, #12
 8008e3a:	000f      	movs	r7, r1
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	0b1b      	lsrs	r3, r3, #12
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	dc64      	bgt.n	8008f0e <__ieee754_log+0x166>
 8008e44:	2300      	movs	r3, #0
 8008e46:	f7f7 faef 	bl	8000428 <__aeabi_dcmpeq>
 8008e4a:	2800      	cmp	r0, #0
 8008e4c:	d019      	beq.n	8008e82 <__ieee754_log+0xda>
 8008e4e:	9b00      	ldr	r3, [sp, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d100      	bne.n	8008e56 <__ieee754_log+0xae>
 8008e54:	e11c      	b.n	8009090 <__ieee754_log+0x2e8>
 8008e56:	0018      	movs	r0, r3
 8008e58:	f7fa f89a 	bl	8002f90 <__aeabi_i2d>
 8008e5c:	4a94      	ldr	r2, [pc, #592]	@ (80090b0 <__ieee754_log+0x308>)
 8008e5e:	4b95      	ldr	r3, [pc, #596]	@ (80090b4 <__ieee754_log+0x30c>)
 8008e60:	0004      	movs	r4, r0
 8008e62:	000d      	movs	r5, r1
 8008e64:	f7f9 f9d2 	bl	800220c <__aeabi_dmul>
 8008e68:	4a93      	ldr	r2, [pc, #588]	@ (80090b8 <__ieee754_log+0x310>)
 8008e6a:	0006      	movs	r6, r0
 8008e6c:	000f      	movs	r7, r1
 8008e6e:	4b93      	ldr	r3, [pc, #588]	@ (80090bc <__ieee754_log+0x314>)
 8008e70:	0020      	movs	r0, r4
 8008e72:	0029      	movs	r1, r5
 8008e74:	f7f9 f9ca 	bl	800220c <__aeabi_dmul>
 8008e78:	0002      	movs	r2, r0
 8008e7a:	000b      	movs	r3, r1
 8008e7c:	0030      	movs	r0, r6
 8008e7e:	0039      	movs	r1, r7
 8008e80:	e7ba      	b.n	8008df8 <__ieee754_log+0x50>
 8008e82:	4a8f      	ldr	r2, [pc, #572]	@ (80090c0 <__ieee754_log+0x318>)
 8008e84:	4b8f      	ldr	r3, [pc, #572]	@ (80090c4 <__ieee754_log+0x31c>)
 8008e86:	0030      	movs	r0, r6
 8008e88:	0039      	movs	r1, r7
 8008e8a:	f7f9 f9bf 	bl	800220c <__aeabi_dmul>
 8008e8e:	0002      	movs	r2, r0
 8008e90:	000b      	movs	r3, r1
 8008e92:	2000      	movs	r0, #0
 8008e94:	498c      	ldr	r1, [pc, #560]	@ (80090c8 <__ieee754_log+0x320>)
 8008e96:	f7f9 fc81 	bl	800279c <__aeabi_dsub>
 8008e9a:	0032      	movs	r2, r6
 8008e9c:	0004      	movs	r4, r0
 8008e9e:	000d      	movs	r5, r1
 8008ea0:	003b      	movs	r3, r7
 8008ea2:	0030      	movs	r0, r6
 8008ea4:	0039      	movs	r1, r7
 8008ea6:	f7f9 f9b1 	bl	800220c <__aeabi_dmul>
 8008eaa:	000b      	movs	r3, r1
 8008eac:	0002      	movs	r2, r0
 8008eae:	0029      	movs	r1, r5
 8008eb0:	0020      	movs	r0, r4
 8008eb2:	f7f9 f9ab 	bl	800220c <__aeabi_dmul>
 8008eb6:	9b00      	ldr	r3, [sp, #0]
 8008eb8:	9002      	str	r0, [sp, #8]
 8008eba:	9103      	str	r1, [sp, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d106      	bne.n	8008ece <__ieee754_log+0x126>
 8008ec0:	0002      	movs	r2, r0
 8008ec2:	000b      	movs	r3, r1
 8008ec4:	0030      	movs	r0, r6
 8008ec6:	0039      	movs	r1, r7
 8008ec8:	f7f9 fc68 	bl	800279c <__aeabi_dsub>
 8008ecc:	e77d      	b.n	8008dca <__ieee754_log+0x22>
 8008ece:	9800      	ldr	r0, [sp, #0]
 8008ed0:	f7fa f85e 	bl	8002f90 <__aeabi_i2d>
 8008ed4:	4a76      	ldr	r2, [pc, #472]	@ (80090b0 <__ieee754_log+0x308>)
 8008ed6:	4b77      	ldr	r3, [pc, #476]	@ (80090b4 <__ieee754_log+0x30c>)
 8008ed8:	0004      	movs	r4, r0
 8008eda:	000d      	movs	r5, r1
 8008edc:	f7f9 f996 	bl	800220c <__aeabi_dmul>
 8008ee0:	4a75      	ldr	r2, [pc, #468]	@ (80090b8 <__ieee754_log+0x310>)
 8008ee2:	9000      	str	r0, [sp, #0]
 8008ee4:	9101      	str	r1, [sp, #4]
 8008ee6:	4b75      	ldr	r3, [pc, #468]	@ (80090bc <__ieee754_log+0x314>)
 8008ee8:	0020      	movs	r0, r4
 8008eea:	0029      	movs	r1, r5
 8008eec:	f7f9 f98e 	bl	800220c <__aeabi_dmul>
 8008ef0:	0002      	movs	r2, r0
 8008ef2:	000b      	movs	r3, r1
 8008ef4:	9802      	ldr	r0, [sp, #8]
 8008ef6:	9903      	ldr	r1, [sp, #12]
 8008ef8:	f7f9 fc50 	bl	800279c <__aeabi_dsub>
 8008efc:	0032      	movs	r2, r6
 8008efe:	003b      	movs	r3, r7
 8008f00:	f7f9 fc4c 	bl	800279c <__aeabi_dsub>
 8008f04:	0002      	movs	r2, r0
 8008f06:	000b      	movs	r3, r1
 8008f08:	9800      	ldr	r0, [sp, #0]
 8008f0a:	9901      	ldr	r1, [sp, #4]
 8008f0c:	e7dc      	b.n	8008ec8 <__ieee754_log+0x120>
 8008f0e:	2380      	movs	r3, #128	@ 0x80
 8008f10:	05db      	lsls	r3, r3, #23
 8008f12:	f7f8 f9d3 	bl	80012bc <__aeabi_dadd>
 8008f16:	0002      	movs	r2, r0
 8008f18:	000b      	movs	r3, r1
 8008f1a:	0030      	movs	r0, r6
 8008f1c:	0039      	movs	r1, r7
 8008f1e:	f7f8 fd31 	bl	8001984 <__aeabi_ddiv>
 8008f22:	9004      	str	r0, [sp, #16]
 8008f24:	9105      	str	r1, [sp, #20]
 8008f26:	9800      	ldr	r0, [sp, #0]
 8008f28:	f7fa f832 	bl	8002f90 <__aeabi_i2d>
 8008f2c:	9a04      	ldr	r2, [sp, #16]
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	9006      	str	r0, [sp, #24]
 8008f32:	9107      	str	r1, [sp, #28]
 8008f34:	0010      	movs	r0, r2
 8008f36:	0019      	movs	r1, r3
 8008f38:	f7f9 f968 	bl	800220c <__aeabi_dmul>
 8008f3c:	4a63      	ldr	r2, [pc, #396]	@ (80090cc <__ieee754_log+0x324>)
 8008f3e:	9b02      	ldr	r3, [sp, #8]
 8008f40:	4694      	mov	ip, r2
 8008f42:	4463      	add	r3, ip
 8008f44:	0002      	movs	r2, r0
 8008f46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f48:	000b      	movs	r3, r1
 8008f4a:	9008      	str	r0, [sp, #32]
 8008f4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f4e:	f7f9 f95d 	bl	800220c <__aeabi_dmul>
 8008f52:	0004      	movs	r4, r0
 8008f54:	000d      	movs	r5, r1
 8008f56:	4a5e      	ldr	r2, [pc, #376]	@ (80090d0 <__ieee754_log+0x328>)
 8008f58:	4b5e      	ldr	r3, [pc, #376]	@ (80090d4 <__ieee754_log+0x32c>)
 8008f5a:	f7f9 f957 	bl	800220c <__aeabi_dmul>
 8008f5e:	4a5e      	ldr	r2, [pc, #376]	@ (80090d8 <__ieee754_log+0x330>)
 8008f60:	4b5e      	ldr	r3, [pc, #376]	@ (80090dc <__ieee754_log+0x334>)
 8008f62:	f7f8 f9ab 	bl	80012bc <__aeabi_dadd>
 8008f66:	0022      	movs	r2, r4
 8008f68:	002b      	movs	r3, r5
 8008f6a:	f7f9 f94f 	bl	800220c <__aeabi_dmul>
 8008f6e:	4a5c      	ldr	r2, [pc, #368]	@ (80090e0 <__ieee754_log+0x338>)
 8008f70:	4b5c      	ldr	r3, [pc, #368]	@ (80090e4 <__ieee754_log+0x33c>)
 8008f72:	f7f8 f9a3 	bl	80012bc <__aeabi_dadd>
 8008f76:	0022      	movs	r2, r4
 8008f78:	002b      	movs	r3, r5
 8008f7a:	f7f9 f947 	bl	800220c <__aeabi_dmul>
 8008f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80090e8 <__ieee754_log+0x340>)
 8008f80:	4b5a      	ldr	r3, [pc, #360]	@ (80090ec <__ieee754_log+0x344>)
 8008f82:	f7f8 f99b 	bl	80012bc <__aeabi_dadd>
 8008f86:	9a08      	ldr	r2, [sp, #32]
 8008f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f8a:	f7f9 f93f 	bl	800220c <__aeabi_dmul>
 8008f8e:	4a58      	ldr	r2, [pc, #352]	@ (80090f0 <__ieee754_log+0x348>)
 8008f90:	9008      	str	r0, [sp, #32]
 8008f92:	9109      	str	r1, [sp, #36]	@ 0x24
 8008f94:	4b57      	ldr	r3, [pc, #348]	@ (80090f4 <__ieee754_log+0x34c>)
 8008f96:	0020      	movs	r0, r4
 8008f98:	0029      	movs	r1, r5
 8008f9a:	f7f9 f937 	bl	800220c <__aeabi_dmul>
 8008f9e:	4a56      	ldr	r2, [pc, #344]	@ (80090f8 <__ieee754_log+0x350>)
 8008fa0:	4b56      	ldr	r3, [pc, #344]	@ (80090fc <__ieee754_log+0x354>)
 8008fa2:	f7f8 f98b 	bl	80012bc <__aeabi_dadd>
 8008fa6:	0022      	movs	r2, r4
 8008fa8:	002b      	movs	r3, r5
 8008faa:	f7f9 f92f 	bl	800220c <__aeabi_dmul>
 8008fae:	4a54      	ldr	r2, [pc, #336]	@ (8009100 <__ieee754_log+0x358>)
 8008fb0:	4b54      	ldr	r3, [pc, #336]	@ (8009104 <__ieee754_log+0x35c>)
 8008fb2:	f7f8 f983 	bl	80012bc <__aeabi_dadd>
 8008fb6:	0022      	movs	r2, r4
 8008fb8:	002b      	movs	r3, r5
 8008fba:	f7f9 f927 	bl	800220c <__aeabi_dmul>
 8008fbe:	0002      	movs	r2, r0
 8008fc0:	000b      	movs	r3, r1
 8008fc2:	9808      	ldr	r0, [sp, #32]
 8008fc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fc6:	f7f8 f979 	bl	80012bc <__aeabi_dadd>
 8008fca:	9a02      	ldr	r2, [sp, #8]
 8008fcc:	4b4e      	ldr	r3, [pc, #312]	@ (8009108 <__ieee754_log+0x360>)
 8008fce:	0004      	movs	r4, r0
 8008fd0:	1a9b      	subs	r3, r3, r2
 8008fd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008fd4:	000d      	movs	r5, r1
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	dd34      	ble.n	8009046 <__ieee754_log+0x29e>
 8008fdc:	2200      	movs	r2, #0
 8008fde:	4b3a      	ldr	r3, [pc, #232]	@ (80090c8 <__ieee754_log+0x320>)
 8008fe0:	0030      	movs	r0, r6
 8008fe2:	0039      	movs	r1, r7
 8008fe4:	f7f9 f912 	bl	800220c <__aeabi_dmul>
 8008fe8:	0032      	movs	r2, r6
 8008fea:	003b      	movs	r3, r7
 8008fec:	f7f9 f90e 	bl	800220c <__aeabi_dmul>
 8008ff0:	0002      	movs	r2, r0
 8008ff2:	000b      	movs	r3, r1
 8008ff4:	9002      	str	r0, [sp, #8]
 8008ff6:	9103      	str	r1, [sp, #12]
 8008ff8:	0020      	movs	r0, r4
 8008ffa:	0029      	movs	r1, r5
 8008ffc:	f7f8 f95e 	bl	80012bc <__aeabi_dadd>
 8009000:	9a04      	ldr	r2, [sp, #16]
 8009002:	9b05      	ldr	r3, [sp, #20]
 8009004:	f7f9 f902 	bl	800220c <__aeabi_dmul>
 8009008:	9b00      	ldr	r3, [sp, #0]
 800900a:	0004      	movs	r4, r0
 800900c:	000d      	movs	r5, r1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d106      	bne.n	8009020 <__ieee754_log+0x278>
 8009012:	0002      	movs	r2, r0
 8009014:	000b      	movs	r3, r1
 8009016:	9802      	ldr	r0, [sp, #8]
 8009018:	9903      	ldr	r1, [sp, #12]
 800901a:	f7f9 fbbf 	bl	800279c <__aeabi_dsub>
 800901e:	e74f      	b.n	8008ec0 <__ieee754_log+0x118>
 8009020:	4a23      	ldr	r2, [pc, #140]	@ (80090b0 <__ieee754_log+0x308>)
 8009022:	4b24      	ldr	r3, [pc, #144]	@ (80090b4 <__ieee754_log+0x30c>)
 8009024:	9806      	ldr	r0, [sp, #24]
 8009026:	9907      	ldr	r1, [sp, #28]
 8009028:	f7f9 f8f0 	bl	800220c <__aeabi_dmul>
 800902c:	4a22      	ldr	r2, [pc, #136]	@ (80090b8 <__ieee754_log+0x310>)
 800902e:	9000      	str	r0, [sp, #0]
 8009030:	9101      	str	r1, [sp, #4]
 8009032:	9806      	ldr	r0, [sp, #24]
 8009034:	9907      	ldr	r1, [sp, #28]
 8009036:	4b21      	ldr	r3, [pc, #132]	@ (80090bc <__ieee754_log+0x314>)
 8009038:	f7f9 f8e8 	bl	800220c <__aeabi_dmul>
 800903c:	0022      	movs	r2, r4
 800903e:	002b      	movs	r3, r5
 8009040:	f7f8 f93c 	bl	80012bc <__aeabi_dadd>
 8009044:	e754      	b.n	8008ef0 <__ieee754_log+0x148>
 8009046:	0002      	movs	r2, r0
 8009048:	000b      	movs	r3, r1
 800904a:	0030      	movs	r0, r6
 800904c:	0039      	movs	r1, r7
 800904e:	f7f9 fba5 	bl	800279c <__aeabi_dsub>
 8009052:	9a04      	ldr	r2, [sp, #16]
 8009054:	9b05      	ldr	r3, [sp, #20]
 8009056:	f7f9 f8d9 	bl	800220c <__aeabi_dmul>
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	0004      	movs	r4, r0
 800905e:	000d      	movs	r5, r1
 8009060:	2b00      	cmp	r3, #0
 8009062:	d102      	bne.n	800906a <__ieee754_log+0x2c2>
 8009064:	0002      	movs	r2, r0
 8009066:	000b      	movs	r3, r1
 8009068:	e72c      	b.n	8008ec4 <__ieee754_log+0x11c>
 800906a:	4a11      	ldr	r2, [pc, #68]	@ (80090b0 <__ieee754_log+0x308>)
 800906c:	4b11      	ldr	r3, [pc, #68]	@ (80090b4 <__ieee754_log+0x30c>)
 800906e:	9806      	ldr	r0, [sp, #24]
 8009070:	9907      	ldr	r1, [sp, #28]
 8009072:	f7f9 f8cb 	bl	800220c <__aeabi_dmul>
 8009076:	4a10      	ldr	r2, [pc, #64]	@ (80090b8 <__ieee754_log+0x310>)
 8009078:	9000      	str	r0, [sp, #0]
 800907a:	9101      	str	r1, [sp, #4]
 800907c:	9806      	ldr	r0, [sp, #24]
 800907e:	9907      	ldr	r1, [sp, #28]
 8009080:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <__ieee754_log+0x314>)
 8009082:	f7f9 f8c3 	bl	800220c <__aeabi_dmul>
 8009086:	0002      	movs	r2, r0
 8009088:	000b      	movs	r3, r1
 800908a:	0020      	movs	r0, r4
 800908c:	0029      	movs	r1, r5
 800908e:	e733      	b.n	8008ef8 <__ieee754_log+0x150>
 8009090:	2000      	movs	r0, #0
 8009092:	2100      	movs	r1, #0
 8009094:	e699      	b.n	8008dca <__ieee754_log+0x22>
 8009096:	46c0      	nop			@ (mov r8, r8)
 8009098:	c3500000 	.word	0xc3500000
 800909c:	43500000 	.word	0x43500000
 80090a0:	7fefffff 	.word	0x7fefffff
 80090a4:	fffffc01 	.word	0xfffffc01
 80090a8:	00095f64 	.word	0x00095f64
 80090ac:	3ff00000 	.word	0x3ff00000
 80090b0:	fee00000 	.word	0xfee00000
 80090b4:	3fe62e42 	.word	0x3fe62e42
 80090b8:	35793c76 	.word	0x35793c76
 80090bc:	3dea39ef 	.word	0x3dea39ef
 80090c0:	55555555 	.word	0x55555555
 80090c4:	3fd55555 	.word	0x3fd55555
 80090c8:	3fe00000 	.word	0x3fe00000
 80090cc:	fff9eb86 	.word	0xfff9eb86
 80090d0:	df3e5244 	.word	0xdf3e5244
 80090d4:	3fc2f112 	.word	0x3fc2f112
 80090d8:	96cb03de 	.word	0x96cb03de
 80090dc:	3fc74664 	.word	0x3fc74664
 80090e0:	94229359 	.word	0x94229359
 80090e4:	3fd24924 	.word	0x3fd24924
 80090e8:	55555593 	.word	0x55555593
 80090ec:	3fe55555 	.word	0x3fe55555
 80090f0:	d078c69f 	.word	0xd078c69f
 80090f4:	3fc39a09 	.word	0x3fc39a09
 80090f8:	1d8e78af 	.word	0x1d8e78af
 80090fc:	3fcc71c5 	.word	0x3fcc71c5
 8009100:	9997fa04 	.word	0x9997fa04
 8009104:	3fd99999 	.word	0x3fd99999
 8009108:	0006b851 	.word	0x0006b851

0800910c <malloc>:
 800910c:	b510      	push	{r4, lr}
 800910e:	4b03      	ldr	r3, [pc, #12]	@ (800911c <malloc+0x10>)
 8009110:	0001      	movs	r1, r0
 8009112:	6818      	ldr	r0, [r3, #0]
 8009114:	f000 f826 	bl	8009164 <_malloc_r>
 8009118:	bd10      	pop	{r4, pc}
 800911a:	46c0      	nop			@ (mov r8, r8)
 800911c:	2000002c 	.word	0x2000002c

08009120 <sbrk_aligned>:
 8009120:	b570      	push	{r4, r5, r6, lr}
 8009122:	4e0f      	ldr	r6, [pc, #60]	@ (8009160 <sbrk_aligned+0x40>)
 8009124:	000d      	movs	r5, r1
 8009126:	6831      	ldr	r1, [r6, #0]
 8009128:	0004      	movs	r4, r0
 800912a:	2900      	cmp	r1, #0
 800912c:	d102      	bne.n	8009134 <sbrk_aligned+0x14>
 800912e:	f000 fb9b 	bl	8009868 <_sbrk_r>
 8009132:	6030      	str	r0, [r6, #0]
 8009134:	0029      	movs	r1, r5
 8009136:	0020      	movs	r0, r4
 8009138:	f000 fb96 	bl	8009868 <_sbrk_r>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d103      	bne.n	8009148 <sbrk_aligned+0x28>
 8009140:	2501      	movs	r5, #1
 8009142:	426d      	negs	r5, r5
 8009144:	0028      	movs	r0, r5
 8009146:	bd70      	pop	{r4, r5, r6, pc}
 8009148:	2303      	movs	r3, #3
 800914a:	1cc5      	adds	r5, r0, #3
 800914c:	439d      	bics	r5, r3
 800914e:	42a8      	cmp	r0, r5
 8009150:	d0f8      	beq.n	8009144 <sbrk_aligned+0x24>
 8009152:	1a29      	subs	r1, r5, r0
 8009154:	0020      	movs	r0, r4
 8009156:	f000 fb87 	bl	8009868 <_sbrk_r>
 800915a:	3001      	adds	r0, #1
 800915c:	d1f2      	bne.n	8009144 <sbrk_aligned+0x24>
 800915e:	e7ef      	b.n	8009140 <sbrk_aligned+0x20>
 8009160:	20000230 	.word	0x20000230

08009164 <_malloc_r>:
 8009164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009166:	2203      	movs	r2, #3
 8009168:	1ccb      	adds	r3, r1, #3
 800916a:	4393      	bics	r3, r2
 800916c:	3308      	adds	r3, #8
 800916e:	0005      	movs	r5, r0
 8009170:	001f      	movs	r7, r3
 8009172:	2b0c      	cmp	r3, #12
 8009174:	d234      	bcs.n	80091e0 <_malloc_r+0x7c>
 8009176:	270c      	movs	r7, #12
 8009178:	42b9      	cmp	r1, r7
 800917a:	d833      	bhi.n	80091e4 <_malloc_r+0x80>
 800917c:	0028      	movs	r0, r5
 800917e:	f000 f871 	bl	8009264 <__malloc_lock>
 8009182:	4e37      	ldr	r6, [pc, #220]	@ (8009260 <_malloc_r+0xfc>)
 8009184:	6833      	ldr	r3, [r6, #0]
 8009186:	001c      	movs	r4, r3
 8009188:	2c00      	cmp	r4, #0
 800918a:	d12f      	bne.n	80091ec <_malloc_r+0x88>
 800918c:	0039      	movs	r1, r7
 800918e:	0028      	movs	r0, r5
 8009190:	f7ff ffc6 	bl	8009120 <sbrk_aligned>
 8009194:	0004      	movs	r4, r0
 8009196:	1c43      	adds	r3, r0, #1
 8009198:	d15f      	bne.n	800925a <_malloc_r+0xf6>
 800919a:	6834      	ldr	r4, [r6, #0]
 800919c:	9400      	str	r4, [sp, #0]
 800919e:	9b00      	ldr	r3, [sp, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d14a      	bne.n	800923a <_malloc_r+0xd6>
 80091a4:	2c00      	cmp	r4, #0
 80091a6:	d052      	beq.n	800924e <_malloc_r+0xea>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	0028      	movs	r0, r5
 80091ac:	18e3      	adds	r3, r4, r3
 80091ae:	9900      	ldr	r1, [sp, #0]
 80091b0:	9301      	str	r3, [sp, #4]
 80091b2:	f000 fb59 	bl	8009868 <_sbrk_r>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	4283      	cmp	r3, r0
 80091ba:	d148      	bne.n	800924e <_malloc_r+0xea>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	0028      	movs	r0, r5
 80091c0:	1aff      	subs	r7, r7, r3
 80091c2:	0039      	movs	r1, r7
 80091c4:	f7ff ffac 	bl	8009120 <sbrk_aligned>
 80091c8:	3001      	adds	r0, #1
 80091ca:	d040      	beq.n	800924e <_malloc_r+0xea>
 80091cc:	6823      	ldr	r3, [r4, #0]
 80091ce:	19db      	adds	r3, r3, r7
 80091d0:	6023      	str	r3, [r4, #0]
 80091d2:	6833      	ldr	r3, [r6, #0]
 80091d4:	685a      	ldr	r2, [r3, #4]
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	d133      	bne.n	8009242 <_malloc_r+0xde>
 80091da:	9b00      	ldr	r3, [sp, #0]
 80091dc:	6033      	str	r3, [r6, #0]
 80091de:	e019      	b.n	8009214 <_malloc_r+0xb0>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dac9      	bge.n	8009178 <_malloc_r+0x14>
 80091e4:	230c      	movs	r3, #12
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	2000      	movs	r0, #0
 80091ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091ec:	6821      	ldr	r1, [r4, #0]
 80091ee:	1bc9      	subs	r1, r1, r7
 80091f0:	d420      	bmi.n	8009234 <_malloc_r+0xd0>
 80091f2:	290b      	cmp	r1, #11
 80091f4:	d90a      	bls.n	800920c <_malloc_r+0xa8>
 80091f6:	19e2      	adds	r2, r4, r7
 80091f8:	6027      	str	r7, [r4, #0]
 80091fa:	42a3      	cmp	r3, r4
 80091fc:	d104      	bne.n	8009208 <_malloc_r+0xa4>
 80091fe:	6032      	str	r2, [r6, #0]
 8009200:	6863      	ldr	r3, [r4, #4]
 8009202:	6011      	str	r1, [r2, #0]
 8009204:	6053      	str	r3, [r2, #4]
 8009206:	e005      	b.n	8009214 <_malloc_r+0xb0>
 8009208:	605a      	str	r2, [r3, #4]
 800920a:	e7f9      	b.n	8009200 <_malloc_r+0x9c>
 800920c:	6862      	ldr	r2, [r4, #4]
 800920e:	42a3      	cmp	r3, r4
 8009210:	d10e      	bne.n	8009230 <_malloc_r+0xcc>
 8009212:	6032      	str	r2, [r6, #0]
 8009214:	0028      	movs	r0, r5
 8009216:	f000 f82d 	bl	8009274 <__malloc_unlock>
 800921a:	0020      	movs	r0, r4
 800921c:	2207      	movs	r2, #7
 800921e:	300b      	adds	r0, #11
 8009220:	1d23      	adds	r3, r4, #4
 8009222:	4390      	bics	r0, r2
 8009224:	1ac2      	subs	r2, r0, r3
 8009226:	4298      	cmp	r0, r3
 8009228:	d0df      	beq.n	80091ea <_malloc_r+0x86>
 800922a:	1a1b      	subs	r3, r3, r0
 800922c:	50a3      	str	r3, [r4, r2]
 800922e:	e7dc      	b.n	80091ea <_malloc_r+0x86>
 8009230:	605a      	str	r2, [r3, #4]
 8009232:	e7ef      	b.n	8009214 <_malloc_r+0xb0>
 8009234:	0023      	movs	r3, r4
 8009236:	6864      	ldr	r4, [r4, #4]
 8009238:	e7a6      	b.n	8009188 <_malloc_r+0x24>
 800923a:	9c00      	ldr	r4, [sp, #0]
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	e7ad      	b.n	800919e <_malloc_r+0x3a>
 8009242:	001a      	movs	r2, r3
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	42a3      	cmp	r3, r4
 8009248:	d1fb      	bne.n	8009242 <_malloc_r+0xde>
 800924a:	2300      	movs	r3, #0
 800924c:	e7da      	b.n	8009204 <_malloc_r+0xa0>
 800924e:	230c      	movs	r3, #12
 8009250:	0028      	movs	r0, r5
 8009252:	602b      	str	r3, [r5, #0]
 8009254:	f000 f80e 	bl	8009274 <__malloc_unlock>
 8009258:	e7c6      	b.n	80091e8 <_malloc_r+0x84>
 800925a:	6007      	str	r7, [r0, #0]
 800925c:	e7da      	b.n	8009214 <_malloc_r+0xb0>
 800925e:	46c0      	nop			@ (mov r8, r8)
 8009260:	20000234 	.word	0x20000234

08009264 <__malloc_lock>:
 8009264:	b510      	push	{r4, lr}
 8009266:	4802      	ldr	r0, [pc, #8]	@ (8009270 <__malloc_lock+0xc>)
 8009268:	f000 fb4f 	bl	800990a <__retarget_lock_acquire_recursive>
 800926c:	bd10      	pop	{r4, pc}
 800926e:	46c0      	nop			@ (mov r8, r8)
 8009270:	20000378 	.word	0x20000378

08009274 <__malloc_unlock>:
 8009274:	b510      	push	{r4, lr}
 8009276:	4802      	ldr	r0, [pc, #8]	@ (8009280 <__malloc_unlock+0xc>)
 8009278:	f000 fb48 	bl	800990c <__retarget_lock_release_recursive>
 800927c:	bd10      	pop	{r4, pc}
 800927e:	46c0      	nop			@ (mov r8, r8)
 8009280:	20000378 	.word	0x20000378

08009284 <rand>:
 8009284:	4b16      	ldr	r3, [pc, #88]	@ (80092e0 <rand+0x5c>)
 8009286:	b510      	push	{r4, lr}
 8009288:	681c      	ldr	r4, [r3, #0]
 800928a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800928c:	2b00      	cmp	r3, #0
 800928e:	d116      	bne.n	80092be <rand+0x3a>
 8009290:	2018      	movs	r0, #24
 8009292:	f7ff ff3b 	bl	800910c <malloc>
 8009296:	1e02      	subs	r2, r0, #0
 8009298:	6320      	str	r0, [r4, #48]	@ 0x30
 800929a:	d104      	bne.n	80092a6 <rand+0x22>
 800929c:	2152      	movs	r1, #82	@ 0x52
 800929e:	4b11      	ldr	r3, [pc, #68]	@ (80092e4 <rand+0x60>)
 80092a0:	4811      	ldr	r0, [pc, #68]	@ (80092e8 <rand+0x64>)
 80092a2:	f000 fb3d 	bl	8009920 <__assert_func>
 80092a6:	4b11      	ldr	r3, [pc, #68]	@ (80092ec <rand+0x68>)
 80092a8:	2100      	movs	r1, #0
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	4b10      	ldr	r3, [pc, #64]	@ (80092f0 <rand+0x6c>)
 80092ae:	6043      	str	r3, [r0, #4]
 80092b0:	4b10      	ldr	r3, [pc, #64]	@ (80092f4 <rand+0x70>)
 80092b2:	6083      	str	r3, [r0, #8]
 80092b4:	230b      	movs	r3, #11
 80092b6:	8183      	strh	r3, [r0, #12]
 80092b8:	2001      	movs	r0, #1
 80092ba:	6110      	str	r0, [r2, #16]
 80092bc:	6151      	str	r1, [r2, #20]
 80092be:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 80092c0:	4a0d      	ldr	r2, [pc, #52]	@ (80092f8 <rand+0x74>)
 80092c2:	6920      	ldr	r0, [r4, #16]
 80092c4:	6961      	ldr	r1, [r4, #20]
 80092c6:	4b0d      	ldr	r3, [pc, #52]	@ (80092fc <rand+0x78>)
 80092c8:	f7f7 f916 	bl	80004f8 <__aeabi_lmul>
 80092cc:	2201      	movs	r2, #1
 80092ce:	2300      	movs	r3, #0
 80092d0:	1880      	adds	r0, r0, r2
 80092d2:	4159      	adcs	r1, r3
 80092d4:	6120      	str	r0, [r4, #16]
 80092d6:	6161      	str	r1, [r4, #20]
 80092d8:	0048      	lsls	r0, r1, #1
 80092da:	0840      	lsrs	r0, r0, #1
 80092dc:	bd10      	pop	{r4, pc}
 80092de:	46c0      	nop			@ (mov r8, r8)
 80092e0:	2000002c 	.word	0x2000002c
 80092e4:	0800a4d8 	.word	0x0800a4d8
 80092e8:	0800a4ef 	.word	0x0800a4ef
 80092ec:	abcd330e 	.word	0xabcd330e
 80092f0:	e66d1234 	.word	0xe66d1234
 80092f4:	0005deec 	.word	0x0005deec
 80092f8:	4c957f2d 	.word	0x4c957f2d
 80092fc:	5851f42d 	.word	0x5851f42d

08009300 <__sflush_r>:
 8009300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009302:	220c      	movs	r2, #12
 8009304:	5e8b      	ldrsh	r3, [r1, r2]
 8009306:	0005      	movs	r5, r0
 8009308:	000c      	movs	r4, r1
 800930a:	071a      	lsls	r2, r3, #28
 800930c:	d456      	bmi.n	80093bc <__sflush_r+0xbc>
 800930e:	684a      	ldr	r2, [r1, #4]
 8009310:	2a00      	cmp	r2, #0
 8009312:	dc02      	bgt.n	800931a <__sflush_r+0x1a>
 8009314:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8009316:	2a00      	cmp	r2, #0
 8009318:	dd4e      	ble.n	80093b8 <__sflush_r+0xb8>
 800931a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800931c:	2f00      	cmp	r7, #0
 800931e:	d04b      	beq.n	80093b8 <__sflush_r+0xb8>
 8009320:	2200      	movs	r2, #0
 8009322:	2080      	movs	r0, #128	@ 0x80
 8009324:	682e      	ldr	r6, [r5, #0]
 8009326:	602a      	str	r2, [r5, #0]
 8009328:	001a      	movs	r2, r3
 800932a:	0140      	lsls	r0, r0, #5
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	4002      	ands	r2, r0
 8009330:	4203      	tst	r3, r0
 8009332:	d033      	beq.n	800939c <__sflush_r+0x9c>
 8009334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	075b      	lsls	r3, r3, #29
 800933a:	d506      	bpl.n	800934a <__sflush_r+0x4a>
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	1ad2      	subs	r2, r2, r3
 8009340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009342:	2b00      	cmp	r3, #0
 8009344:	d001      	beq.n	800934a <__sflush_r+0x4a>
 8009346:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009348:	1ad2      	subs	r2, r2, r3
 800934a:	2300      	movs	r3, #0
 800934c:	0028      	movs	r0, r5
 800934e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009350:	6a21      	ldr	r1, [r4, #32]
 8009352:	47b8      	blx	r7
 8009354:	89a2      	ldrh	r2, [r4, #12]
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d106      	bne.n	8009368 <__sflush_r+0x68>
 800935a:	6829      	ldr	r1, [r5, #0]
 800935c:	291d      	cmp	r1, #29
 800935e:	d846      	bhi.n	80093ee <__sflush_r+0xee>
 8009360:	4b29      	ldr	r3, [pc, #164]	@ (8009408 <__sflush_r+0x108>)
 8009362:	410b      	asrs	r3, r1
 8009364:	07db      	lsls	r3, r3, #31
 8009366:	d442      	bmi.n	80093ee <__sflush_r+0xee>
 8009368:	2300      	movs	r3, #0
 800936a:	6063      	str	r3, [r4, #4]
 800936c:	6923      	ldr	r3, [r4, #16]
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	04d2      	lsls	r2, r2, #19
 8009372:	d505      	bpl.n	8009380 <__sflush_r+0x80>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <__sflush_r+0x7e>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d100      	bne.n	8009380 <__sflush_r+0x80>
 800937e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009380:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009382:	602e      	str	r6, [r5, #0]
 8009384:	2900      	cmp	r1, #0
 8009386:	d017      	beq.n	80093b8 <__sflush_r+0xb8>
 8009388:	0023      	movs	r3, r4
 800938a:	3344      	adds	r3, #68	@ 0x44
 800938c:	4299      	cmp	r1, r3
 800938e:	d002      	beq.n	8009396 <__sflush_r+0x96>
 8009390:	0028      	movs	r0, r5
 8009392:	f000 fae3 	bl	800995c <_free_r>
 8009396:	2300      	movs	r3, #0
 8009398:	6363      	str	r3, [r4, #52]	@ 0x34
 800939a:	e00d      	b.n	80093b8 <__sflush_r+0xb8>
 800939c:	2301      	movs	r3, #1
 800939e:	0028      	movs	r0, r5
 80093a0:	47b8      	blx	r7
 80093a2:	0002      	movs	r2, r0
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d1c6      	bne.n	8009336 <__sflush_r+0x36>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d0c3      	beq.n	8009336 <__sflush_r+0x36>
 80093ae:	2b1d      	cmp	r3, #29
 80093b0:	d001      	beq.n	80093b6 <__sflush_r+0xb6>
 80093b2:	2b16      	cmp	r3, #22
 80093b4:	d11a      	bne.n	80093ec <__sflush_r+0xec>
 80093b6:	602e      	str	r6, [r5, #0]
 80093b8:	2000      	movs	r0, #0
 80093ba:	e01e      	b.n	80093fa <__sflush_r+0xfa>
 80093bc:	690e      	ldr	r6, [r1, #16]
 80093be:	2e00      	cmp	r6, #0
 80093c0:	d0fa      	beq.n	80093b8 <__sflush_r+0xb8>
 80093c2:	680f      	ldr	r7, [r1, #0]
 80093c4:	600e      	str	r6, [r1, #0]
 80093c6:	1bba      	subs	r2, r7, r6
 80093c8:	9201      	str	r2, [sp, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	079b      	lsls	r3, r3, #30
 80093ce:	d100      	bne.n	80093d2 <__sflush_r+0xd2>
 80093d0:	694a      	ldr	r2, [r1, #20]
 80093d2:	60a2      	str	r2, [r4, #8]
 80093d4:	9b01      	ldr	r3, [sp, #4]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	ddee      	ble.n	80093b8 <__sflush_r+0xb8>
 80093da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80093dc:	0032      	movs	r2, r6
 80093de:	001f      	movs	r7, r3
 80093e0:	0028      	movs	r0, r5
 80093e2:	9b01      	ldr	r3, [sp, #4]
 80093e4:	6a21      	ldr	r1, [r4, #32]
 80093e6:	47b8      	blx	r7
 80093e8:	2800      	cmp	r0, #0
 80093ea:	dc07      	bgt.n	80093fc <__sflush_r+0xfc>
 80093ec:	89a2      	ldrh	r2, [r4, #12]
 80093ee:	2340      	movs	r3, #64	@ 0x40
 80093f0:	2001      	movs	r0, #1
 80093f2:	4313      	orrs	r3, r2
 80093f4:	b21b      	sxth	r3, r3
 80093f6:	81a3      	strh	r3, [r4, #12]
 80093f8:	4240      	negs	r0, r0
 80093fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	1836      	adds	r6, r6, r0
 8009400:	1a1b      	subs	r3, r3, r0
 8009402:	9301      	str	r3, [sp, #4]
 8009404:	e7e6      	b.n	80093d4 <__sflush_r+0xd4>
 8009406:	46c0      	nop			@ (mov r8, r8)
 8009408:	dfbffffe 	.word	0xdfbffffe

0800940c <_fflush_r>:
 800940c:	690b      	ldr	r3, [r1, #16]
 800940e:	b570      	push	{r4, r5, r6, lr}
 8009410:	0005      	movs	r5, r0
 8009412:	000c      	movs	r4, r1
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <_fflush_r+0x12>
 8009418:	2500      	movs	r5, #0
 800941a:	0028      	movs	r0, r5
 800941c:	bd70      	pop	{r4, r5, r6, pc}
 800941e:	2800      	cmp	r0, #0
 8009420:	d004      	beq.n	800942c <_fflush_r+0x20>
 8009422:	6a03      	ldr	r3, [r0, #32]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d101      	bne.n	800942c <_fflush_r+0x20>
 8009428:	f000 f8ac 	bl	8009584 <__sinit>
 800942c:	220c      	movs	r2, #12
 800942e:	5ea3      	ldrsh	r3, [r4, r2]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0f1      	beq.n	8009418 <_fflush_r+0xc>
 8009434:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009436:	07d2      	lsls	r2, r2, #31
 8009438:	d404      	bmi.n	8009444 <_fflush_r+0x38>
 800943a:	059b      	lsls	r3, r3, #22
 800943c:	d402      	bmi.n	8009444 <_fflush_r+0x38>
 800943e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009440:	f000 fa63 	bl	800990a <__retarget_lock_acquire_recursive>
 8009444:	0028      	movs	r0, r5
 8009446:	0021      	movs	r1, r4
 8009448:	f7ff ff5a 	bl	8009300 <__sflush_r>
 800944c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800944e:	0005      	movs	r5, r0
 8009450:	07db      	lsls	r3, r3, #31
 8009452:	d4e2      	bmi.n	800941a <_fflush_r+0xe>
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	059b      	lsls	r3, r3, #22
 8009458:	d4df      	bmi.n	800941a <_fflush_r+0xe>
 800945a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800945c:	f000 fa56 	bl	800990c <__retarget_lock_release_recursive>
 8009460:	e7db      	b.n	800941a <_fflush_r+0xe>
	...

08009464 <std>:
 8009464:	2300      	movs	r3, #0
 8009466:	b510      	push	{r4, lr}
 8009468:	0004      	movs	r4, r0
 800946a:	6003      	str	r3, [r0, #0]
 800946c:	6043      	str	r3, [r0, #4]
 800946e:	6083      	str	r3, [r0, #8]
 8009470:	8181      	strh	r1, [r0, #12]
 8009472:	6643      	str	r3, [r0, #100]	@ 0x64
 8009474:	81c2      	strh	r2, [r0, #14]
 8009476:	6103      	str	r3, [r0, #16]
 8009478:	6143      	str	r3, [r0, #20]
 800947a:	6183      	str	r3, [r0, #24]
 800947c:	0019      	movs	r1, r3
 800947e:	2208      	movs	r2, #8
 8009480:	305c      	adds	r0, #92	@ 0x5c
 8009482:	f000 f9af 	bl	80097e4 <memset>
 8009486:	4b0b      	ldr	r3, [pc, #44]	@ (80094b4 <std+0x50>)
 8009488:	6224      	str	r4, [r4, #32]
 800948a:	6263      	str	r3, [r4, #36]	@ 0x24
 800948c:	4b0a      	ldr	r3, [pc, #40]	@ (80094b8 <std+0x54>)
 800948e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009490:	4b0a      	ldr	r3, [pc, #40]	@ (80094bc <std+0x58>)
 8009492:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009494:	4b0a      	ldr	r3, [pc, #40]	@ (80094c0 <std+0x5c>)
 8009496:	6323      	str	r3, [r4, #48]	@ 0x30
 8009498:	4b0a      	ldr	r3, [pc, #40]	@ (80094c4 <std+0x60>)
 800949a:	429c      	cmp	r4, r3
 800949c:	d005      	beq.n	80094aa <std+0x46>
 800949e:	4b0a      	ldr	r3, [pc, #40]	@ (80094c8 <std+0x64>)
 80094a0:	429c      	cmp	r4, r3
 80094a2:	d002      	beq.n	80094aa <std+0x46>
 80094a4:	4b09      	ldr	r3, [pc, #36]	@ (80094cc <std+0x68>)
 80094a6:	429c      	cmp	r4, r3
 80094a8:	d103      	bne.n	80094b2 <std+0x4e>
 80094aa:	0020      	movs	r0, r4
 80094ac:	3058      	adds	r0, #88	@ 0x58
 80094ae:	f000 fa2b 	bl	8009908 <__retarget_lock_init_recursive>
 80094b2:	bd10      	pop	{r4, pc}
 80094b4:	0800960d 	.word	0x0800960d
 80094b8:	08009635 	.word	0x08009635
 80094bc:	0800966d 	.word	0x0800966d
 80094c0:	08009699 	.word	0x08009699
 80094c4:	20000238 	.word	0x20000238
 80094c8:	200002a0 	.word	0x200002a0
 80094cc:	20000308 	.word	0x20000308

080094d0 <stdio_exit_handler>:
 80094d0:	b510      	push	{r4, lr}
 80094d2:	4a03      	ldr	r2, [pc, #12]	@ (80094e0 <stdio_exit_handler+0x10>)
 80094d4:	4903      	ldr	r1, [pc, #12]	@ (80094e4 <stdio_exit_handler+0x14>)
 80094d6:	4804      	ldr	r0, [pc, #16]	@ (80094e8 <stdio_exit_handler+0x18>)
 80094d8:	f000 f87c 	bl	80095d4 <_fwalk_sglue>
 80094dc:	bd10      	pop	{r4, pc}
 80094de:	46c0      	nop			@ (mov r8, r8)
 80094e0:	20000020 	.word	0x20000020
 80094e4:	0800940d 	.word	0x0800940d
 80094e8:	20000030 	.word	0x20000030

080094ec <cleanup_stdio>:
 80094ec:	6841      	ldr	r1, [r0, #4]
 80094ee:	4b0b      	ldr	r3, [pc, #44]	@ (800951c <cleanup_stdio+0x30>)
 80094f0:	b510      	push	{r4, lr}
 80094f2:	0004      	movs	r4, r0
 80094f4:	4299      	cmp	r1, r3
 80094f6:	d001      	beq.n	80094fc <cleanup_stdio+0x10>
 80094f8:	f7ff ff88 	bl	800940c <_fflush_r>
 80094fc:	68a1      	ldr	r1, [r4, #8]
 80094fe:	4b08      	ldr	r3, [pc, #32]	@ (8009520 <cleanup_stdio+0x34>)
 8009500:	4299      	cmp	r1, r3
 8009502:	d002      	beq.n	800950a <cleanup_stdio+0x1e>
 8009504:	0020      	movs	r0, r4
 8009506:	f7ff ff81 	bl	800940c <_fflush_r>
 800950a:	68e1      	ldr	r1, [r4, #12]
 800950c:	4b05      	ldr	r3, [pc, #20]	@ (8009524 <cleanup_stdio+0x38>)
 800950e:	4299      	cmp	r1, r3
 8009510:	d002      	beq.n	8009518 <cleanup_stdio+0x2c>
 8009512:	0020      	movs	r0, r4
 8009514:	f7ff ff7a 	bl	800940c <_fflush_r>
 8009518:	bd10      	pop	{r4, pc}
 800951a:	46c0      	nop			@ (mov r8, r8)
 800951c:	20000238 	.word	0x20000238
 8009520:	200002a0 	.word	0x200002a0
 8009524:	20000308 	.word	0x20000308

08009528 <global_stdio_init.part.0>:
 8009528:	b510      	push	{r4, lr}
 800952a:	4b09      	ldr	r3, [pc, #36]	@ (8009550 <global_stdio_init.part.0+0x28>)
 800952c:	4a09      	ldr	r2, [pc, #36]	@ (8009554 <global_stdio_init.part.0+0x2c>)
 800952e:	2104      	movs	r1, #4
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	4809      	ldr	r0, [pc, #36]	@ (8009558 <global_stdio_init.part.0+0x30>)
 8009534:	2200      	movs	r2, #0
 8009536:	f7ff ff95 	bl	8009464 <std>
 800953a:	2201      	movs	r2, #1
 800953c:	2109      	movs	r1, #9
 800953e:	4807      	ldr	r0, [pc, #28]	@ (800955c <global_stdio_init.part.0+0x34>)
 8009540:	f7ff ff90 	bl	8009464 <std>
 8009544:	2202      	movs	r2, #2
 8009546:	2112      	movs	r1, #18
 8009548:	4805      	ldr	r0, [pc, #20]	@ (8009560 <global_stdio_init.part.0+0x38>)
 800954a:	f7ff ff8b 	bl	8009464 <std>
 800954e:	bd10      	pop	{r4, pc}
 8009550:	20000370 	.word	0x20000370
 8009554:	080094d1 	.word	0x080094d1
 8009558:	20000238 	.word	0x20000238
 800955c:	200002a0 	.word	0x200002a0
 8009560:	20000308 	.word	0x20000308

08009564 <__sfp_lock_acquire>:
 8009564:	b510      	push	{r4, lr}
 8009566:	4802      	ldr	r0, [pc, #8]	@ (8009570 <__sfp_lock_acquire+0xc>)
 8009568:	f000 f9cf 	bl	800990a <__retarget_lock_acquire_recursive>
 800956c:	bd10      	pop	{r4, pc}
 800956e:	46c0      	nop			@ (mov r8, r8)
 8009570:	20000379 	.word	0x20000379

08009574 <__sfp_lock_release>:
 8009574:	b510      	push	{r4, lr}
 8009576:	4802      	ldr	r0, [pc, #8]	@ (8009580 <__sfp_lock_release+0xc>)
 8009578:	f000 f9c8 	bl	800990c <__retarget_lock_release_recursive>
 800957c:	bd10      	pop	{r4, pc}
 800957e:	46c0      	nop			@ (mov r8, r8)
 8009580:	20000379 	.word	0x20000379

08009584 <__sinit>:
 8009584:	b510      	push	{r4, lr}
 8009586:	0004      	movs	r4, r0
 8009588:	f7ff ffec 	bl	8009564 <__sfp_lock_acquire>
 800958c:	6a23      	ldr	r3, [r4, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d002      	beq.n	8009598 <__sinit+0x14>
 8009592:	f7ff ffef 	bl	8009574 <__sfp_lock_release>
 8009596:	bd10      	pop	{r4, pc}
 8009598:	4b04      	ldr	r3, [pc, #16]	@ (80095ac <__sinit+0x28>)
 800959a:	6223      	str	r3, [r4, #32]
 800959c:	4b04      	ldr	r3, [pc, #16]	@ (80095b0 <__sinit+0x2c>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1f6      	bne.n	8009592 <__sinit+0xe>
 80095a4:	f7ff ffc0 	bl	8009528 <global_stdio_init.part.0>
 80095a8:	e7f3      	b.n	8009592 <__sinit+0xe>
 80095aa:	46c0      	nop			@ (mov r8, r8)
 80095ac:	080094ed 	.word	0x080094ed
 80095b0:	20000370 	.word	0x20000370

080095b4 <fiprintf>:
 80095b4:	b40e      	push	{r1, r2, r3}
 80095b6:	b517      	push	{r0, r1, r2, r4, lr}
 80095b8:	4c05      	ldr	r4, [pc, #20]	@ (80095d0 <fiprintf+0x1c>)
 80095ba:	ab05      	add	r3, sp, #20
 80095bc:	cb04      	ldmia	r3!, {r2}
 80095be:	0001      	movs	r1, r0
 80095c0:	6820      	ldr	r0, [r4, #0]
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	f000 fa3c 	bl	8009a40 <_vfiprintf_r>
 80095c8:	bc1e      	pop	{r1, r2, r3, r4}
 80095ca:	bc08      	pop	{r3}
 80095cc:	b003      	add	sp, #12
 80095ce:	4718      	bx	r3
 80095d0:	2000002c 	.word	0x2000002c

080095d4 <_fwalk_sglue>:
 80095d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095d6:	0014      	movs	r4, r2
 80095d8:	2600      	movs	r6, #0
 80095da:	9000      	str	r0, [sp, #0]
 80095dc:	9101      	str	r1, [sp, #4]
 80095de:	68a5      	ldr	r5, [r4, #8]
 80095e0:	6867      	ldr	r7, [r4, #4]
 80095e2:	3f01      	subs	r7, #1
 80095e4:	d504      	bpl.n	80095f0 <_fwalk_sglue+0x1c>
 80095e6:	6824      	ldr	r4, [r4, #0]
 80095e8:	2c00      	cmp	r4, #0
 80095ea:	d1f8      	bne.n	80095de <_fwalk_sglue+0xa>
 80095ec:	0030      	movs	r0, r6
 80095ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80095f0:	89ab      	ldrh	r3, [r5, #12]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d908      	bls.n	8009608 <_fwalk_sglue+0x34>
 80095f6:	220e      	movs	r2, #14
 80095f8:	5eab      	ldrsh	r3, [r5, r2]
 80095fa:	3301      	adds	r3, #1
 80095fc:	d004      	beq.n	8009608 <_fwalk_sglue+0x34>
 80095fe:	0029      	movs	r1, r5
 8009600:	9800      	ldr	r0, [sp, #0]
 8009602:	9b01      	ldr	r3, [sp, #4]
 8009604:	4798      	blx	r3
 8009606:	4306      	orrs	r6, r0
 8009608:	3568      	adds	r5, #104	@ 0x68
 800960a:	e7ea      	b.n	80095e2 <_fwalk_sglue+0xe>

0800960c <__sread>:
 800960c:	b570      	push	{r4, r5, r6, lr}
 800960e:	000c      	movs	r4, r1
 8009610:	250e      	movs	r5, #14
 8009612:	5f49      	ldrsh	r1, [r1, r5]
 8009614:	f000 f914 	bl	8009840 <_read_r>
 8009618:	2800      	cmp	r0, #0
 800961a:	db03      	blt.n	8009624 <__sread+0x18>
 800961c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800961e:	181b      	adds	r3, r3, r0
 8009620:	6563      	str	r3, [r4, #84]	@ 0x54
 8009622:	bd70      	pop	{r4, r5, r6, pc}
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	4a02      	ldr	r2, [pc, #8]	@ (8009630 <__sread+0x24>)
 8009628:	4013      	ands	r3, r2
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	e7f9      	b.n	8009622 <__sread+0x16>
 800962e:	46c0      	nop			@ (mov r8, r8)
 8009630:	ffffefff 	.word	0xffffefff

08009634 <__swrite>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	001f      	movs	r7, r3
 8009638:	898b      	ldrh	r3, [r1, #12]
 800963a:	0005      	movs	r5, r0
 800963c:	000c      	movs	r4, r1
 800963e:	0016      	movs	r6, r2
 8009640:	05db      	lsls	r3, r3, #23
 8009642:	d505      	bpl.n	8009650 <__swrite+0x1c>
 8009644:	230e      	movs	r3, #14
 8009646:	5ec9      	ldrsh	r1, [r1, r3]
 8009648:	2200      	movs	r2, #0
 800964a:	2302      	movs	r3, #2
 800964c:	f000 f8e4 	bl	8009818 <_lseek_r>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	4a05      	ldr	r2, [pc, #20]	@ (8009668 <__swrite+0x34>)
 8009654:	0028      	movs	r0, r5
 8009656:	4013      	ands	r3, r2
 8009658:	81a3      	strh	r3, [r4, #12]
 800965a:	0032      	movs	r2, r6
 800965c:	230e      	movs	r3, #14
 800965e:	5ee1      	ldrsh	r1, [r4, r3]
 8009660:	003b      	movs	r3, r7
 8009662:	f000 f913 	bl	800988c <_write_r>
 8009666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009668:	ffffefff 	.word	0xffffefff

0800966c <__sseek>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	000c      	movs	r4, r1
 8009670:	250e      	movs	r5, #14
 8009672:	5f49      	ldrsh	r1, [r1, r5]
 8009674:	f000 f8d0 	bl	8009818 <_lseek_r>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	1c42      	adds	r2, r0, #1
 800967c:	d103      	bne.n	8009686 <__sseek+0x1a>
 800967e:	4a05      	ldr	r2, [pc, #20]	@ (8009694 <__sseek+0x28>)
 8009680:	4013      	ands	r3, r2
 8009682:	81a3      	strh	r3, [r4, #12]
 8009684:	bd70      	pop	{r4, r5, r6, pc}
 8009686:	2280      	movs	r2, #128	@ 0x80
 8009688:	0152      	lsls	r2, r2, #5
 800968a:	4313      	orrs	r3, r2
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009690:	e7f8      	b.n	8009684 <__sseek+0x18>
 8009692:	46c0      	nop			@ (mov r8, r8)
 8009694:	ffffefff 	.word	0xffffefff

08009698 <__sclose>:
 8009698:	b510      	push	{r4, lr}
 800969a:	230e      	movs	r3, #14
 800969c:	5ec9      	ldrsh	r1, [r1, r3]
 800969e:	f000 f8a9 	bl	80097f4 <_close_r>
 80096a2:	bd10      	pop	{r4, pc}

080096a4 <__swbuf_r>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	0006      	movs	r6, r0
 80096a8:	000d      	movs	r5, r1
 80096aa:	0014      	movs	r4, r2
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d004      	beq.n	80096ba <__swbuf_r+0x16>
 80096b0:	6a03      	ldr	r3, [r0, #32]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d101      	bne.n	80096ba <__swbuf_r+0x16>
 80096b6:	f7ff ff65 	bl	8009584 <__sinit>
 80096ba:	69a3      	ldr	r3, [r4, #24]
 80096bc:	60a3      	str	r3, [r4, #8]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	071b      	lsls	r3, r3, #28
 80096c2:	d502      	bpl.n	80096ca <__swbuf_r+0x26>
 80096c4:	6923      	ldr	r3, [r4, #16]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d109      	bne.n	80096de <__swbuf_r+0x3a>
 80096ca:	0021      	movs	r1, r4
 80096cc:	0030      	movs	r0, r6
 80096ce:	f000 f82b 	bl	8009728 <__swsetup_r>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d003      	beq.n	80096de <__swbuf_r+0x3a>
 80096d6:	2501      	movs	r5, #1
 80096d8:	426d      	negs	r5, r5
 80096da:	0028      	movs	r0, r5
 80096dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096de:	6923      	ldr	r3, [r4, #16]
 80096e0:	6820      	ldr	r0, [r4, #0]
 80096e2:	b2ef      	uxtb	r7, r5
 80096e4:	1ac0      	subs	r0, r0, r3
 80096e6:	6963      	ldr	r3, [r4, #20]
 80096e8:	b2ed      	uxtb	r5, r5
 80096ea:	4283      	cmp	r3, r0
 80096ec:	dc05      	bgt.n	80096fa <__swbuf_r+0x56>
 80096ee:	0021      	movs	r1, r4
 80096f0:	0030      	movs	r0, r6
 80096f2:	f7ff fe8b 	bl	800940c <_fflush_r>
 80096f6:	2800      	cmp	r0, #0
 80096f8:	d1ed      	bne.n	80096d6 <__swbuf_r+0x32>
 80096fa:	68a3      	ldr	r3, [r4, #8]
 80096fc:	3001      	adds	r0, #1
 80096fe:	3b01      	subs	r3, #1
 8009700:	60a3      	str	r3, [r4, #8]
 8009702:	6823      	ldr	r3, [r4, #0]
 8009704:	1c5a      	adds	r2, r3, #1
 8009706:	6022      	str	r2, [r4, #0]
 8009708:	701f      	strb	r7, [r3, #0]
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	4283      	cmp	r3, r0
 800970e:	d004      	beq.n	800971a <__swbuf_r+0x76>
 8009710:	89a3      	ldrh	r3, [r4, #12]
 8009712:	07db      	lsls	r3, r3, #31
 8009714:	d5e1      	bpl.n	80096da <__swbuf_r+0x36>
 8009716:	2d0a      	cmp	r5, #10
 8009718:	d1df      	bne.n	80096da <__swbuf_r+0x36>
 800971a:	0021      	movs	r1, r4
 800971c:	0030      	movs	r0, r6
 800971e:	f7ff fe75 	bl	800940c <_fflush_r>
 8009722:	2800      	cmp	r0, #0
 8009724:	d0d9      	beq.n	80096da <__swbuf_r+0x36>
 8009726:	e7d6      	b.n	80096d6 <__swbuf_r+0x32>

08009728 <__swsetup_r>:
 8009728:	4b2d      	ldr	r3, [pc, #180]	@ (80097e0 <__swsetup_r+0xb8>)
 800972a:	b570      	push	{r4, r5, r6, lr}
 800972c:	0005      	movs	r5, r0
 800972e:	6818      	ldr	r0, [r3, #0]
 8009730:	000c      	movs	r4, r1
 8009732:	2800      	cmp	r0, #0
 8009734:	d004      	beq.n	8009740 <__swsetup_r+0x18>
 8009736:	6a03      	ldr	r3, [r0, #32]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d101      	bne.n	8009740 <__swsetup_r+0x18>
 800973c:	f7ff ff22 	bl	8009584 <__sinit>
 8009740:	230c      	movs	r3, #12
 8009742:	5ee2      	ldrsh	r2, [r4, r3]
 8009744:	0713      	lsls	r3, r2, #28
 8009746:	d423      	bmi.n	8009790 <__swsetup_r+0x68>
 8009748:	06d3      	lsls	r3, r2, #27
 800974a:	d407      	bmi.n	800975c <__swsetup_r+0x34>
 800974c:	2309      	movs	r3, #9
 800974e:	602b      	str	r3, [r5, #0]
 8009750:	2340      	movs	r3, #64	@ 0x40
 8009752:	2001      	movs	r0, #1
 8009754:	4313      	orrs	r3, r2
 8009756:	81a3      	strh	r3, [r4, #12]
 8009758:	4240      	negs	r0, r0
 800975a:	e03a      	b.n	80097d2 <__swsetup_r+0xaa>
 800975c:	0752      	lsls	r2, r2, #29
 800975e:	d513      	bpl.n	8009788 <__swsetup_r+0x60>
 8009760:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009762:	2900      	cmp	r1, #0
 8009764:	d008      	beq.n	8009778 <__swsetup_r+0x50>
 8009766:	0023      	movs	r3, r4
 8009768:	3344      	adds	r3, #68	@ 0x44
 800976a:	4299      	cmp	r1, r3
 800976c:	d002      	beq.n	8009774 <__swsetup_r+0x4c>
 800976e:	0028      	movs	r0, r5
 8009770:	f000 f8f4 	bl	800995c <_free_r>
 8009774:	2300      	movs	r3, #0
 8009776:	6363      	str	r3, [r4, #52]	@ 0x34
 8009778:	2224      	movs	r2, #36	@ 0x24
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	4393      	bics	r3, r2
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	2300      	movs	r3, #0
 8009782:	6063      	str	r3, [r4, #4]
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	6023      	str	r3, [r4, #0]
 8009788:	2308      	movs	r3, #8
 800978a:	89a2      	ldrh	r2, [r4, #12]
 800978c:	4313      	orrs	r3, r2
 800978e:	81a3      	strh	r3, [r4, #12]
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d10b      	bne.n	80097ae <__swsetup_r+0x86>
 8009796:	21a0      	movs	r1, #160	@ 0xa0
 8009798:	2280      	movs	r2, #128	@ 0x80
 800979a:	89a3      	ldrh	r3, [r4, #12]
 800979c:	0089      	lsls	r1, r1, #2
 800979e:	0092      	lsls	r2, r2, #2
 80097a0:	400b      	ands	r3, r1
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d003      	beq.n	80097ae <__swsetup_r+0x86>
 80097a6:	0021      	movs	r1, r4
 80097a8:	0028      	movs	r0, r5
 80097aa:	f000 fc0d 	bl	8009fc8 <__smakebuf_r>
 80097ae:	230c      	movs	r3, #12
 80097b0:	5ee2      	ldrsh	r2, [r4, r3]
 80097b2:	2101      	movs	r1, #1
 80097b4:	0013      	movs	r3, r2
 80097b6:	400b      	ands	r3, r1
 80097b8:	420a      	tst	r2, r1
 80097ba:	d00b      	beq.n	80097d4 <__swsetup_r+0xac>
 80097bc:	2300      	movs	r3, #0
 80097be:	60a3      	str	r3, [r4, #8]
 80097c0:	6963      	ldr	r3, [r4, #20]
 80097c2:	425b      	negs	r3, r3
 80097c4:	61a3      	str	r3, [r4, #24]
 80097c6:	2000      	movs	r0, #0
 80097c8:	6923      	ldr	r3, [r4, #16]
 80097ca:	4283      	cmp	r3, r0
 80097cc:	d101      	bne.n	80097d2 <__swsetup_r+0xaa>
 80097ce:	0613      	lsls	r3, r2, #24
 80097d0:	d4be      	bmi.n	8009750 <__swsetup_r+0x28>
 80097d2:	bd70      	pop	{r4, r5, r6, pc}
 80097d4:	0791      	lsls	r1, r2, #30
 80097d6:	d400      	bmi.n	80097da <__swsetup_r+0xb2>
 80097d8:	6963      	ldr	r3, [r4, #20]
 80097da:	60a3      	str	r3, [r4, #8]
 80097dc:	e7f3      	b.n	80097c6 <__swsetup_r+0x9e>
 80097de:	46c0      	nop			@ (mov r8, r8)
 80097e0:	2000002c 	.word	0x2000002c

080097e4 <memset>:
 80097e4:	0003      	movs	r3, r0
 80097e6:	1882      	adds	r2, r0, r2
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d100      	bne.n	80097ee <memset+0xa>
 80097ec:	4770      	bx	lr
 80097ee:	7019      	strb	r1, [r3, #0]
 80097f0:	3301      	adds	r3, #1
 80097f2:	e7f9      	b.n	80097e8 <memset+0x4>

080097f4 <_close_r>:
 80097f4:	2300      	movs	r3, #0
 80097f6:	b570      	push	{r4, r5, r6, lr}
 80097f8:	4d06      	ldr	r5, [pc, #24]	@ (8009814 <_close_r+0x20>)
 80097fa:	0004      	movs	r4, r0
 80097fc:	0008      	movs	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7fb fb3b 	bl	8004e7a <_close>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d103      	bne.n	8009810 <_close_r+0x1c>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d000      	beq.n	8009810 <_close_r+0x1c>
 800980e:	6023      	str	r3, [r4, #0]
 8009810:	bd70      	pop	{r4, r5, r6, pc}
 8009812:	46c0      	nop			@ (mov r8, r8)
 8009814:	20000374 	.word	0x20000374

08009818 <_lseek_r>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	0004      	movs	r4, r0
 800981c:	0008      	movs	r0, r1
 800981e:	0011      	movs	r1, r2
 8009820:	001a      	movs	r2, r3
 8009822:	2300      	movs	r3, #0
 8009824:	4d05      	ldr	r5, [pc, #20]	@ (800983c <_lseek_r+0x24>)
 8009826:	602b      	str	r3, [r5, #0]
 8009828:	f7fb fb48 	bl	8004ebc <_lseek>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d103      	bne.n	8009838 <_lseek_r+0x20>
 8009830:	682b      	ldr	r3, [r5, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d000      	beq.n	8009838 <_lseek_r+0x20>
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	bd70      	pop	{r4, r5, r6, pc}
 800983a:	46c0      	nop			@ (mov r8, r8)
 800983c:	20000374 	.word	0x20000374

08009840 <_read_r>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	0004      	movs	r4, r0
 8009844:	0008      	movs	r0, r1
 8009846:	0011      	movs	r1, r2
 8009848:	001a      	movs	r2, r3
 800984a:	2300      	movs	r3, #0
 800984c:	4d05      	ldr	r5, [pc, #20]	@ (8009864 <_read_r+0x24>)
 800984e:	602b      	str	r3, [r5, #0]
 8009850:	f7fb fada 	bl	8004e08 <_read>
 8009854:	1c43      	adds	r3, r0, #1
 8009856:	d103      	bne.n	8009860 <_read_r+0x20>
 8009858:	682b      	ldr	r3, [r5, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d000      	beq.n	8009860 <_read_r+0x20>
 800985e:	6023      	str	r3, [r4, #0]
 8009860:	bd70      	pop	{r4, r5, r6, pc}
 8009862:	46c0      	nop			@ (mov r8, r8)
 8009864:	20000374 	.word	0x20000374

08009868 <_sbrk_r>:
 8009868:	2300      	movs	r3, #0
 800986a:	b570      	push	{r4, r5, r6, lr}
 800986c:	4d06      	ldr	r5, [pc, #24]	@ (8009888 <_sbrk_r+0x20>)
 800986e:	0004      	movs	r4, r0
 8009870:	0008      	movs	r0, r1
 8009872:	602b      	str	r3, [r5, #0]
 8009874:	f7fb fb2e 	bl	8004ed4 <_sbrk>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	d103      	bne.n	8009884 <_sbrk_r+0x1c>
 800987c:	682b      	ldr	r3, [r5, #0]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d000      	beq.n	8009884 <_sbrk_r+0x1c>
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	bd70      	pop	{r4, r5, r6, pc}
 8009886:	46c0      	nop			@ (mov r8, r8)
 8009888:	20000374 	.word	0x20000374

0800988c <_write_r>:
 800988c:	b570      	push	{r4, r5, r6, lr}
 800988e:	0004      	movs	r4, r0
 8009890:	0008      	movs	r0, r1
 8009892:	0011      	movs	r1, r2
 8009894:	001a      	movs	r2, r3
 8009896:	2300      	movs	r3, #0
 8009898:	4d05      	ldr	r5, [pc, #20]	@ (80098b0 <_write_r+0x24>)
 800989a:	602b      	str	r3, [r5, #0]
 800989c:	f7fb fad1 	bl	8004e42 <_write>
 80098a0:	1c43      	adds	r3, r0, #1
 80098a2:	d103      	bne.n	80098ac <_write_r+0x20>
 80098a4:	682b      	ldr	r3, [r5, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d000      	beq.n	80098ac <_write_r+0x20>
 80098aa:	6023      	str	r3, [r4, #0]
 80098ac:	bd70      	pop	{r4, r5, r6, pc}
 80098ae:	46c0      	nop			@ (mov r8, r8)
 80098b0:	20000374 	.word	0x20000374

080098b4 <__errno>:
 80098b4:	4b01      	ldr	r3, [pc, #4]	@ (80098bc <__errno+0x8>)
 80098b6:	6818      	ldr	r0, [r3, #0]
 80098b8:	4770      	bx	lr
 80098ba:	46c0      	nop			@ (mov r8, r8)
 80098bc:	2000002c 	.word	0x2000002c

080098c0 <__libc_init_array>:
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	2600      	movs	r6, #0
 80098c4:	4c0c      	ldr	r4, [pc, #48]	@ (80098f8 <__libc_init_array+0x38>)
 80098c6:	4d0d      	ldr	r5, [pc, #52]	@ (80098fc <__libc_init_array+0x3c>)
 80098c8:	1b64      	subs	r4, r4, r5
 80098ca:	10a4      	asrs	r4, r4, #2
 80098cc:	42a6      	cmp	r6, r4
 80098ce:	d109      	bne.n	80098e4 <__libc_init_array+0x24>
 80098d0:	2600      	movs	r6, #0
 80098d2:	f000 fc3b 	bl	800a14c <_init>
 80098d6:	4c0a      	ldr	r4, [pc, #40]	@ (8009900 <__libc_init_array+0x40>)
 80098d8:	4d0a      	ldr	r5, [pc, #40]	@ (8009904 <__libc_init_array+0x44>)
 80098da:	1b64      	subs	r4, r4, r5
 80098dc:	10a4      	asrs	r4, r4, #2
 80098de:	42a6      	cmp	r6, r4
 80098e0:	d105      	bne.n	80098ee <__libc_init_array+0x2e>
 80098e2:	bd70      	pop	{r4, r5, r6, pc}
 80098e4:	00b3      	lsls	r3, r6, #2
 80098e6:	58eb      	ldr	r3, [r5, r3]
 80098e8:	4798      	blx	r3
 80098ea:	3601      	adds	r6, #1
 80098ec:	e7ee      	b.n	80098cc <__libc_init_array+0xc>
 80098ee:	00b3      	lsls	r3, r6, #2
 80098f0:	58eb      	ldr	r3, [r5, r3]
 80098f2:	4798      	blx	r3
 80098f4:	3601      	adds	r6, #1
 80098f6:	e7f2      	b.n	80098de <__libc_init_array+0x1e>
 80098f8:	0800a5b8 	.word	0x0800a5b8
 80098fc:	0800a5b8 	.word	0x0800a5b8
 8009900:	0800a5bc 	.word	0x0800a5bc
 8009904:	0800a5b8 	.word	0x0800a5b8

08009908 <__retarget_lock_init_recursive>:
 8009908:	4770      	bx	lr

0800990a <__retarget_lock_acquire_recursive>:
 800990a:	4770      	bx	lr

0800990c <__retarget_lock_release_recursive>:
 800990c:	4770      	bx	lr

0800990e <memcpy>:
 800990e:	2300      	movs	r3, #0
 8009910:	b510      	push	{r4, lr}
 8009912:	429a      	cmp	r2, r3
 8009914:	d100      	bne.n	8009918 <memcpy+0xa>
 8009916:	bd10      	pop	{r4, pc}
 8009918:	5ccc      	ldrb	r4, [r1, r3]
 800991a:	54c4      	strb	r4, [r0, r3]
 800991c:	3301      	adds	r3, #1
 800991e:	e7f8      	b.n	8009912 <memcpy+0x4>

08009920 <__assert_func>:
 8009920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009922:	0014      	movs	r4, r2
 8009924:	001a      	movs	r2, r3
 8009926:	4b09      	ldr	r3, [pc, #36]	@ (800994c <__assert_func+0x2c>)
 8009928:	0005      	movs	r5, r0
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	000e      	movs	r6, r1
 800992e:	68d8      	ldr	r0, [r3, #12]
 8009930:	4b07      	ldr	r3, [pc, #28]	@ (8009950 <__assert_func+0x30>)
 8009932:	2c00      	cmp	r4, #0
 8009934:	d101      	bne.n	800993a <__assert_func+0x1a>
 8009936:	4b07      	ldr	r3, [pc, #28]	@ (8009954 <__assert_func+0x34>)
 8009938:	001c      	movs	r4, r3
 800993a:	4907      	ldr	r1, [pc, #28]	@ (8009958 <__assert_func+0x38>)
 800993c:	9301      	str	r3, [sp, #4]
 800993e:	9402      	str	r4, [sp, #8]
 8009940:	002b      	movs	r3, r5
 8009942:	9600      	str	r6, [sp, #0]
 8009944:	f7ff fe36 	bl	80095b4 <fiprintf>
 8009948:	f000 fbaf 	bl	800a0aa <abort>
 800994c:	2000002c 	.word	0x2000002c
 8009950:	0800a547 	.word	0x0800a547
 8009954:	0800a582 	.word	0x0800a582
 8009958:	0800a554 	.word	0x0800a554

0800995c <_free_r>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	0005      	movs	r5, r0
 8009960:	1e0c      	subs	r4, r1, #0
 8009962:	d010      	beq.n	8009986 <_free_r+0x2a>
 8009964:	3c04      	subs	r4, #4
 8009966:	6823      	ldr	r3, [r4, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	da00      	bge.n	800996e <_free_r+0x12>
 800996c:	18e4      	adds	r4, r4, r3
 800996e:	0028      	movs	r0, r5
 8009970:	f7ff fc78 	bl	8009264 <__malloc_lock>
 8009974:	4a1d      	ldr	r2, [pc, #116]	@ (80099ec <_free_r+0x90>)
 8009976:	6813      	ldr	r3, [r2, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d105      	bne.n	8009988 <_free_r+0x2c>
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	6014      	str	r4, [r2, #0]
 8009980:	0028      	movs	r0, r5
 8009982:	f7ff fc77 	bl	8009274 <__malloc_unlock>
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	42a3      	cmp	r3, r4
 800998a:	d908      	bls.n	800999e <_free_r+0x42>
 800998c:	6820      	ldr	r0, [r4, #0]
 800998e:	1821      	adds	r1, r4, r0
 8009990:	428b      	cmp	r3, r1
 8009992:	d1f3      	bne.n	800997c <_free_r+0x20>
 8009994:	6819      	ldr	r1, [r3, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	1809      	adds	r1, r1, r0
 800999a:	6021      	str	r1, [r4, #0]
 800999c:	e7ee      	b.n	800997c <_free_r+0x20>
 800999e:	001a      	movs	r2, r3
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d001      	beq.n	80099aa <_free_r+0x4e>
 80099a6:	42a3      	cmp	r3, r4
 80099a8:	d9f9      	bls.n	800999e <_free_r+0x42>
 80099aa:	6811      	ldr	r1, [r2, #0]
 80099ac:	1850      	adds	r0, r2, r1
 80099ae:	42a0      	cmp	r0, r4
 80099b0:	d10b      	bne.n	80099ca <_free_r+0x6e>
 80099b2:	6820      	ldr	r0, [r4, #0]
 80099b4:	1809      	adds	r1, r1, r0
 80099b6:	1850      	adds	r0, r2, r1
 80099b8:	6011      	str	r1, [r2, #0]
 80099ba:	4283      	cmp	r3, r0
 80099bc:	d1e0      	bne.n	8009980 <_free_r+0x24>
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	1841      	adds	r1, r0, r1
 80099c4:	6011      	str	r1, [r2, #0]
 80099c6:	6053      	str	r3, [r2, #4]
 80099c8:	e7da      	b.n	8009980 <_free_r+0x24>
 80099ca:	42a0      	cmp	r0, r4
 80099cc:	d902      	bls.n	80099d4 <_free_r+0x78>
 80099ce:	230c      	movs	r3, #12
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	e7d5      	b.n	8009980 <_free_r+0x24>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	1821      	adds	r1, r4, r0
 80099d8:	428b      	cmp	r3, r1
 80099da:	d103      	bne.n	80099e4 <_free_r+0x88>
 80099dc:	6819      	ldr	r1, [r3, #0]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	1809      	adds	r1, r1, r0
 80099e2:	6021      	str	r1, [r4, #0]
 80099e4:	6063      	str	r3, [r4, #4]
 80099e6:	6054      	str	r4, [r2, #4]
 80099e8:	e7ca      	b.n	8009980 <_free_r+0x24>
 80099ea:	46c0      	nop			@ (mov r8, r8)
 80099ec:	20000234 	.word	0x20000234

080099f0 <__sfputc_r>:
 80099f0:	6893      	ldr	r3, [r2, #8]
 80099f2:	b510      	push	{r4, lr}
 80099f4:	3b01      	subs	r3, #1
 80099f6:	6093      	str	r3, [r2, #8]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	da04      	bge.n	8009a06 <__sfputc_r+0x16>
 80099fc:	6994      	ldr	r4, [r2, #24]
 80099fe:	42a3      	cmp	r3, r4
 8009a00:	db07      	blt.n	8009a12 <__sfputc_r+0x22>
 8009a02:	290a      	cmp	r1, #10
 8009a04:	d005      	beq.n	8009a12 <__sfputc_r+0x22>
 8009a06:	6813      	ldr	r3, [r2, #0]
 8009a08:	1c58      	adds	r0, r3, #1
 8009a0a:	6010      	str	r0, [r2, #0]
 8009a0c:	7019      	strb	r1, [r3, #0]
 8009a0e:	0008      	movs	r0, r1
 8009a10:	bd10      	pop	{r4, pc}
 8009a12:	f7ff fe47 	bl	80096a4 <__swbuf_r>
 8009a16:	0001      	movs	r1, r0
 8009a18:	e7f9      	b.n	8009a0e <__sfputc_r+0x1e>

08009a1a <__sfputs_r>:
 8009a1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1c:	0006      	movs	r6, r0
 8009a1e:	000f      	movs	r7, r1
 8009a20:	0014      	movs	r4, r2
 8009a22:	18d5      	adds	r5, r2, r3
 8009a24:	42ac      	cmp	r4, r5
 8009a26:	d101      	bne.n	8009a2c <__sfputs_r+0x12>
 8009a28:	2000      	movs	r0, #0
 8009a2a:	e007      	b.n	8009a3c <__sfputs_r+0x22>
 8009a2c:	7821      	ldrb	r1, [r4, #0]
 8009a2e:	003a      	movs	r2, r7
 8009a30:	0030      	movs	r0, r6
 8009a32:	f7ff ffdd 	bl	80099f0 <__sfputc_r>
 8009a36:	3401      	adds	r4, #1
 8009a38:	1c43      	adds	r3, r0, #1
 8009a3a:	d1f3      	bne.n	8009a24 <__sfputs_r+0xa>
 8009a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a40 <_vfiprintf_r>:
 8009a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a42:	b0a1      	sub	sp, #132	@ 0x84
 8009a44:	000f      	movs	r7, r1
 8009a46:	0015      	movs	r5, r2
 8009a48:	001e      	movs	r6, r3
 8009a4a:	9003      	str	r0, [sp, #12]
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d004      	beq.n	8009a5a <_vfiprintf_r+0x1a>
 8009a50:	6a03      	ldr	r3, [r0, #32]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <_vfiprintf_r+0x1a>
 8009a56:	f7ff fd95 	bl	8009584 <__sinit>
 8009a5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a5c:	07db      	lsls	r3, r3, #31
 8009a5e:	d405      	bmi.n	8009a6c <_vfiprintf_r+0x2c>
 8009a60:	89bb      	ldrh	r3, [r7, #12]
 8009a62:	059b      	lsls	r3, r3, #22
 8009a64:	d402      	bmi.n	8009a6c <_vfiprintf_r+0x2c>
 8009a66:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009a68:	f7ff ff4f 	bl	800990a <__retarget_lock_acquire_recursive>
 8009a6c:	89bb      	ldrh	r3, [r7, #12]
 8009a6e:	071b      	lsls	r3, r3, #28
 8009a70:	d502      	bpl.n	8009a78 <_vfiprintf_r+0x38>
 8009a72:	693b      	ldr	r3, [r7, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d113      	bne.n	8009aa0 <_vfiprintf_r+0x60>
 8009a78:	0039      	movs	r1, r7
 8009a7a:	9803      	ldr	r0, [sp, #12]
 8009a7c:	f7ff fe54 	bl	8009728 <__swsetup_r>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d00d      	beq.n	8009aa0 <_vfiprintf_r+0x60>
 8009a84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009a86:	07db      	lsls	r3, r3, #31
 8009a88:	d503      	bpl.n	8009a92 <_vfiprintf_r+0x52>
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	4240      	negs	r0, r0
 8009a8e:	b021      	add	sp, #132	@ 0x84
 8009a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a92:	89bb      	ldrh	r3, [r7, #12]
 8009a94:	059b      	lsls	r3, r3, #22
 8009a96:	d4f8      	bmi.n	8009a8a <_vfiprintf_r+0x4a>
 8009a98:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009a9a:	f7ff ff37 	bl	800990c <__retarget_lock_release_recursive>
 8009a9e:	e7f4      	b.n	8009a8a <_vfiprintf_r+0x4a>
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	ac08      	add	r4, sp, #32
 8009aa4:	6163      	str	r3, [r4, #20]
 8009aa6:	3320      	adds	r3, #32
 8009aa8:	7663      	strb	r3, [r4, #25]
 8009aaa:	3310      	adds	r3, #16
 8009aac:	76a3      	strb	r3, [r4, #26]
 8009aae:	9607      	str	r6, [sp, #28]
 8009ab0:	002e      	movs	r6, r5
 8009ab2:	7833      	ldrb	r3, [r6, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <_vfiprintf_r+0x7c>
 8009ab8:	2b25      	cmp	r3, #37	@ 0x25
 8009aba:	d148      	bne.n	8009b4e <_vfiprintf_r+0x10e>
 8009abc:	1b73      	subs	r3, r6, r5
 8009abe:	9305      	str	r3, [sp, #20]
 8009ac0:	42ae      	cmp	r6, r5
 8009ac2:	d00b      	beq.n	8009adc <_vfiprintf_r+0x9c>
 8009ac4:	002a      	movs	r2, r5
 8009ac6:	0039      	movs	r1, r7
 8009ac8:	9803      	ldr	r0, [sp, #12]
 8009aca:	f7ff ffa6 	bl	8009a1a <__sfputs_r>
 8009ace:	3001      	adds	r0, #1
 8009ad0:	d100      	bne.n	8009ad4 <_vfiprintf_r+0x94>
 8009ad2:	e0ae      	b.n	8009c32 <_vfiprintf_r+0x1f2>
 8009ad4:	6963      	ldr	r3, [r4, #20]
 8009ad6:	9a05      	ldr	r2, [sp, #20]
 8009ad8:	189b      	adds	r3, r3, r2
 8009ada:	6163      	str	r3, [r4, #20]
 8009adc:	7833      	ldrb	r3, [r6, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d100      	bne.n	8009ae4 <_vfiprintf_r+0xa4>
 8009ae2:	e0a6      	b.n	8009c32 <_vfiprintf_r+0x1f2>
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	4252      	negs	r2, r2
 8009aea:	6062      	str	r2, [r4, #4]
 8009aec:	a904      	add	r1, sp, #16
 8009aee:	3254      	adds	r2, #84	@ 0x54
 8009af0:	1852      	adds	r2, r2, r1
 8009af2:	1c75      	adds	r5, r6, #1
 8009af4:	6023      	str	r3, [r4, #0]
 8009af6:	60e3      	str	r3, [r4, #12]
 8009af8:	60a3      	str	r3, [r4, #8]
 8009afa:	7013      	strb	r3, [r2, #0]
 8009afc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8009afe:	4b59      	ldr	r3, [pc, #356]	@ (8009c64 <_vfiprintf_r+0x224>)
 8009b00:	2205      	movs	r2, #5
 8009b02:	0018      	movs	r0, r3
 8009b04:	7829      	ldrb	r1, [r5, #0]
 8009b06:	9305      	str	r3, [sp, #20]
 8009b08:	f000 fac4 	bl	800a094 <memchr>
 8009b0c:	1c6e      	adds	r6, r5, #1
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d11f      	bne.n	8009b52 <_vfiprintf_r+0x112>
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	06d3      	lsls	r3, r2, #27
 8009b16:	d504      	bpl.n	8009b22 <_vfiprintf_r+0xe2>
 8009b18:	2353      	movs	r3, #83	@ 0x53
 8009b1a:	a904      	add	r1, sp, #16
 8009b1c:	185b      	adds	r3, r3, r1
 8009b1e:	2120      	movs	r1, #32
 8009b20:	7019      	strb	r1, [r3, #0]
 8009b22:	0713      	lsls	r3, r2, #28
 8009b24:	d504      	bpl.n	8009b30 <_vfiprintf_r+0xf0>
 8009b26:	2353      	movs	r3, #83	@ 0x53
 8009b28:	a904      	add	r1, sp, #16
 8009b2a:	185b      	adds	r3, r3, r1
 8009b2c:	212b      	movs	r1, #43	@ 0x2b
 8009b2e:	7019      	strb	r1, [r3, #0]
 8009b30:	782b      	ldrb	r3, [r5, #0]
 8009b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b34:	d016      	beq.n	8009b64 <_vfiprintf_r+0x124>
 8009b36:	002e      	movs	r6, r5
 8009b38:	2100      	movs	r1, #0
 8009b3a:	200a      	movs	r0, #10
 8009b3c:	68e3      	ldr	r3, [r4, #12]
 8009b3e:	7832      	ldrb	r2, [r6, #0]
 8009b40:	1c75      	adds	r5, r6, #1
 8009b42:	3a30      	subs	r2, #48	@ 0x30
 8009b44:	2a09      	cmp	r2, #9
 8009b46:	d950      	bls.n	8009bea <_vfiprintf_r+0x1aa>
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d111      	bne.n	8009b70 <_vfiprintf_r+0x130>
 8009b4c:	e017      	b.n	8009b7e <_vfiprintf_r+0x13e>
 8009b4e:	3601      	adds	r6, #1
 8009b50:	e7af      	b.n	8009ab2 <_vfiprintf_r+0x72>
 8009b52:	9b05      	ldr	r3, [sp, #20]
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	1ac0      	subs	r0, r0, r3
 8009b58:	2301      	movs	r3, #1
 8009b5a:	4083      	lsls	r3, r0
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	0035      	movs	r5, r6
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	e7cc      	b.n	8009afe <_vfiprintf_r+0xbe>
 8009b64:	9b07      	ldr	r3, [sp, #28]
 8009b66:	1d19      	adds	r1, r3, #4
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	9107      	str	r1, [sp, #28]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	db01      	blt.n	8009b74 <_vfiprintf_r+0x134>
 8009b70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b72:	e004      	b.n	8009b7e <_vfiprintf_r+0x13e>
 8009b74:	425b      	negs	r3, r3
 8009b76:	60e3      	str	r3, [r4, #12]
 8009b78:	2302      	movs	r3, #2
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	6023      	str	r3, [r4, #0]
 8009b7e:	7833      	ldrb	r3, [r6, #0]
 8009b80:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b82:	d10c      	bne.n	8009b9e <_vfiprintf_r+0x15e>
 8009b84:	7873      	ldrb	r3, [r6, #1]
 8009b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b88:	d134      	bne.n	8009bf4 <_vfiprintf_r+0x1b4>
 8009b8a:	9b07      	ldr	r3, [sp, #28]
 8009b8c:	3602      	adds	r6, #2
 8009b8e:	1d1a      	adds	r2, r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	9207      	str	r2, [sp, #28]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	da01      	bge.n	8009b9c <_vfiprintf_r+0x15c>
 8009b98:	2301      	movs	r3, #1
 8009b9a:	425b      	negs	r3, r3
 8009b9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b9e:	4d32      	ldr	r5, [pc, #200]	@ (8009c68 <_vfiprintf_r+0x228>)
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	0028      	movs	r0, r5
 8009ba4:	7831      	ldrb	r1, [r6, #0]
 8009ba6:	f000 fa75 	bl	800a094 <memchr>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d006      	beq.n	8009bbc <_vfiprintf_r+0x17c>
 8009bae:	2340      	movs	r3, #64	@ 0x40
 8009bb0:	1b40      	subs	r0, r0, r5
 8009bb2:	4083      	lsls	r3, r0
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	3601      	adds	r6, #1
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	7831      	ldrb	r1, [r6, #0]
 8009bbe:	2206      	movs	r2, #6
 8009bc0:	482a      	ldr	r0, [pc, #168]	@ (8009c6c <_vfiprintf_r+0x22c>)
 8009bc2:	1c75      	adds	r5, r6, #1
 8009bc4:	7621      	strb	r1, [r4, #24]
 8009bc6:	f000 fa65 	bl	800a094 <memchr>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d040      	beq.n	8009c50 <_vfiprintf_r+0x210>
 8009bce:	4b28      	ldr	r3, [pc, #160]	@ (8009c70 <_vfiprintf_r+0x230>)
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d122      	bne.n	8009c1a <_vfiprintf_r+0x1da>
 8009bd4:	2207      	movs	r2, #7
 8009bd6:	9b07      	ldr	r3, [sp, #28]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	4393      	bics	r3, r2
 8009bdc:	3308      	adds	r3, #8
 8009bde:	9307      	str	r3, [sp, #28]
 8009be0:	6963      	ldr	r3, [r4, #20]
 8009be2:	9a04      	ldr	r2, [sp, #16]
 8009be4:	189b      	adds	r3, r3, r2
 8009be6:	6163      	str	r3, [r4, #20]
 8009be8:	e762      	b.n	8009ab0 <_vfiprintf_r+0x70>
 8009bea:	4343      	muls	r3, r0
 8009bec:	002e      	movs	r6, r5
 8009bee:	2101      	movs	r1, #1
 8009bf0:	189b      	adds	r3, r3, r2
 8009bf2:	e7a4      	b.n	8009b3e <_vfiprintf_r+0xfe>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	200a      	movs	r0, #10
 8009bf8:	0019      	movs	r1, r3
 8009bfa:	3601      	adds	r6, #1
 8009bfc:	6063      	str	r3, [r4, #4]
 8009bfe:	7832      	ldrb	r2, [r6, #0]
 8009c00:	1c75      	adds	r5, r6, #1
 8009c02:	3a30      	subs	r2, #48	@ 0x30
 8009c04:	2a09      	cmp	r2, #9
 8009c06:	d903      	bls.n	8009c10 <_vfiprintf_r+0x1d0>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0c8      	beq.n	8009b9e <_vfiprintf_r+0x15e>
 8009c0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8009c0e:	e7c6      	b.n	8009b9e <_vfiprintf_r+0x15e>
 8009c10:	4341      	muls	r1, r0
 8009c12:	002e      	movs	r6, r5
 8009c14:	2301      	movs	r3, #1
 8009c16:	1889      	adds	r1, r1, r2
 8009c18:	e7f1      	b.n	8009bfe <_vfiprintf_r+0x1be>
 8009c1a:	aa07      	add	r2, sp, #28
 8009c1c:	9200      	str	r2, [sp, #0]
 8009c1e:	0021      	movs	r1, r4
 8009c20:	003a      	movs	r2, r7
 8009c22:	4b14      	ldr	r3, [pc, #80]	@ (8009c74 <_vfiprintf_r+0x234>)
 8009c24:	9803      	ldr	r0, [sp, #12]
 8009c26:	e000      	b.n	8009c2a <_vfiprintf_r+0x1ea>
 8009c28:	bf00      	nop
 8009c2a:	9004      	str	r0, [sp, #16]
 8009c2c:	9b04      	ldr	r3, [sp, #16]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	d1d6      	bne.n	8009be0 <_vfiprintf_r+0x1a0>
 8009c32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c34:	07db      	lsls	r3, r3, #31
 8009c36:	d405      	bmi.n	8009c44 <_vfiprintf_r+0x204>
 8009c38:	89bb      	ldrh	r3, [r7, #12]
 8009c3a:	059b      	lsls	r3, r3, #22
 8009c3c:	d402      	bmi.n	8009c44 <_vfiprintf_r+0x204>
 8009c3e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009c40:	f7ff fe64 	bl	800990c <__retarget_lock_release_recursive>
 8009c44:	89bb      	ldrh	r3, [r7, #12]
 8009c46:	065b      	lsls	r3, r3, #25
 8009c48:	d500      	bpl.n	8009c4c <_vfiprintf_r+0x20c>
 8009c4a:	e71e      	b.n	8009a8a <_vfiprintf_r+0x4a>
 8009c4c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8009c4e:	e71e      	b.n	8009a8e <_vfiprintf_r+0x4e>
 8009c50:	aa07      	add	r2, sp, #28
 8009c52:	9200      	str	r2, [sp, #0]
 8009c54:	0021      	movs	r1, r4
 8009c56:	003a      	movs	r2, r7
 8009c58:	4b06      	ldr	r3, [pc, #24]	@ (8009c74 <_vfiprintf_r+0x234>)
 8009c5a:	9803      	ldr	r0, [sp, #12]
 8009c5c:	f000 f87c 	bl	8009d58 <_printf_i>
 8009c60:	e7e3      	b.n	8009c2a <_vfiprintf_r+0x1ea>
 8009c62:	46c0      	nop			@ (mov r8, r8)
 8009c64:	0800a583 	.word	0x0800a583
 8009c68:	0800a589 	.word	0x0800a589
 8009c6c:	0800a58d 	.word	0x0800a58d
 8009c70:	00000000 	.word	0x00000000
 8009c74:	08009a1b 	.word	0x08009a1b

08009c78 <_printf_common>:
 8009c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c7a:	0016      	movs	r6, r2
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	688a      	ldr	r2, [r1, #8]
 8009c80:	690b      	ldr	r3, [r1, #16]
 8009c82:	000c      	movs	r4, r1
 8009c84:	9000      	str	r0, [sp, #0]
 8009c86:	4293      	cmp	r3, r2
 8009c88:	da00      	bge.n	8009c8c <_printf_common+0x14>
 8009c8a:	0013      	movs	r3, r2
 8009c8c:	0022      	movs	r2, r4
 8009c8e:	6033      	str	r3, [r6, #0]
 8009c90:	3243      	adds	r2, #67	@ 0x43
 8009c92:	7812      	ldrb	r2, [r2, #0]
 8009c94:	2a00      	cmp	r2, #0
 8009c96:	d001      	beq.n	8009c9c <_printf_common+0x24>
 8009c98:	3301      	adds	r3, #1
 8009c9a:	6033      	str	r3, [r6, #0]
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	069b      	lsls	r3, r3, #26
 8009ca0:	d502      	bpl.n	8009ca8 <_printf_common+0x30>
 8009ca2:	6833      	ldr	r3, [r6, #0]
 8009ca4:	3302      	adds	r3, #2
 8009ca6:	6033      	str	r3, [r6, #0]
 8009ca8:	6822      	ldr	r2, [r4, #0]
 8009caa:	2306      	movs	r3, #6
 8009cac:	0015      	movs	r5, r2
 8009cae:	401d      	ands	r5, r3
 8009cb0:	421a      	tst	r2, r3
 8009cb2:	d027      	beq.n	8009d04 <_printf_common+0x8c>
 8009cb4:	0023      	movs	r3, r4
 8009cb6:	3343      	adds	r3, #67	@ 0x43
 8009cb8:	781b      	ldrb	r3, [r3, #0]
 8009cba:	1e5a      	subs	r2, r3, #1
 8009cbc:	4193      	sbcs	r3, r2
 8009cbe:	6822      	ldr	r2, [r4, #0]
 8009cc0:	0692      	lsls	r2, r2, #26
 8009cc2:	d430      	bmi.n	8009d26 <_printf_common+0xae>
 8009cc4:	0022      	movs	r2, r4
 8009cc6:	9901      	ldr	r1, [sp, #4]
 8009cc8:	9800      	ldr	r0, [sp, #0]
 8009cca:	9d08      	ldr	r5, [sp, #32]
 8009ccc:	3243      	adds	r2, #67	@ 0x43
 8009cce:	47a8      	blx	r5
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d025      	beq.n	8009d20 <_printf_common+0xa8>
 8009cd4:	2206      	movs	r2, #6
 8009cd6:	6823      	ldr	r3, [r4, #0]
 8009cd8:	2500      	movs	r5, #0
 8009cda:	4013      	ands	r3, r2
 8009cdc:	2b04      	cmp	r3, #4
 8009cde:	d105      	bne.n	8009cec <_printf_common+0x74>
 8009ce0:	6833      	ldr	r3, [r6, #0]
 8009ce2:	68e5      	ldr	r5, [r4, #12]
 8009ce4:	1aed      	subs	r5, r5, r3
 8009ce6:	43eb      	mvns	r3, r5
 8009ce8:	17db      	asrs	r3, r3, #31
 8009cea:	401d      	ands	r5, r3
 8009cec:	68a3      	ldr	r3, [r4, #8]
 8009cee:	6922      	ldr	r2, [r4, #16]
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	dd01      	ble.n	8009cf8 <_printf_common+0x80>
 8009cf4:	1a9b      	subs	r3, r3, r2
 8009cf6:	18ed      	adds	r5, r5, r3
 8009cf8:	2600      	movs	r6, #0
 8009cfa:	42b5      	cmp	r5, r6
 8009cfc:	d120      	bne.n	8009d40 <_printf_common+0xc8>
 8009cfe:	2000      	movs	r0, #0
 8009d00:	e010      	b.n	8009d24 <_printf_common+0xac>
 8009d02:	3501      	adds	r5, #1
 8009d04:	68e3      	ldr	r3, [r4, #12]
 8009d06:	6832      	ldr	r2, [r6, #0]
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	42ab      	cmp	r3, r5
 8009d0c:	ddd2      	ble.n	8009cb4 <_printf_common+0x3c>
 8009d0e:	0022      	movs	r2, r4
 8009d10:	2301      	movs	r3, #1
 8009d12:	9901      	ldr	r1, [sp, #4]
 8009d14:	9800      	ldr	r0, [sp, #0]
 8009d16:	9f08      	ldr	r7, [sp, #32]
 8009d18:	3219      	adds	r2, #25
 8009d1a:	47b8      	blx	r7
 8009d1c:	3001      	adds	r0, #1
 8009d1e:	d1f0      	bne.n	8009d02 <_printf_common+0x8a>
 8009d20:	2001      	movs	r0, #1
 8009d22:	4240      	negs	r0, r0
 8009d24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009d26:	2030      	movs	r0, #48	@ 0x30
 8009d28:	18e1      	adds	r1, r4, r3
 8009d2a:	3143      	adds	r1, #67	@ 0x43
 8009d2c:	7008      	strb	r0, [r1, #0]
 8009d2e:	0021      	movs	r1, r4
 8009d30:	1c5a      	adds	r2, r3, #1
 8009d32:	3145      	adds	r1, #69	@ 0x45
 8009d34:	7809      	ldrb	r1, [r1, #0]
 8009d36:	18a2      	adds	r2, r4, r2
 8009d38:	3243      	adds	r2, #67	@ 0x43
 8009d3a:	3302      	adds	r3, #2
 8009d3c:	7011      	strb	r1, [r2, #0]
 8009d3e:	e7c1      	b.n	8009cc4 <_printf_common+0x4c>
 8009d40:	0022      	movs	r2, r4
 8009d42:	2301      	movs	r3, #1
 8009d44:	9901      	ldr	r1, [sp, #4]
 8009d46:	9800      	ldr	r0, [sp, #0]
 8009d48:	9f08      	ldr	r7, [sp, #32]
 8009d4a:	321a      	adds	r2, #26
 8009d4c:	47b8      	blx	r7
 8009d4e:	3001      	adds	r0, #1
 8009d50:	d0e6      	beq.n	8009d20 <_printf_common+0xa8>
 8009d52:	3601      	adds	r6, #1
 8009d54:	e7d1      	b.n	8009cfa <_printf_common+0x82>
	...

08009d58 <_printf_i>:
 8009d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d5a:	b08b      	sub	sp, #44	@ 0x2c
 8009d5c:	9206      	str	r2, [sp, #24]
 8009d5e:	000a      	movs	r2, r1
 8009d60:	3243      	adds	r2, #67	@ 0x43
 8009d62:	9307      	str	r3, [sp, #28]
 8009d64:	9005      	str	r0, [sp, #20]
 8009d66:	9203      	str	r2, [sp, #12]
 8009d68:	7e0a      	ldrb	r2, [r1, #24]
 8009d6a:	000c      	movs	r4, r1
 8009d6c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d6e:	2a78      	cmp	r2, #120	@ 0x78
 8009d70:	d809      	bhi.n	8009d86 <_printf_i+0x2e>
 8009d72:	2a62      	cmp	r2, #98	@ 0x62
 8009d74:	d80b      	bhi.n	8009d8e <_printf_i+0x36>
 8009d76:	2a00      	cmp	r2, #0
 8009d78:	d100      	bne.n	8009d7c <_printf_i+0x24>
 8009d7a:	e0bc      	b.n	8009ef6 <_printf_i+0x19e>
 8009d7c:	497b      	ldr	r1, [pc, #492]	@ (8009f6c <_printf_i+0x214>)
 8009d7e:	9104      	str	r1, [sp, #16]
 8009d80:	2a58      	cmp	r2, #88	@ 0x58
 8009d82:	d100      	bne.n	8009d86 <_printf_i+0x2e>
 8009d84:	e090      	b.n	8009ea8 <_printf_i+0x150>
 8009d86:	0025      	movs	r5, r4
 8009d88:	3542      	adds	r5, #66	@ 0x42
 8009d8a:	702a      	strb	r2, [r5, #0]
 8009d8c:	e022      	b.n	8009dd4 <_printf_i+0x7c>
 8009d8e:	0010      	movs	r0, r2
 8009d90:	3863      	subs	r0, #99	@ 0x63
 8009d92:	2815      	cmp	r0, #21
 8009d94:	d8f7      	bhi.n	8009d86 <_printf_i+0x2e>
 8009d96:	f7f6 f9b7 	bl	8000108 <__gnu_thumb1_case_shi>
 8009d9a:	0016      	.short	0x0016
 8009d9c:	fff6001f 	.word	0xfff6001f
 8009da0:	fff6fff6 	.word	0xfff6fff6
 8009da4:	001ffff6 	.word	0x001ffff6
 8009da8:	fff6fff6 	.word	0xfff6fff6
 8009dac:	fff6fff6 	.word	0xfff6fff6
 8009db0:	003600a1 	.word	0x003600a1
 8009db4:	fff60080 	.word	0xfff60080
 8009db8:	00b2fff6 	.word	0x00b2fff6
 8009dbc:	0036fff6 	.word	0x0036fff6
 8009dc0:	fff6fff6 	.word	0xfff6fff6
 8009dc4:	0084      	.short	0x0084
 8009dc6:	0025      	movs	r5, r4
 8009dc8:	681a      	ldr	r2, [r3, #0]
 8009dca:	3542      	adds	r5, #66	@ 0x42
 8009dcc:	1d11      	adds	r1, r2, #4
 8009dce:	6019      	str	r1, [r3, #0]
 8009dd0:	6813      	ldr	r3, [r2, #0]
 8009dd2:	702b      	strb	r3, [r5, #0]
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e0a0      	b.n	8009f1a <_printf_i+0x1c2>
 8009dd8:	6818      	ldr	r0, [r3, #0]
 8009dda:	6809      	ldr	r1, [r1, #0]
 8009ddc:	1d02      	adds	r2, r0, #4
 8009dde:	060d      	lsls	r5, r1, #24
 8009de0:	d50b      	bpl.n	8009dfa <_printf_i+0xa2>
 8009de2:	6806      	ldr	r6, [r0, #0]
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	da03      	bge.n	8009df2 <_printf_i+0x9a>
 8009dea:	232d      	movs	r3, #45	@ 0x2d
 8009dec:	9a03      	ldr	r2, [sp, #12]
 8009dee:	4276      	negs	r6, r6
 8009df0:	7013      	strb	r3, [r2, #0]
 8009df2:	4b5e      	ldr	r3, [pc, #376]	@ (8009f6c <_printf_i+0x214>)
 8009df4:	270a      	movs	r7, #10
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	e018      	b.n	8009e2c <_printf_i+0xd4>
 8009dfa:	6806      	ldr	r6, [r0, #0]
 8009dfc:	601a      	str	r2, [r3, #0]
 8009dfe:	0649      	lsls	r1, r1, #25
 8009e00:	d5f1      	bpl.n	8009de6 <_printf_i+0x8e>
 8009e02:	b236      	sxth	r6, r6
 8009e04:	e7ef      	b.n	8009de6 <_printf_i+0x8e>
 8009e06:	6808      	ldr	r0, [r1, #0]
 8009e08:	6819      	ldr	r1, [r3, #0]
 8009e0a:	c940      	ldmia	r1!, {r6}
 8009e0c:	0605      	lsls	r5, r0, #24
 8009e0e:	d402      	bmi.n	8009e16 <_printf_i+0xbe>
 8009e10:	0640      	lsls	r0, r0, #25
 8009e12:	d500      	bpl.n	8009e16 <_printf_i+0xbe>
 8009e14:	b2b6      	uxth	r6, r6
 8009e16:	6019      	str	r1, [r3, #0]
 8009e18:	4b54      	ldr	r3, [pc, #336]	@ (8009f6c <_printf_i+0x214>)
 8009e1a:	270a      	movs	r7, #10
 8009e1c:	9304      	str	r3, [sp, #16]
 8009e1e:	2a6f      	cmp	r2, #111	@ 0x6f
 8009e20:	d100      	bne.n	8009e24 <_printf_i+0xcc>
 8009e22:	3f02      	subs	r7, #2
 8009e24:	0023      	movs	r3, r4
 8009e26:	2200      	movs	r2, #0
 8009e28:	3343      	adds	r3, #67	@ 0x43
 8009e2a:	701a      	strb	r2, [r3, #0]
 8009e2c:	6863      	ldr	r3, [r4, #4]
 8009e2e:	60a3      	str	r3, [r4, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	db03      	blt.n	8009e3c <_printf_i+0xe4>
 8009e34:	2104      	movs	r1, #4
 8009e36:	6822      	ldr	r2, [r4, #0]
 8009e38:	438a      	bics	r2, r1
 8009e3a:	6022      	str	r2, [r4, #0]
 8009e3c:	2e00      	cmp	r6, #0
 8009e3e:	d102      	bne.n	8009e46 <_printf_i+0xee>
 8009e40:	9d03      	ldr	r5, [sp, #12]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00c      	beq.n	8009e60 <_printf_i+0x108>
 8009e46:	9d03      	ldr	r5, [sp, #12]
 8009e48:	0030      	movs	r0, r6
 8009e4a:	0039      	movs	r1, r7
 8009e4c:	f7f6 f9ec 	bl	8000228 <__aeabi_uidivmod>
 8009e50:	9b04      	ldr	r3, [sp, #16]
 8009e52:	3d01      	subs	r5, #1
 8009e54:	5c5b      	ldrb	r3, [r3, r1]
 8009e56:	702b      	strb	r3, [r5, #0]
 8009e58:	0033      	movs	r3, r6
 8009e5a:	0006      	movs	r6, r0
 8009e5c:	429f      	cmp	r7, r3
 8009e5e:	d9f3      	bls.n	8009e48 <_printf_i+0xf0>
 8009e60:	2f08      	cmp	r7, #8
 8009e62:	d109      	bne.n	8009e78 <_printf_i+0x120>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	07db      	lsls	r3, r3, #31
 8009e68:	d506      	bpl.n	8009e78 <_printf_i+0x120>
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	6923      	ldr	r3, [r4, #16]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	dc02      	bgt.n	8009e78 <_printf_i+0x120>
 8009e72:	2330      	movs	r3, #48	@ 0x30
 8009e74:	3d01      	subs	r5, #1
 8009e76:	702b      	strb	r3, [r5, #0]
 8009e78:	9b03      	ldr	r3, [sp, #12]
 8009e7a:	1b5b      	subs	r3, r3, r5
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	9b07      	ldr	r3, [sp, #28]
 8009e80:	0021      	movs	r1, r4
 8009e82:	9300      	str	r3, [sp, #0]
 8009e84:	9805      	ldr	r0, [sp, #20]
 8009e86:	9b06      	ldr	r3, [sp, #24]
 8009e88:	aa09      	add	r2, sp, #36	@ 0x24
 8009e8a:	f7ff fef5 	bl	8009c78 <_printf_common>
 8009e8e:	3001      	adds	r0, #1
 8009e90:	d148      	bne.n	8009f24 <_printf_i+0x1cc>
 8009e92:	2001      	movs	r0, #1
 8009e94:	4240      	negs	r0, r0
 8009e96:	b00b      	add	sp, #44	@ 0x2c
 8009e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e9a:	2220      	movs	r2, #32
 8009e9c:	6809      	ldr	r1, [r1, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	6022      	str	r2, [r4, #0]
 8009ea2:	2278      	movs	r2, #120	@ 0x78
 8009ea4:	4932      	ldr	r1, [pc, #200]	@ (8009f70 <_printf_i+0x218>)
 8009ea6:	9104      	str	r1, [sp, #16]
 8009ea8:	0021      	movs	r1, r4
 8009eaa:	3145      	adds	r1, #69	@ 0x45
 8009eac:	700a      	strb	r2, [r1, #0]
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	6822      	ldr	r2, [r4, #0]
 8009eb2:	c940      	ldmia	r1!, {r6}
 8009eb4:	0610      	lsls	r0, r2, #24
 8009eb6:	d402      	bmi.n	8009ebe <_printf_i+0x166>
 8009eb8:	0650      	lsls	r0, r2, #25
 8009eba:	d500      	bpl.n	8009ebe <_printf_i+0x166>
 8009ebc:	b2b6      	uxth	r6, r6
 8009ebe:	6019      	str	r1, [r3, #0]
 8009ec0:	07d3      	lsls	r3, r2, #31
 8009ec2:	d502      	bpl.n	8009eca <_printf_i+0x172>
 8009ec4:	2320      	movs	r3, #32
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	6023      	str	r3, [r4, #0]
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	d001      	beq.n	8009ed2 <_printf_i+0x17a>
 8009ece:	2710      	movs	r7, #16
 8009ed0:	e7a8      	b.n	8009e24 <_printf_i+0xcc>
 8009ed2:	2220      	movs	r2, #32
 8009ed4:	6823      	ldr	r3, [r4, #0]
 8009ed6:	4393      	bics	r3, r2
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	e7f8      	b.n	8009ece <_printf_i+0x176>
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	680d      	ldr	r5, [r1, #0]
 8009ee0:	1d10      	adds	r0, r2, #4
 8009ee2:	6949      	ldr	r1, [r1, #20]
 8009ee4:	6018      	str	r0, [r3, #0]
 8009ee6:	6813      	ldr	r3, [r2, #0]
 8009ee8:	062e      	lsls	r6, r5, #24
 8009eea:	d501      	bpl.n	8009ef0 <_printf_i+0x198>
 8009eec:	6019      	str	r1, [r3, #0]
 8009eee:	e002      	b.n	8009ef6 <_printf_i+0x19e>
 8009ef0:	066d      	lsls	r5, r5, #25
 8009ef2:	d5fb      	bpl.n	8009eec <_printf_i+0x194>
 8009ef4:	8019      	strh	r1, [r3, #0]
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	9d03      	ldr	r5, [sp, #12]
 8009efa:	6123      	str	r3, [r4, #16]
 8009efc:	e7bf      	b.n	8009e7e <_printf_i+0x126>
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	1d11      	adds	r1, r2, #4
 8009f02:	6019      	str	r1, [r3, #0]
 8009f04:	6815      	ldr	r5, [r2, #0]
 8009f06:	2100      	movs	r1, #0
 8009f08:	0028      	movs	r0, r5
 8009f0a:	6862      	ldr	r2, [r4, #4]
 8009f0c:	f000 f8c2 	bl	800a094 <memchr>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d001      	beq.n	8009f18 <_printf_i+0x1c0>
 8009f14:	1b40      	subs	r0, r0, r5
 8009f16:	6060      	str	r0, [r4, #4]
 8009f18:	6863      	ldr	r3, [r4, #4]
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9a03      	ldr	r2, [sp, #12]
 8009f20:	7013      	strb	r3, [r2, #0]
 8009f22:	e7ac      	b.n	8009e7e <_printf_i+0x126>
 8009f24:	002a      	movs	r2, r5
 8009f26:	6923      	ldr	r3, [r4, #16]
 8009f28:	9906      	ldr	r1, [sp, #24]
 8009f2a:	9805      	ldr	r0, [sp, #20]
 8009f2c:	9d07      	ldr	r5, [sp, #28]
 8009f2e:	47a8      	blx	r5
 8009f30:	3001      	adds	r0, #1
 8009f32:	d0ae      	beq.n	8009e92 <_printf_i+0x13a>
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	079b      	lsls	r3, r3, #30
 8009f38:	d415      	bmi.n	8009f66 <_printf_i+0x20e>
 8009f3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f3c:	68e0      	ldr	r0, [r4, #12]
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	daa9      	bge.n	8009e96 <_printf_i+0x13e>
 8009f42:	0018      	movs	r0, r3
 8009f44:	e7a7      	b.n	8009e96 <_printf_i+0x13e>
 8009f46:	0022      	movs	r2, r4
 8009f48:	2301      	movs	r3, #1
 8009f4a:	9906      	ldr	r1, [sp, #24]
 8009f4c:	9805      	ldr	r0, [sp, #20]
 8009f4e:	9e07      	ldr	r6, [sp, #28]
 8009f50:	3219      	adds	r2, #25
 8009f52:	47b0      	blx	r6
 8009f54:	3001      	adds	r0, #1
 8009f56:	d09c      	beq.n	8009e92 <_printf_i+0x13a>
 8009f58:	3501      	adds	r5, #1
 8009f5a:	68e3      	ldr	r3, [r4, #12]
 8009f5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	42ab      	cmp	r3, r5
 8009f62:	dcf0      	bgt.n	8009f46 <_printf_i+0x1ee>
 8009f64:	e7e9      	b.n	8009f3a <_printf_i+0x1e2>
 8009f66:	2500      	movs	r5, #0
 8009f68:	e7f7      	b.n	8009f5a <_printf_i+0x202>
 8009f6a:	46c0      	nop			@ (mov r8, r8)
 8009f6c:	0800a594 	.word	0x0800a594
 8009f70:	0800a5a5 	.word	0x0800a5a5

08009f74 <__swhatbuf_r>:
 8009f74:	b570      	push	{r4, r5, r6, lr}
 8009f76:	000e      	movs	r6, r1
 8009f78:	001d      	movs	r5, r3
 8009f7a:	230e      	movs	r3, #14
 8009f7c:	5ec9      	ldrsh	r1, [r1, r3]
 8009f7e:	0014      	movs	r4, r2
 8009f80:	b096      	sub	sp, #88	@ 0x58
 8009f82:	2900      	cmp	r1, #0
 8009f84:	da0c      	bge.n	8009fa0 <__swhatbuf_r+0x2c>
 8009f86:	89b2      	ldrh	r2, [r6, #12]
 8009f88:	2380      	movs	r3, #128	@ 0x80
 8009f8a:	0011      	movs	r1, r2
 8009f8c:	4019      	ands	r1, r3
 8009f8e:	421a      	tst	r2, r3
 8009f90:	d114      	bne.n	8009fbc <__swhatbuf_r+0x48>
 8009f92:	2380      	movs	r3, #128	@ 0x80
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	2000      	movs	r0, #0
 8009f98:	6029      	str	r1, [r5, #0]
 8009f9a:	6023      	str	r3, [r4, #0]
 8009f9c:	b016      	add	sp, #88	@ 0x58
 8009f9e:	bd70      	pop	{r4, r5, r6, pc}
 8009fa0:	466a      	mov	r2, sp
 8009fa2:	f000 f853 	bl	800a04c <_fstat_r>
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	dbed      	blt.n	8009f86 <__swhatbuf_r+0x12>
 8009faa:	23f0      	movs	r3, #240	@ 0xf0
 8009fac:	9901      	ldr	r1, [sp, #4]
 8009fae:	021b      	lsls	r3, r3, #8
 8009fb0:	4019      	ands	r1, r3
 8009fb2:	4b04      	ldr	r3, [pc, #16]	@ (8009fc4 <__swhatbuf_r+0x50>)
 8009fb4:	18c9      	adds	r1, r1, r3
 8009fb6:	424b      	negs	r3, r1
 8009fb8:	4159      	adcs	r1, r3
 8009fba:	e7ea      	b.n	8009f92 <__swhatbuf_r+0x1e>
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	2340      	movs	r3, #64	@ 0x40
 8009fc0:	e7e9      	b.n	8009f96 <__swhatbuf_r+0x22>
 8009fc2:	46c0      	nop			@ (mov r8, r8)
 8009fc4:	ffffe000 	.word	0xffffe000

08009fc8 <__smakebuf_r>:
 8009fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fca:	2602      	movs	r6, #2
 8009fcc:	898b      	ldrh	r3, [r1, #12]
 8009fce:	0005      	movs	r5, r0
 8009fd0:	000c      	movs	r4, r1
 8009fd2:	b085      	sub	sp, #20
 8009fd4:	4233      	tst	r3, r6
 8009fd6:	d007      	beq.n	8009fe8 <__smakebuf_r+0x20>
 8009fd8:	0023      	movs	r3, r4
 8009fda:	3347      	adds	r3, #71	@ 0x47
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	6123      	str	r3, [r4, #16]
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	6163      	str	r3, [r4, #20]
 8009fe4:	b005      	add	sp, #20
 8009fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fe8:	ab03      	add	r3, sp, #12
 8009fea:	aa02      	add	r2, sp, #8
 8009fec:	f7ff ffc2 	bl	8009f74 <__swhatbuf_r>
 8009ff0:	9f02      	ldr	r7, [sp, #8]
 8009ff2:	9001      	str	r0, [sp, #4]
 8009ff4:	0039      	movs	r1, r7
 8009ff6:	0028      	movs	r0, r5
 8009ff8:	f7ff f8b4 	bl	8009164 <_malloc_r>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d108      	bne.n	800a012 <__smakebuf_r+0x4a>
 800a000:	220c      	movs	r2, #12
 800a002:	5ea3      	ldrsh	r3, [r4, r2]
 800a004:	059a      	lsls	r2, r3, #22
 800a006:	d4ed      	bmi.n	8009fe4 <__smakebuf_r+0x1c>
 800a008:	2203      	movs	r2, #3
 800a00a:	4393      	bics	r3, r2
 800a00c:	431e      	orrs	r6, r3
 800a00e:	81a6      	strh	r6, [r4, #12]
 800a010:	e7e2      	b.n	8009fd8 <__smakebuf_r+0x10>
 800a012:	2380      	movs	r3, #128	@ 0x80
 800a014:	89a2      	ldrh	r2, [r4, #12]
 800a016:	6020      	str	r0, [r4, #0]
 800a018:	4313      	orrs	r3, r2
 800a01a:	81a3      	strh	r3, [r4, #12]
 800a01c:	9b03      	ldr	r3, [sp, #12]
 800a01e:	6120      	str	r0, [r4, #16]
 800a020:	6167      	str	r7, [r4, #20]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00c      	beq.n	800a040 <__smakebuf_r+0x78>
 800a026:	0028      	movs	r0, r5
 800a028:	230e      	movs	r3, #14
 800a02a:	5ee1      	ldrsh	r1, [r4, r3]
 800a02c:	f000 f820 	bl	800a070 <_isatty_r>
 800a030:	2800      	cmp	r0, #0
 800a032:	d005      	beq.n	800a040 <__smakebuf_r+0x78>
 800a034:	2303      	movs	r3, #3
 800a036:	89a2      	ldrh	r2, [r4, #12]
 800a038:	439a      	bics	r2, r3
 800a03a:	3b02      	subs	r3, #2
 800a03c:	4313      	orrs	r3, r2
 800a03e:	81a3      	strh	r3, [r4, #12]
 800a040:	89a3      	ldrh	r3, [r4, #12]
 800a042:	9a01      	ldr	r2, [sp, #4]
 800a044:	4313      	orrs	r3, r2
 800a046:	81a3      	strh	r3, [r4, #12]
 800a048:	e7cc      	b.n	8009fe4 <__smakebuf_r+0x1c>
	...

0800a04c <_fstat_r>:
 800a04c:	2300      	movs	r3, #0
 800a04e:	b570      	push	{r4, r5, r6, lr}
 800a050:	4d06      	ldr	r5, [pc, #24]	@ (800a06c <_fstat_r+0x20>)
 800a052:	0004      	movs	r4, r0
 800a054:	0008      	movs	r0, r1
 800a056:	0011      	movs	r1, r2
 800a058:	602b      	str	r3, [r5, #0]
 800a05a:	f7fa ff18 	bl	8004e8e <_fstat>
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	d103      	bne.n	800a06a <_fstat_r+0x1e>
 800a062:	682b      	ldr	r3, [r5, #0]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d000      	beq.n	800a06a <_fstat_r+0x1e>
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	20000374 	.word	0x20000374

0800a070 <_isatty_r>:
 800a070:	2300      	movs	r3, #0
 800a072:	b570      	push	{r4, r5, r6, lr}
 800a074:	4d06      	ldr	r5, [pc, #24]	@ (800a090 <_isatty_r+0x20>)
 800a076:	0004      	movs	r4, r0
 800a078:	0008      	movs	r0, r1
 800a07a:	602b      	str	r3, [r5, #0]
 800a07c:	f7fa ff15 	bl	8004eaa <_isatty>
 800a080:	1c43      	adds	r3, r0, #1
 800a082:	d103      	bne.n	800a08c <_isatty_r+0x1c>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d000      	beq.n	800a08c <_isatty_r+0x1c>
 800a08a:	6023      	str	r3, [r4, #0]
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	46c0      	nop			@ (mov r8, r8)
 800a090:	20000374 	.word	0x20000374

0800a094 <memchr>:
 800a094:	b2c9      	uxtb	r1, r1
 800a096:	1882      	adds	r2, r0, r2
 800a098:	4290      	cmp	r0, r2
 800a09a:	d101      	bne.n	800a0a0 <memchr+0xc>
 800a09c:	2000      	movs	r0, #0
 800a09e:	4770      	bx	lr
 800a0a0:	7803      	ldrb	r3, [r0, #0]
 800a0a2:	428b      	cmp	r3, r1
 800a0a4:	d0fb      	beq.n	800a09e <memchr+0xa>
 800a0a6:	3001      	adds	r0, #1
 800a0a8:	e7f6      	b.n	800a098 <memchr+0x4>

0800a0aa <abort>:
 800a0aa:	2006      	movs	r0, #6
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	f000 f82d 	bl	800a10c <raise>
 800a0b2:	2001      	movs	r0, #1
 800a0b4:	f7fa fe9b 	bl	8004dee <_exit>

0800a0b8 <_raise_r>:
 800a0b8:	b570      	push	{r4, r5, r6, lr}
 800a0ba:	0004      	movs	r4, r0
 800a0bc:	000d      	movs	r5, r1
 800a0be:	291f      	cmp	r1, #31
 800a0c0:	d904      	bls.n	800a0cc <_raise_r+0x14>
 800a0c2:	2316      	movs	r3, #22
 800a0c4:	6003      	str	r3, [r0, #0]
 800a0c6:	2001      	movs	r0, #1
 800a0c8:	4240      	negs	r0, r0
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}
 800a0cc:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d004      	beq.n	800a0dc <_raise_r+0x24>
 800a0d2:	008a      	lsls	r2, r1, #2
 800a0d4:	189b      	adds	r3, r3, r2
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	d108      	bne.n	800a0ee <_raise_r+0x36>
 800a0dc:	0020      	movs	r0, r4
 800a0de:	f000 f831 	bl	800a144 <_getpid_r>
 800a0e2:	002a      	movs	r2, r5
 800a0e4:	0001      	movs	r1, r0
 800a0e6:	0020      	movs	r0, r4
 800a0e8:	f000 f81a 	bl	800a120 <_kill_r>
 800a0ec:	e7ed      	b.n	800a0ca <_raise_r+0x12>
 800a0ee:	2a01      	cmp	r2, #1
 800a0f0:	d009      	beq.n	800a106 <_raise_r+0x4e>
 800a0f2:	1c51      	adds	r1, r2, #1
 800a0f4:	d103      	bne.n	800a0fe <_raise_r+0x46>
 800a0f6:	2316      	movs	r3, #22
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e7e5      	b.n	800a0ca <_raise_r+0x12>
 800a0fe:	2100      	movs	r1, #0
 800a100:	0028      	movs	r0, r5
 800a102:	6019      	str	r1, [r3, #0]
 800a104:	4790      	blx	r2
 800a106:	2000      	movs	r0, #0
 800a108:	e7df      	b.n	800a0ca <_raise_r+0x12>
	...

0800a10c <raise>:
 800a10c:	b510      	push	{r4, lr}
 800a10e:	4b03      	ldr	r3, [pc, #12]	@ (800a11c <raise+0x10>)
 800a110:	0001      	movs	r1, r0
 800a112:	6818      	ldr	r0, [r3, #0]
 800a114:	f7ff ffd0 	bl	800a0b8 <_raise_r>
 800a118:	bd10      	pop	{r4, pc}
 800a11a:	46c0      	nop			@ (mov r8, r8)
 800a11c:	2000002c 	.word	0x2000002c

0800a120 <_kill_r>:
 800a120:	2300      	movs	r3, #0
 800a122:	b570      	push	{r4, r5, r6, lr}
 800a124:	4d06      	ldr	r5, [pc, #24]	@ (800a140 <_kill_r+0x20>)
 800a126:	0004      	movs	r4, r0
 800a128:	0008      	movs	r0, r1
 800a12a:	0011      	movs	r1, r2
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	f7fa fe4e 	bl	8004dce <_kill>
 800a132:	1c43      	adds	r3, r0, #1
 800a134:	d103      	bne.n	800a13e <_kill_r+0x1e>
 800a136:	682b      	ldr	r3, [r5, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d000      	beq.n	800a13e <_kill_r+0x1e>
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	20000374 	.word	0x20000374

0800a144 <_getpid_r>:
 800a144:	b510      	push	{r4, lr}
 800a146:	f7fa fe3c 	bl	8004dc2 <_getpid>
 800a14a:	bd10      	pop	{r4, pc}

0800a14c <_init>:
 800a14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a14e:	46c0      	nop			@ (mov r8, r8)
 800a150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a152:	bc08      	pop	{r3}
 800a154:	469e      	mov	lr, r3
 800a156:	4770      	bx	lr

0800a158 <_fini>:
 800a158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a15a:	46c0      	nop			@ (mov r8, r8)
 800a15c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a15e:	bc08      	pop	{r3}
 800a160:	469e      	mov	lr, r3
 800a162:	4770      	bx	lr
